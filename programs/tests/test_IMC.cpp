//***************************************************************************
// Copyright 2007-2022 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically generated.                                                 *
//***************************************************************************
// IMC XML MD5: 22739cefb8195d9946816920d152d5e8                            *
//***************************************************************************

// DUNE headers.
#include <DUNE/DUNE.hpp>

using DUNE_NAMESPACES;

#include "Test.hpp"

int
main(void)
{
  Test test("IMC Serialization/Deserialization");

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.19355490326356362);
    msg.setSource(61696U);
    msg.setSourceEntity(79U);
    msg.setDestination(18927U);
    msg.setDestinationEntity(208U);
    msg.state = 60U;
    msg.flags = 223U;
    msg.description.assign("ONUJQHKCEQJOMPCGHYYTKHLGNDWGCOLDLBIIYQNFCHMDJIWDKUPJZBCZTTLMRZVTFTDAVGSPEKQBYZXCAPDEMELDQJZHSCUDMAIMVNAFEXOEBZPPFQWEGTNBHXVKBVSOFBRHKXLINTYASFLIOXJWKNMTUTHHURWWBGRASIWXSOXKYCVRJDVGLFJRSVYOGWUMUISNDYYGZIKZCMROABLSAFPRQASREQWXANIFPKTNUURHFJEQLZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.3214150762999741);
    msg.setSource(21648U);
    msg.setSourceEntity(116U);
    msg.setDestination(51186U);
    msg.setDestinationEntity(11U);
    msg.state = 52U;
    msg.flags = 49U;
    msg.description.assign("NEJENHVTAYHXCHXHBYPAFNXVYMYDVPSASCYLZAQNCFBGDFNKVMFVJCSGOWGDWTTZRGCUFVIYMEMALSBQXXIMUHPAWLH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.43565693512183934);
    msg.setSource(48697U);
    msg.setSourceEntity(107U);
    msg.setDestination(14713U);
    msg.setDestinationEntity(217U);
    msg.state = 90U;
    msg.flags = 55U;
    msg.description.assign("VLHDSZEZBOZJYVDMEXYBDRGUFNOYIUHHSDMMQXTBWZLSFWWUSQFPCRGZZVBBSTORKBPXOSDPITXQUFJCN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.9465673202026119);
    msg.setSource(26772U);
    msg.setSourceEntity(14U);
    msg.setDestination(39906U);
    msg.setDestinationEntity(124U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.19110981950129036);
    msg.setSource(56200U);
    msg.setSourceEntity(187U);
    msg.setDestination(44877U);
    msg.setDestinationEntity(239U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.07123742453569937);
    msg.setSource(4745U);
    msg.setSourceEntity(49U);
    msg.setDestination(35151U);
    msg.setDestinationEntity(184U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.3009110382639004);
    msg.setSource(30676U);
    msg.setSourceEntity(253U);
    msg.setDestination(30475U);
    msg.setDestinationEntity(91U);
    msg.id = 154U;
    msg.label.assign("ATCGOAHXPMUETVZZZNXIPDRNUZMYBFGGLQHIQJXEWALLBDPYLQIMFPXBMVHGDJXJOLFIYTSZUMOPPZQEXDNOXKEJLVTKHVDHAZOWEAIWZGGFVYIPYKAUEKRMSFICYROJDJHVNSRWYLTUHJIWSQYOBUYUZVLTPTXDIULCFWKFACNUFMRKMADOHXBCERHCBLWKDZSURKCRQBMQPQVGCJCNT");
    msg.component.assign("PPSYXUGBVSQDYAMEFLTGCHELCIQQAWUAMDLYIAIWBGFDXXRFZEVARZABSWJWUKUJHEIEASHCTGDQPRZJXTMNJZHFTJIVJLTMHVCDOBIVNDJCBATRKJHFKWDMEBKNNMRCBVKOTVPYEZNAMEUFREFUSSNZNDXIKPGDLSPOJQKUHYDCNXTGOSSFSNVPWQOIMTTWBHJRQUOVRCMFXZGXFGNCKEORXZYKHLLYLYOQWLMICZXO");
    msg.act_time = 62710U;
    msg.deact_time = 35041U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.5995860857152584);
    msg.setSource(55822U);
    msg.setSourceEntity(180U);
    msg.setDestination(2171U);
    msg.setDestinationEntity(214U);
    msg.id = 251U;
    msg.label.assign("KUPIJWSVBSRUNCLPDYWERZHLAXCMQNQXGMFZOEEVFNOBMZRPDHQYKUNCQCPLSUHSEFDNDVPMERNQWLHWIIUJDTFLHOMMIGORRVFJBCZXGECFQKCGMZGBURYNXASXBLNSVHRXGTIYOIGGPPMSIKZHSXZFYTBOEOFEYLH");
    msg.component.assign("MSZQOEHQGRHU");
    msg.act_time = 61905U;
    msg.deact_time = 32897U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.6008548240307128);
    msg.setSource(35999U);
    msg.setSourceEntity(234U);
    msg.setDestination(62134U);
    msg.setDestinationEntity(93U);
    msg.id = 167U;
    msg.label.assign("JEKEHDKPESZUPTDWBJTINGGMYVORAVXWXSDGJWJMCQUPTCLDXCBKZSGCIRMNRZDNZQCWVMXBIQCCREVYCFFLOPPXUADONFSSAHSPEHZTEBTQFEUOIOAUBYYTWIBUOYJRXFNHRODAKNZBKLPNHFFHKFTBVMMGDZWXRAYWLZRLAPCKLXWBTIDSYUVVAKJVHUZLEKWUMOGLHSPQSMOYCYHG");
    msg.component.assign("NZDAASKRTPLHQDFXRNQEHTLQXWHQQEGGOMHGPBMACRIDXNPPWWHORNJBYEZTFMYUJBIECPPGZFUJPVPTCATLFZUTDHCMBZSMFBRSNFKYYUEQKLVWQDDXUZBHKYSESGOTYZMAYBKWQKOWYUKUGWDX");
    msg.act_time = 30065U;
    msg.deact_time = 45778U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.08610049562722988);
    msg.setSource(57776U);
    msg.setSourceEntity(174U);
    msg.setDestination(1335U);
    msg.setDestinationEntity(189U);
    msg.id = 23U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.40252917935638965);
    msg.setSource(52853U);
    msg.setSourceEntity(111U);
    msg.setDestination(29955U);
    msg.setDestinationEntity(254U);
    msg.id = 96U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.9885494542023555);
    msg.setSource(27449U);
    msg.setSourceEntity(225U);
    msg.setDestination(7015U);
    msg.setDestinationEntity(153U);
    msg.id = 130U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.3519339941765287);
    msg.setSource(2489U);
    msg.setSourceEntity(194U);
    msg.setDestination(47373U);
    msg.setDestinationEntity(71U);
    msg.op = 20U;
    msg.list.assign("VHVEKDGCTDGBRQVBULVMUJVMBIMUSOBDDHRFHRCBDEHAQLMMPEAEKALJMGEFMFPFNSQRPPTBTLOEGAUIFYVMBZAWNNHEJMUHAWORGIXSKYJKKYBOHIFKCOHRONSYKDXJTZZPGZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.6257761644082872);
    msg.setSource(18338U);
    msg.setSourceEntity(31U);
    msg.setDestination(20278U);
    msg.setDestinationEntity(62U);
    msg.op = 36U;
    msg.list.assign("IKMIRLFKRCIFWQXZXPXEVOQCREMUESIEGJVESVLWDLQWEZSBISFAKRHNNXIHDAQEIMYWBDJCUKKBCBQJHRPJCGXP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.38400982801919514);
    msg.setSource(56495U);
    msg.setSourceEntity(132U);
    msg.setDestination(62870U);
    msg.setDestinationEntity(34U);
    msg.op = 159U;
    msg.list.assign("DGDGMFGZRKINOKVTUAKOOAMCWQCVRT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.8866474142346489);
    msg.setSource(7397U);
    msg.setSourceEntity(45U);
    msg.setDestination(16328U);
    msg.setDestinationEntity(185U);
    msg.value = 55U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.5825197486152726);
    msg.setSource(59310U);
    msg.setSourceEntity(205U);
    msg.setDestination(23819U);
    msg.setDestinationEntity(5U);
    msg.value = 217U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.3930673272128947);
    msg.setSource(43235U);
    msg.setSourceEntity(27U);
    msg.setDestination(65401U);
    msg.setDestinationEntity(87U);
    msg.value = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.12182999953345208);
    msg.setSource(23294U);
    msg.setSourceEntity(110U);
    msg.setDestination(43426U);
    msg.setDestinationEntity(210U);
    msg.consumer.assign("IGMZOIQLPPHICZZMLZZYOVGITPAMMUREJEVUCTQNMQGSFWEKPWNIXNHUTGNIZHVWRUYDURIXFNADOFYJYBLSMJYHJCORSAF");
    msg.message_id = 42884U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.3081827017468889);
    msg.setSource(44421U);
    msg.setSourceEntity(96U);
    msg.setDestination(17361U);
    msg.setDestinationEntity(155U);
    msg.consumer.assign("RCVZEKHMFBUNSIJKVOQEBUEWTVENVBDYQDQ");
    msg.message_id = 37760U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.9890172153771318);
    msg.setSource(29948U);
    msg.setSourceEntity(188U);
    msg.setDestination(60073U);
    msg.setDestinationEntity(101U);
    msg.consumer.assign("UYRPVXSSNAFCLKVGOJHMJRSBER");
    msg.message_id = 6068U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.044377591802927996);
    msg.setSource(55933U);
    msg.setSourceEntity(117U);
    msg.setDestination(23213U);
    msg.setDestinationEntity(83U);
    msg.type = 11U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.3440689594282069);
    msg.setSource(30864U);
    msg.setSourceEntity(197U);
    msg.setDestination(34532U);
    msg.setDestinationEntity(37U);
    msg.type = 229U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.45325723904949233);
    msg.setSource(25055U);
    msg.setSourceEntity(95U);
    msg.setDestination(13138U);
    msg.setDestinationEntity(185U);
    msg.type = 102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.042865904790183595);
    msg.setSource(5715U);
    msg.setSourceEntity(241U);
    msg.setDestination(48701U);
    msg.setDestinationEntity(143U);
    msg.op = 123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.6286965847775738);
    msg.setSource(28585U);
    msg.setSourceEntity(132U);
    msg.setDestination(22260U);
    msg.setDestinationEntity(155U);
    msg.op = 156U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.9202635652135986);
    msg.setSource(51743U);
    msg.setSourceEntity(52U);
    msg.setDestination(42548U);
    msg.setDestinationEntity(209U);
    msg.op = 32U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.768263508074722);
    msg.setSource(22612U);
    msg.setSourceEntity(106U);
    msg.setDestination(10786U);
    msg.setDestinationEntity(250U);
    msg.total_steps = 70U;
    msg.step_number = 175U;
    msg.step.assign("ELTDBYJQVOKVWWRPUMCUGATOFTRUUFNJWJDFKGYNPDLAZIPRWNLRHPEJRCYCZQHIOGSRBEIQLKLUPJOPQBHAYSKROFYTJSHNVEGRCUSHCTTUBQKLVEVVWXGMMTHCQMNIJNCCDNBVEEPSFZFPAKDHSFYODRYIWFJFHPBGZQQLOFCZZEGWHIGOIVWLZSAMJLXQXYGMYQATYKNBXOVGRUANXKS");
    msg.flags = 44U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.1482934524208922);
    msg.setSource(5296U);
    msg.setSourceEntity(85U);
    msg.setDestination(10975U);
    msg.setDestinationEntity(106U);
    msg.total_steps = 32U;
    msg.step_number = 57U;
    msg.step.assign("FPYVNCBEEXKJGLBUSIYPREHAHYFGQOUXACUTBOAAKPAMDCROTCXOUJDTQRGFYAMBTBGEUVSZAMAKRJKULKQNSTJXGITQRUHMQGLXOMELM");
    msg.flags = 80U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.6537435392296068);
    msg.setSource(41024U);
    msg.setSourceEntity(133U);
    msg.setDestination(56838U);
    msg.setDestinationEntity(94U);
    msg.total_steps = 193U;
    msg.step_number = 38U;
    msg.step.assign("MSTRCJDUGMMJXZQISHWPBVCLDQNOKGBZSCQZ");
    msg.flags = 205U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.04947939129952472);
    msg.setSource(6891U);
    msg.setSourceEntity(208U);
    msg.setDestination(36613U);
    msg.setDestinationEntity(233U);
    msg.state = 55U;
    msg.error.assign("ICICKFUAOOIRNSZVSGPLHUTCQVYBKIYJJOYULXLMPNFTZTBFUNBTCJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.6954832305436666);
    msg.setSource(11744U);
    msg.setSourceEntity(185U);
    msg.setDestination(18887U);
    msg.setDestinationEntity(163U);
    msg.state = 216U;
    msg.error.assign("TYYCCIQFDONGPTHDODLSBPCHGPJUHGWDHJAXIHNZQLGKETVLVZXDOEVLISPBXNSARYLBOTQWKEEYXFFMGHPUQTMZKAMSLMUPJEZFDZJXSZXSFQBCVKEJRRVBOOEKTYWPCNOUFQZALADXXPCUHBIWSVTGAFCUENQKCLMVXAJILVBIDCMMPTVFYZWREMGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.9712273068102714);
    msg.setSource(23080U);
    msg.setSourceEntity(113U);
    msg.setDestination(54149U);
    msg.setDestinationEntity(90U);
    msg.state = 27U;
    msg.error.assign("NNWHHNGFHNIWRMIGOFTAUIQPSLKZZJSSLCRWZIWDGPUIUNUBJKXCUSTPEXWRJBDFNXBLQCWIMAQTHYCTAXHVBOFPFZBAOTXZXJQAFGBQSOIALYKPBCEQUUMVDHHJLXMDMPDLETVZNGSCMFKOLZRYBXJIBANPGAXCYKGPODKNYVEOMOGEETMWUFCKRFPIJGZKEHDCAYZVBVQLDHVUZRRHVOKYORFDRWLPMXTLGJVAYMJUQW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.2861179709325432);
    msg.setSource(26629U);
    msg.setSourceEntity(160U);
    msg.setDestination(11305U);
    msg.setDestinationEntity(230U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.41656440517088467);
    msg.setSource(47635U);
    msg.setSourceEntity(56U);
    msg.setDestination(22682U);
    msg.setDestinationEntity(20U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.8562385423186782);
    msg.setSource(22086U);
    msg.setSourceEntity(146U);
    msg.setDestination(6414U);
    msg.setDestinationEntity(210U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.45968623657383423);
    msg.setSource(31146U);
    msg.setSourceEntity(204U);
    msg.setDestination(35891U);
    msg.setDestinationEntity(71U);
    msg.op = 89U;
    msg.speed_min = 0.3964995570198039;
    msg.speed_max = 0.4682567815127666;
    msg.long_accel = 0.4616792142655114;
    msg.alt_max_msl = 0.5517947935234181;
    msg.dive_fraction_max = 0.7589763965750262;
    msg.climb_fraction_max = 0.9436065486071369;
    msg.bank_max = 0.14625517405871746;
    msg.p_max = 0.42446482298997434;
    msg.pitch_min = 0.5579916030109832;
    msg.pitch_max = 0.05183516236161523;
    msg.q_max = 0.6121507716853901;
    msg.g_min = 0.2641128761797845;
    msg.g_max = 0.26649594149289135;
    msg.g_lat_max = 0.3324504123819845;
    msg.rpm_min = 0.9942894865694855;
    msg.rpm_max = 0.664292735751435;
    msg.rpm_rate_max = 0.34084432461403913;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.6102792479404743);
    msg.setSource(58435U);
    msg.setSourceEntity(226U);
    msg.setDestination(1131U);
    msg.setDestinationEntity(73U);
    msg.op = 43U;
    msg.speed_min = 0.5698016449703884;
    msg.speed_max = 0.8673954908402312;
    msg.long_accel = 0.42498561544077273;
    msg.alt_max_msl = 0.13890094559042032;
    msg.dive_fraction_max = 0.031995222176662064;
    msg.climb_fraction_max = 0.24200182078982058;
    msg.bank_max = 0.4269014096980108;
    msg.p_max = 0.16771234839483629;
    msg.pitch_min = 0.6283034489774096;
    msg.pitch_max = 0.763305419656537;
    msg.q_max = 0.40402769845718245;
    msg.g_min = 0.2826824256591389;
    msg.g_max = 0.8497542048396782;
    msg.g_lat_max = 0.8884137648955412;
    msg.rpm_min = 0.3448295567716976;
    msg.rpm_max = 0.25567837758010514;
    msg.rpm_rate_max = 0.9821018264796254;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.4380648234844582);
    msg.setSource(29464U);
    msg.setSourceEntity(113U);
    msg.setDestination(6686U);
    msg.setDestinationEntity(214U);
    msg.op = 31U;
    msg.speed_min = 0.21085741429056926;
    msg.speed_max = 0.6332385430396126;
    msg.long_accel = 0.9366379573251973;
    msg.alt_max_msl = 0.5173959841402099;
    msg.dive_fraction_max = 0.37851626127115556;
    msg.climb_fraction_max = 0.5038717557029679;
    msg.bank_max = 0.3081320720435632;
    msg.p_max = 0.87060797179413;
    msg.pitch_min = 0.6826443649645039;
    msg.pitch_max = 0.18638211641080404;
    msg.q_max = 0.13673040363440014;
    msg.g_min = 0.49697967675711185;
    msg.g_max = 0.392934854951983;
    msg.g_lat_max = 0.4224112772714984;
    msg.rpm_min = 0.9222726518697495;
    msg.rpm_max = 0.6513602851569236;
    msg.rpm_rate_max = 0.2284796672635201;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.8976991099987257);
    msg.setSource(18171U);
    msg.setSourceEntity(27U);
    msg.setDestination(56745U);
    msg.setDestinationEntity(213U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.2965053204873521);
    msg.setSource(9040U);
    msg.setSourceEntity(5U);
    msg.setDestination(5762U);
    msg.setDestinationEntity(64U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.10592330606946188);
    msg.setSource(24442U);
    msg.setSourceEntity(167U);
    msg.setDestination(24678U);
    msg.setDestinationEntity(175U);
    IMC::Conductivity tmp_msg_0;
    tmp_msg_0.value = 0.41882377861080466;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.650106083007725);
    msg.setSource(42083U);
    msg.setSourceEntity(157U);
    msg.setDestination(29691U);
    msg.setDestinationEntity(188U);
    msg.lat = 0.9749927685176714;
    msg.lon = 0.6943477694224349;
    msg.height = 0.776111960772863;
    msg.x = 0.7153807174262871;
    msg.y = 0.9672074865603739;
    msg.z = 0.7459766276053929;
    msg.phi = 0.4718249012318265;
    msg.theta = 0.30615346159085866;
    msg.psi = 0.8195044853660876;
    msg.u = 0.4640517666799442;
    msg.v = 0.22087418116565627;
    msg.w = 0.3992406060887177;
    msg.p = 0.7665218347247374;
    msg.q = 0.6028349738284191;
    msg.r = 0.796370876715412;
    msg.svx = 0.7366086803782689;
    msg.svy = 0.578157197109128;
    msg.svz = 0.3037240180016396;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.176949293333031);
    msg.setSource(12856U);
    msg.setSourceEntity(19U);
    msg.setDestination(65127U);
    msg.setDestinationEntity(212U);
    msg.lat = 0.47353839747795945;
    msg.lon = 0.9332377572681148;
    msg.height = 0.9161896650827631;
    msg.x = 0.21754232879222046;
    msg.y = 0.9459716417824725;
    msg.z = 0.29057830968415843;
    msg.phi = 0.2141888928966481;
    msg.theta = 0.9269501081951452;
    msg.psi = 0.112385581283586;
    msg.u = 0.2966764786949019;
    msg.v = 0.2843051304698483;
    msg.w = 0.6814712495098316;
    msg.p = 0.2713017945329438;
    msg.q = 0.3762405232724211;
    msg.r = 0.7589938421196875;
    msg.svx = 0.6658076005512159;
    msg.svy = 0.5693236289244742;
    msg.svz = 0.6548454069916266;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.6868701575949299);
    msg.setSource(23393U);
    msg.setSourceEntity(230U);
    msg.setDestination(35523U);
    msg.setDestinationEntity(202U);
    msg.lat = 0.9112726268463057;
    msg.lon = 0.6595392941028833;
    msg.height = 0.7276461585120502;
    msg.x = 0.37975857708382443;
    msg.y = 0.994534114809578;
    msg.z = 0.8277912394161935;
    msg.phi = 0.6955256426638428;
    msg.theta = 0.30712486696382724;
    msg.psi = 0.144573568373495;
    msg.u = 0.7991901630627573;
    msg.v = 0.35382293270266996;
    msg.w = 0.07984171865683343;
    msg.p = 0.99494010905809;
    msg.q = 0.6260174392152357;
    msg.r = 0.7742962287103541;
    msg.svx = 0.9607667403316338;
    msg.svy = 0.33701078496219516;
    msg.svz = 0.621378471187752;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.5506808532899671);
    msg.setSource(14798U);
    msg.setSourceEntity(46U);
    msg.setDestination(1717U);
    msg.setDestinationEntity(166U);
    msg.op = 35U;
    msg.entities.assign("NEVRIYHBLIPLNXLUEDGNLOXUHPWJGRAAEPNNQZBTYWFOKTKVCCRXLHZRRMYXXOLLOHOQKFTILWMKFSHCKBBGADMZRPWLXXFSAJTTCASUQTBDORSYAEUJMDKQRVIBUQPGXWFMZFGYOXHSCJFTMIZVSHFUMUDCDBYHNWNADDSTNNRZWIVGJTSFVKZJWQOECJFQJAVJGYHEM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.6989739394891953);
    msg.setSource(32384U);
    msg.setSourceEntity(177U);
    msg.setDestination(29973U);
    msg.setDestinationEntity(102U);
    msg.op = 215U;
    msg.entities.assign("FSZQXBMPCDXIOOQFHYZPIXUXTBHVJKOCUBGZPUXTNWMFUIQEKLTAQFCINDKPKCWRTDFUMYCDPRSSNNSTAZUHPOHIYZLVGFESGAIRCVEVSYKFRDMWJCXGKYTEKFDMXBAGZVQMSLVZOHDQCSLSOQOVNFOJHLWAUHLXKIMZWGJKBGDOEEGTEVUAKZSMRWYWWDXHRTEMXYRYBBPELOBJJNWIJGHQLULCINV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.7262541040484861);
    msg.setSource(39013U);
    msg.setSourceEntity(98U);
    msg.setDestination(46898U);
    msg.setDestinationEntity(89U);
    msg.op = 207U;
    msg.entities.assign("ZCQTIVVPLPSRJCTXIWHMOMCTNAQUJXIZEOQKNPMTMZXQWVXIKEFLOCYCUPMCGPPAGXSFSDDSNHXNQYVUBXDIFGIQRHGWDUZLNFNFLVKNEGOARYFPALTJJFSBJTKDZHIQZIKXHHEZKVUAYUQWYLUJSGQZUBSMBRTBNGHSKDBGBFQBDADCLXHHJVRLEBBFUAODYO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.9442925949718322);
    msg.setSource(31133U);
    msg.setSourceEntity(131U);
    msg.setDestination(19459U);
    msg.setDestinationEntity(94U);
    msg.type = 11U;
    msg.speed = 2744U;
    const signed char tmp_msg_0[] = {-99, 110, 35, -128, 105, -95, 34, -35, -21, 21, -26, -122, -96, -59, 73, -128, -14, -61, 76, 2, -15, 16, -114, 62, 0, 121, 3, -17, 33, 61, -58, -91, 31, -98, -67, 89, 123, -30, 28, 110, -64, 70, 9, 63, 104, 17, 63, -115, 18, -109, -83, 34, -110, -105, 19, 74, -11, -14, -72, 90, -126, 45, 17, 102, 53, -117, -96, 41, -39, 64, -13, -18, -33, -125, 62, -113, -53, -9, -120, 61, 119, 45, 17, 104, -53, -70, 13, -89, 35, -37, 103, 113, -38, -108, 42, -68, 113, -97, 34, 122, 54, 91, 40, -1, -19, -34, -1, 4, -101, -52, 69, 74, -31, -63, -75, 122, 74};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.6905433185191762);
    msg.setSource(35260U);
    msg.setSourceEntity(147U);
    msg.setDestination(3798U);
    msg.setDestinationEntity(101U);
    msg.type = 87U;
    msg.speed = 35677U;
    const signed char tmp_msg_0[] = {-128, -110, -102, -116, -96, -19, 83, 48, -120, 89, 42, -47, -110, -113, -111, -14, -76, 68, -82, 65, 89, -127, -124, -100};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.9736021913918503);
    msg.setSource(46007U);
    msg.setSourceEntity(182U);
    msg.setDestination(14923U);
    msg.setDestinationEntity(84U);
    msg.type = 70U;
    msg.speed = 50646U;
    const signed char tmp_msg_0[] = {107, -19, 9, -16, 25, 84, 11, 28, -101, -18, -98, 90, -54, 70, -49, -105, -85, 79, 119, -15, -47, 43, 3, 37, -122, 17, -101, -15, -92, -70, -115, -83, -76, -110, -73, -20, -114, -76, -15, 86, -9, -73, -42, 38, 113, 88, 59, -51, 76, -32, 14, -46, 57, 82, 5, -117, -39, 76, -11, 17, -5, -43, 96, -32, 42, 39, -32, 105, -18, -110, 115, -45, -35, 115, -74, -92, -111, 76, -73, -77, -39, -96, -101, 58, 0, 109, -85, 47, 12, -105, 30, -31, -112, -94, 105, -124, -127, -5, 120, 21, 70, -90, 33, -95, -113, 68, -70, 24, 13, -42, -10, 71, -118, 9, 65, -99, 4, -65, -63, 43, 62, 121, 87, 47, -51, -114, 92, 16, -31, 12, 79, -120, -3, -41, -4, 99, 64, 98, 124, 43, -112, -52, 11, -27, 23, -32, -10, 22, -51, -106, -25, -38, -11, -128, -100, 76, 47, 95, -26, -34, 24, -58, -40, 90, 73, -84, -102, -93, -73, -17, -53, -23, 118, 86, -62, 114, -114, 41, -52, 18, 101, -83, 24, 73, 67, -86, -13, -78, 34, 90, -9, -32, -45, -102, -38, 115, -75, 31, -92, -102};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.6933276454366409);
    msg.setSource(29078U);
    msg.setSourceEntity(178U);
    msg.setDestination(40998U);
    msg.setDestinationEntity(23U);
    msg.op = 154U;
    msg.tas2acc_pgain = 0.3948073317134412;
    msg.bank2p_pgain = 0.35986890366148105;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.7481613585407542);
    msg.setSource(22837U);
    msg.setSourceEntity(172U);
    msg.setDestination(18449U);
    msg.setDestinationEntity(89U);
    msg.op = 212U;
    msg.tas2acc_pgain = 0.7593295353219915;
    msg.bank2p_pgain = 0.22120782921296733;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.5608465519944981);
    msg.setSource(46807U);
    msg.setSourceEntity(117U);
    msg.setDestination(28059U);
    msg.setDestinationEntity(181U);
    msg.op = 176U;
    msg.tas2acc_pgain = 0.5113233545574828;
    msg.bank2p_pgain = 0.0261050110749238;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.4885003919122486);
    msg.setSource(18694U);
    msg.setSourceEntity(195U);
    msg.setDestination(5396U);
    msg.setDestinationEntity(6U);
    msg.available = 3246866647U;
    msg.value = 225U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.43263144601794135);
    msg.setSource(18418U);
    msg.setSourceEntity(177U);
    msg.setDestination(12668U);
    msg.setDestinationEntity(138U);
    msg.available = 674074947U;
    msg.value = 83U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.4916632447306587);
    msg.setSource(18049U);
    msg.setSourceEntity(64U);
    msg.setDestination(4738U);
    msg.setDestinationEntity(12U);
    msg.available = 1617123350U;
    msg.value = 167U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.38565109199145486);
    msg.setSource(56654U);
    msg.setSourceEntity(115U);
    msg.setDestination(22145U);
    msg.setDestinationEntity(96U);
    msg.op = 15U;
    msg.snapshot.assign("AAMTSZPJIGYASKBJGTNUKWFDKUKXDQNMYUCWYLF");
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.46452805001242037;
    tmp_msg_0.y = 0.33863738427221424;
    tmp_msg_0.z = 0.8265269868964192;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.08784300569300474);
    msg.setSource(57454U);
    msg.setSourceEntity(150U);
    msg.setDestination(59153U);
    msg.setDestinationEntity(249U);
    msg.op = 81U;
    msg.snapshot.assign("JYRBAFHYQRANCGSVGKAOCZSQTBYVJWZWAXGNPQZOYRHMTQNKRZFQCOLKDBMJIADRYYHUSPXKQKNYBAPYRUPCIXAKGBBLTMFXFPHWJYQCFCXZWACSMGURVRCOICVLRIMUGUPTNTPDDXWVKKVZEJPOPGCPSLDHQMOOOULJWTSVTIUGADUGEIWHJXEGVFESHBLHSHLEATZXFOSBXYBVD");
    IMC::EntityActivationState tmp_msg_0;
    tmp_msg_0.state = 95U;
    tmp_msg_0.error.assign("UPKVQQEZOPRPDWRSKOSFYYFUFNCRBJJXVXFNMMRMLKUJJPZMXDTFIUCKRBDLERRXEBIIBTWSPCYASHKFCLOHLUMENXYNIPSZDDVWHLTLIPGANQJMHEZYGWHCCWGGGWJHKOYCATUXNCTXFNPIDKCRHSVLSTMJUPEXTYDOJNWBOZWBIJHKWIMPBSTIONGQDAGLBUEBEAUBOVVQKFMDVJKAXWGYLQ");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.9175243951483961);
    msg.setSource(35674U);
    msg.setSourceEntity(25U);
    msg.setDestination(47620U);
    msg.setDestinationEntity(99U);
    msg.op = 205U;
    msg.snapshot.assign("MMLNYIDFPVUPGTRZCKYNYSTZJCVFLAAICWGTILAQDJLOSEODDKLRGTBFKFMXMHCPWCFVQAMJCBZNYPZFYIZEQJWPYKSCFJRPNUMSRDTIAYSZKVEFYEHUETRHOLHLNGFPSXVIXVWHREUJNUPKGUDXMOWVYQJSBJQABRGCLBZBUHROHBBIXMGXVRZAOISZUKVNSPKWTTGSNGEAXWUEIK");
    IMC::WindSpeed tmp_msg_0;
    tmp_msg_0.direction = 0.8702070135541977;
    tmp_msg_0.speed = 0.771950692934649;
    tmp_msg_0.turbulence = 0.9489879286438513;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.7228213102755754);
    msg.setSource(16169U);
    msg.setSourceEntity(117U);
    msg.setDestination(41454U);
    msg.setDestinationEntity(32U);
    msg.op = 121U;
    msg.name.assign("QUREZBSVBJPCWOXYYLVTMOTELOLGCCRZFLOFYDDZBIXJPXAKWYBUKIOUQESPOZJWVXWGDILMPMBRUDPAUEPVVGT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.1858028853897693);
    msg.setSource(16818U);
    msg.setSourceEntity(176U);
    msg.setDestination(57314U);
    msg.setDestinationEntity(61U);
    msg.op = 182U;
    msg.name.assign("RCSMSUGGFUHXWYJBPTHSNQTMTDXYUOWJRHFXILJXDYHASUZEEXFM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.10582595456193677);
    msg.setSource(35796U);
    msg.setSourceEntity(39U);
    msg.setDestination(64268U);
    msg.setDestinationEntity(91U);
    msg.op = 105U;
    msg.name.assign("HYXWJKTPWNILHPHKKQRULIQFJBAPTACOCZLASTOSEWRSXHECHZQEATUWKCSEKAISJUVEULXWPOKVZLBXMFEVMOTRVRWBXRVNNDXIVIEJNJGFXLSGODVVTHNSIYDMDOAJPAMIVRVCMXHCOJFRFTNANKNUDGUXWMJSCGIJZMIWFLPPJPQNZTDGCUKBNOQUWBBETTBQRSFQDFRDQYGAKLCZLYFQYGOEK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.30972681891529263);
    msg.setSource(10448U);
    msg.setSourceEntity(24U);
    msg.setDestination(658U);
    msg.setDestinationEntity(126U);
    msg.type = 122U;
    msg.htime = 0.021186896775035713;
    msg.context.assign("SYGQUTCDBOVIPLYMHJFOKHIEYSLTDTMIXPHBDGRXBEYBCTCIPXEWXWNYSWXIOVEWISLBSQTQBRFJNHEJAVNEQDOWAQVXRRXYSPSAIXKJVLDTHAC");
    msg.text.assign("EGFMFEUKRBHNBYRTVRIDAOANUNHUEAOKBJIYVBEYXQENVFOX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.8872001264240886);
    msg.setSource(25710U);
    msg.setSourceEntity(115U);
    msg.setDestination(3622U);
    msg.setDestinationEntity(210U);
    msg.type = 13U;
    msg.htime = 0.4475389342693048;
    msg.context.assign("XSMKSIVPLBCYDHYKRUDXHMDQTSGXELEYSSWWYSABTXLGXWAKIAXRWYFTTAJJOCVIONEXKGONUKHJRCETHFPLIANBKVLZLEHGIBACPOAXTXHSOLMIJYREJRNBDUTDFMUPUDUMJMHYSZRQWKWPVWJCJEVPHNQDMGLZCPQQVIMRHRBCOAGFZQZRWDQLFWTUQZPNNZXYFFMWPZHGLAOGROVV");
    msg.text.assign("GCCIFUHUUORFLHJRLBRJVYNWNOIOXATQAZDWZZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.4086451489990237);
    msg.setSource(5926U);
    msg.setSourceEntity(33U);
    msg.setDestination(33009U);
    msg.setDestinationEntity(253U);
    msg.type = 93U;
    msg.htime = 0.3331183916525512;
    msg.context.assign("ZODQFMZEXMMLCSXLWFYWFAVDWNGQVIXTYRECYZZTCSLEMTNCGUXSUXTSUCPBFHGKNAWPVEPOFUUWLQHKUGYNPXIBVMAIOOPXYQSCGZEEAOBVRKBAPTJCPZDBAZSJUZYINFDWDWSHLKDNNHIBJOCQKVILHWOUQRRJFFFWURDGPXMHLAEJGJTXCNWIIKDG");
    msg.text.assign("SXOWSYUCWGPINIAHQXAVBEX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.5652329069134925);
    msg.setSource(58023U);
    msg.setSourceEntity(113U);
    msg.setDestination(53747U);
    msg.setDestinationEntity(232U);
    msg.command = 10U;
    msg.htime = 0.6342001218451829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.7439609149478456);
    msg.setSource(18605U);
    msg.setSourceEntity(4U);
    msg.setDestination(34131U);
    msg.setDestinationEntity(154U);
    msg.command = 151U;
    msg.htime = 0.48951506286429114;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.608423736787926);
    msg.setSource(2880U);
    msg.setSourceEntity(207U);
    msg.setDestination(29994U);
    msg.setDestinationEntity(194U);
    msg.command = 198U;
    msg.htime = 0.585594469949007;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 106U;
    tmp_msg_0.htime = 0.023334349877569993;
    tmp_msg_0.context.assign("JYLNDQFXFOW");
    tmp_msg_0.text.assign("AOYWGIKQNTORUIULQNIVSXXXZDTRESOQESVSXSYYZCFAQARIHODZPHRWMPEERGPETYDUPMLEHBLMJOVCWHTWHSSBKCJKOZLHPBQLYURJIGNDGPACNZFOMCQARCDFZGGKMJAVWNVCVUWNGF");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.4419755631475558);
    msg.setSource(32600U);
    msg.setSourceEntity(251U);
    msg.setDestination(64410U);
    msg.setDestinationEntity(42U);
    msg.op = 124U;
    msg.file.assign("BUEVDQXQNAKKDPWYLWHWNVRHDSFILJIFRYATBIYHNLJRCCQEEROZCFQCDMTVHVCZHSPMAJFDUGUXGQASY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.8161741125280076);
    msg.setSource(61867U);
    msg.setSourceEntity(154U);
    msg.setDestination(29308U);
    msg.setDestinationEntity(49U);
    msg.op = 230U;
    msg.file.assign("HIGRZXTCLFPURHRVWNSYCTWJMZLETPXNTBISAZWBTLWDYIHGTFPNFVXWGINBFHZBNCUKOVOUNSEECCQVSJSMUDJVLOYGAEADKKYQCNELPCJOIR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.4588111637021667);
    msg.setSource(10659U);
    msg.setSourceEntity(192U);
    msg.setDestination(35042U);
    msg.setDestinationEntity(67U);
    msg.op = 197U;
    msg.file.assign("AAAKZYPFBZDZWKFIHUGJLHCRKTFCEPAOUQBTEPPYTLXXAPJDGGOIAZGDDQHOYVZVDNWSLHLTUZWOKJOLEMVXSRHEICYETIYKXQUJQSDGCEFYNBPMSOFOXMSCRJGYJEURBBUDFNAGOKHQVLLTIGBT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.2722917811397082);
    msg.setSource(47958U);
    msg.setSourceEntity(34U);
    msg.setDestination(59268U);
    msg.setDestinationEntity(121U);
    msg.op = 1U;
    msg.clock = 0.8515375979257138;
    msg.tz = -26;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.7148129326150675);
    msg.setSource(21781U);
    msg.setSourceEntity(84U);
    msg.setDestination(63865U);
    msg.setDestinationEntity(58U);
    msg.op = 168U;
    msg.clock = 0.8875388335849513;
    msg.tz = -128;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.3204595338123698);
    msg.setSource(38531U);
    msg.setSourceEntity(206U);
    msg.setDestination(42011U);
    msg.setDestinationEntity(21U);
    msg.op = 252U;
    msg.clock = 0.9770633507025155;
    msg.tz = 96;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.28027161695694247);
    msg.setSource(35425U);
    msg.setSourceEntity(199U);
    msg.setDestination(49867U);
    msg.setDestinationEntity(106U);
    msg.conductivity = 0.6139500618947726;
    msg.temperature = 0.07315099146572812;
    msg.depth = 0.47207092907824766;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.173303233330108);
    msg.setSource(53753U);
    msg.setSourceEntity(237U);
    msg.setDestination(22008U);
    msg.setDestinationEntity(201U);
    msg.conductivity = 0.4298718239918927;
    msg.temperature = 0.9168314559015257;
    msg.depth = 0.010302849097715394;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.8508216672006237);
    msg.setSource(34046U);
    msg.setSourceEntity(220U);
    msg.setDestination(46870U);
    msg.setDestinationEntity(42U);
    msg.conductivity = 0.6681440807219404;
    msg.temperature = 0.16644412174600942;
    msg.depth = 0.3052145100139554;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.26265753582869666);
    msg.setSource(20194U);
    msg.setSourceEntity(60U);
    msg.setDestination(44023U);
    msg.setDestinationEntity(123U);
    msg.altitude = 0.2062646447116837;
    msg.roll = 15332U;
    msg.pitch = 64725U;
    msg.yaw = 41524U;
    msg.speed = -21814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.31358670299141356);
    msg.setSource(2666U);
    msg.setSourceEntity(48U);
    msg.setDestination(48083U);
    msg.setDestinationEntity(201U);
    msg.altitude = 0.7277391970003253;
    msg.roll = 2934U;
    msg.pitch = 10953U;
    msg.yaw = 13974U;
    msg.speed = -10866;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.6628517941496119);
    msg.setSource(13523U);
    msg.setSourceEntity(66U);
    msg.setDestination(62879U);
    msg.setDestinationEntity(184U);
    msg.altitude = 0.48594449685672303;
    msg.roll = 57402U;
    msg.pitch = 48287U;
    msg.yaw = 6245U;
    msg.speed = 19811;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.7324239321751107);
    msg.setSource(44790U);
    msg.setSourceEntity(21U);
    msg.setDestination(10131U);
    msg.setDestinationEntity(116U);
    msg.altitude = 0.300057111151413;
    msg.width = 0.5444298732890733;
    msg.length = 0.8502061787867714;
    msg.bearing = 0.6480266222431152;
    msg.pxl = 10673;
    msg.encoding = 112U;
    const signed char tmp_msg_0[] = {-84, 26, -35, -105, -22, 71, -31, 1, 90, 28, -124, 21, -50, 84, -20, -87, 13, 111, 71, 44, -83, -55, 94, 68, -92, -51, 90, 56, 60, -28, -85, -99, -11, 42, 60, -60, 111, 114, -78, -67, -55, 50, -77, -115, -118, 98, 71, 2, -35, 11, -25, -127, -37, -68, -16, 82, 44, 47, -49, 89, 62, -37, -94, -106, 52, 94, -110, 109, 77, -89, -34, -109, 48, -103, -75, 0, -100, -99, 67, 8, -104, 61, -25, 114, -99, 26, -116, 73, 51, -4, 76, -94, 8, -24, -18, 20, 49, 115, 114, 13, -109, 96, -123, 45, -98, -107, -26, 84, 40, 107, -63, 53, 112, -121, 33, 60, 107, 73, 126, 52, 64, 95, -5, -18, -5, -48, -14, -105, 39, -77, 98, -84, -32, -6, -16, -58, -73, 97, 30, -87, 8, -78, -125, 35, 67, 8, 82, -53, 3, 106, -2, -9, 72, 92, -119, -123, -87, 119, -96, -31, 3, -108, 117, -66, -71, 116, -6, 75, -66, 11, 40, 96, 96, 76, 107, -40, 59, -115, 57, -99, 54, 29, 13, -78, -18, -56, -44, -83, -127, 56, -13, 92, -13, 93, 22, 16, -115, -117, -43, -56, -59, -126, -113, 31, 51, -84, 35, -16, 126, -54, 77, -70, 3, 51, 96, -17, -72, -92, 109, -73, -19, -49, -26, -92, -33, 39, 13, -79, -25, 7, 27, 55, 96};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.4462786718823236);
    msg.setSource(18515U);
    msg.setSourceEntity(59U);
    msg.setDestination(14927U);
    msg.setDestinationEntity(73U);
    msg.altitude = 0.5102758229779797;
    msg.width = 0.7984708311383668;
    msg.length = 0.5543040345854282;
    msg.bearing = 0.3072400329077838;
    msg.pxl = -18014;
    msg.encoding = 115U;
    const signed char tmp_msg_0[] = {101, 41, 43, 2, 77, 123, 84, -73, 53, -69, -36, -11, 45, 16, 62, -31, 52, 109, -111, -43, -109, 22, 106, -28, -126, -121, -47, -116, -68, -125, 106, -23, 100, -115, -38, 100, -41, -122, 35, -13, 79, 6, -89, -98, 103, 38, -7, -88, 99, 72, -38, -12, -119, -20, -120, -47, 32, 25, 91, -122, 47, 96, 117, -41, -114, -111, -102, 15, 116, -113, 56, 79, -9, 5, 67, 125, -47, 37, 116, 72, -44, 26, 72, -50, -36, 71, 92, 41, -93, -4, 113, 126, -45, 13, -128, 97, 108, -104, 55, 73, 124, 53, 22, 102, 3, -3, 66};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.4631074509398785);
    msg.setSource(52935U);
    msg.setSourceEntity(99U);
    msg.setDestination(29282U);
    msg.setDestinationEntity(103U);
    msg.altitude = 0.8595884731774914;
    msg.width = 0.5092631810991667;
    msg.length = 0.3804567040440632;
    msg.bearing = 0.03746084370260905;
    msg.pxl = -26567;
    msg.encoding = 144U;
    const signed char tmp_msg_0[] = {-43, 45, -81, -62, 53, 101, -80, 36, 23, 89, 103, -122, -22, 118, -3, 43, -65, -126, 0, 88, 122, -16, 0, 61, 1, -92, -79, -71, -110, 57, -54};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.3813152417707987);
    msg.setSource(46748U);
    msg.setSourceEntity(67U);
    msg.setDestination(57381U);
    msg.setDestinationEntity(186U);
    msg.text.assign("TXSJQSQRLTBCQYFXMGLUPWYDSVPHKLUHYZBJXSOTAGEAAVOFAL");
    msg.type = 88U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.6117580683452264);
    msg.setSource(33076U);
    msg.setSourceEntity(174U);
    msg.setDestination(54496U);
    msg.setDestinationEntity(127U);
    msg.text.assign("STHJFLUWXROJDCQOBWMNXPYKDYKXNJEECRDEAYZNUVGUJUATJRBBTWKKXFPBVKYWEXRNMBUWOZCDSULDLSQTIEQJHIIAOAKFLFJZXWMUXZQHSSTCAHVLQBFRCDOUVIBXIVPDLAGTONKEUCDNGAAGTHMRSGTBMISHOWQFLIESQSAJNPVDYVFIYZOYRZSMRKYIKDUXLMVGPPGFZPBBHCTPGAZEXVCC");
    msg.type = 234U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.705740114791572);
    msg.setSource(19022U);
    msg.setSourceEntity(45U);
    msg.setDestination(34641U);
    msg.setDestinationEntity(114U);
    msg.text.assign("IUHBXXPITYCYAJPSBRTGRYNSS");
    msg.type = 232U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.521740632269445);
    msg.setSource(26885U);
    msg.setSourceEntity(4U);
    msg.setDestination(8360U);
    msg.setDestinationEntity(222U);
    msg.parameter = 190U;
    msg.numsamples = 37U;
    msg.lat = 0.6740811238102996;
    msg.lon = 0.20510261756726222;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.048954913696991786);
    msg.setSource(18835U);
    msg.setSourceEntity(91U);
    msg.setDestination(6575U);
    msg.setDestinationEntity(131U);
    msg.parameter = 34U;
    msg.numsamples = 244U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 46527U;
    tmp_msg_0.avg = 0.11849751956627186;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.39591897952422306;
    msg.lon = 0.9552611022913469;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.9523195586256813);
    msg.setSource(24542U);
    msg.setSourceEntity(6U);
    msg.setDestination(44721U);
    msg.setDestinationEntity(156U);
    msg.parameter = 208U;
    msg.numsamples = 85U;
    msg.lat = 0.3653098515661719;
    msg.lon = 0.47989807598929546;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.3555560464850053);
    msg.setSource(11736U);
    msg.setSourceEntity(40U);
    msg.setDestination(51066U);
    msg.setDestinationEntity(163U);
    msg.depth = 49012U;
    msg.avg = 0.9358877164214829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.9876222135001088);
    msg.setSource(17268U);
    msg.setSourceEntity(139U);
    msg.setDestination(32299U);
    msg.setDestinationEntity(114U);
    msg.depth = 56490U;
    msg.avg = 0.5613020012258348;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.846768669750222);
    msg.setSource(19973U);
    msg.setSourceEntity(247U);
    msg.setDestination(32030U);
    msg.setDestinationEntity(74U);
    msg.depth = 26625U;
    msg.avg = 0.29332265121004897;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.33133108843291537);
    msg.setSource(14237U);
    msg.setSourceEntity(8U);
    msg.setDestination(24289U);
    msg.setDestinationEntity(153U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.32143088994715374);
    msg.setSource(23284U);
    msg.setSourceEntity(30U);
    msg.setDestination(5504U);
    msg.setDestinationEntity(202U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.7398619337738463);
    msg.setSource(11945U);
    msg.setSourceEntity(179U);
    msg.setDestination(45927U);
    msg.setDestinationEntity(159U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.8443132870008623);
    msg.setSource(36541U);
    msg.setSourceEntity(228U);
    msg.setDestination(14675U);
    msg.setDestinationEntity(245U);
    msg.sys_name.assign("OSNQGBVYKLSEZTNDZKAVVUSXZABPGMFLKPPNACOFPDWYQASDLLRISEFVZKYRXZJYYQHGDQIQWQDKGIBRCHEJSSDLCCAWQMOFBWCUXCBOTDFEAETURPOJRSKHQYHLXRGSBWBKWJCAFNTGJQZUULUFZNVYTHFYUTNGIPVNUTFIEHGHEZWMUEGPJMRGTIXPXOZRJWMVOSZOHYLIBMJWKDATLXMEANOIUEMXBJAICQWJCDFHHTPMXDVORIRVN");
    msg.sys_type = 142U;
    msg.owner = 14591U;
    msg.lat = 0.5424015529334513;
    msg.lon = 0.902044492083616;
    msg.height = 0.49157938710055027;
    msg.services.assign("UWTBVJCWUKMXBDCCXBEKASJKQFNDROKSMZUQPZCKESUJQMINYLSVOWXTRFFGLKJAGLIZCVCRHCFXTZIEAQTYRB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.9893264693051723);
    msg.setSource(2434U);
    msg.setSourceEntity(166U);
    msg.setDestination(42810U);
    msg.setDestinationEntity(144U);
    msg.sys_name.assign("XMNHGCXTACAQUXJULZQAZTJXULIHHPPXEVFJNDGSAIDVIFIOQUEGCNMHFZHWEBHLVIFQUUZKBUVWPJCXPLMLDFDFSCRSTMEWEWHKGIJMGUDOBYUNLNWWZOMJQANORTUGOBRKPLAAKVZSXBVESAWXSKETZNDFEIOQRZCFZYJPMKYAYOAKWDHCTKMDG");
    msg.sys_type = 19U;
    msg.owner = 63978U;
    msg.lat = 0.14868602761383098;
    msg.lon = 0.31359930955333315;
    msg.height = 0.3301737112724592;
    msg.services.assign("UWVXVGYHMDEKYRKWVOGXPDZHLDVMJJGTHEBVRHZXRIGYGHEOYGSQHAUWKFMJFXGESQFUXPSASOSYDNNVXCCYDAGKIBCWQWKUWDXYYOTSPZTFIGRZLPRCNUTCHRYACEINTOQAIUETRKPLXCYTSVLZOUVDTMVIKAIVUAJGHJEUWKXZOMIEEHLQOFXKJLHMRLNTOMFJIBPZZAP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.05775171717339844);
    msg.setSource(41873U);
    msg.setSourceEntity(34U);
    msg.setDestination(65348U);
    msg.setDestinationEntity(98U);
    msg.sys_name.assign("IUDMGPYIBKDIDQUIUELXEPTEWMHFLNIYRRUGCAQBBJRWGOJCHNZESZJSAOZWTQOAUOPUYBAJPFNLLKGIWNNROUYZAKDESZXKYXHYDPXPIVPDQKXRBCGDEVJBQWVISBMKNJ");
    msg.sys_type = 86U;
    msg.owner = 9643U;
    msg.lat = 0.7835346171059395;
    msg.lon = 0.37141659299299246;
    msg.height = 0.7247659332821252;
    msg.services.assign("BKEHGKOUKXWTDKNXLPRJNHHJAQZFVLGGKKOFIZRJCVJHMEQOSMWFUCCYNERMPSFIXAIQBGERQHWVIRUUOWJGVVUYVVCDJTPZRZYXIQXAAWJQBSTTBCTCMDYPLNKUHSNHRFXIZCTIWZDMETIOJUPYGLAYUSYGWQHHMTDCKRSMAYEQLVDZNOGGFYRLBJAZQV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.9539399806179575);
    msg.setSource(48618U);
    msg.setSourceEntity(230U);
    msg.setDestination(50796U);
    msg.setDestinationEntity(166U);
    msg.service.assign("JGQRCQFLZGQHPSDDWUOWWNANICXBYRVMOPYCONFHURAVTELQIXTJEJYEHLEOCKMZXINOJACOHGBVVUUKVFWBWXMZXCLNTLTSSSNSFZEOKXABYZJRRAOMDHSRNFZZJAJRJBM");
    msg.service_type = 26U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.17561673507075626);
    msg.setSource(24771U);
    msg.setSourceEntity(102U);
    msg.setDestination(2804U);
    msg.setDestinationEntity(64U);
    msg.service.assign("OYALRWAWZNMQDAEPOGPANHXOVWOFTGLEGQFYWLJBLUNDYIDFFDBEBKCEKUVOJFVQGULRLFCZQIQBSCZUBQKXCCYISDIPPSCECBPHTMULXJHRTIV");
    msg.service_type = 61U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.30960558731789467);
    msg.setSource(55788U);
    msg.setSourceEntity(217U);
    msg.setDestination(4182U);
    msg.setDestinationEntity(156U);
    msg.service.assign("AGQOHQDKCIKYIRZAGBZPTIIIEVWNQNGDJUPKUQJXLSUFGHXCXXPKPRBOFSNGSCYXVJOZSWTLQFLRJONESWPUJZRNDJRLHGWHMCTVGTDVJSYFHUAXGQYHDUFMREDRAEAGMCEXMQLBZOBSDECBJYZVJJKAEUUATTUIMMSOMDEKAAPCFLCOXNMNTVBTHBLLFTPVLZHQRFEKMAPVMY");
    msg.service_type = 189U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.03792663884415315);
    msg.setSource(21595U);
    msg.setSourceEntity(97U);
    msg.setDestination(40901U);
    msg.setDestinationEntity(69U);
    msg.value = 0.25458874010100674;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.4180493066490816);
    msg.setSource(55872U);
    msg.setSourceEntity(238U);
    msg.setDestination(19605U);
    msg.setDestinationEntity(234U);
    msg.value = 0.23063836741409482;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.4236650261197141);
    msg.setSource(5346U);
    msg.setSourceEntity(218U);
    msg.setDestination(37293U);
    msg.setDestinationEntity(51U);
    msg.value = 0.9874646016765929;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.08809939919264764);
    msg.setSource(47263U);
    msg.setSourceEntity(60U);
    msg.setDestination(65477U);
    msg.setDestinationEntity(137U);
    msg.value = 0.15805892344255634;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.17647503855473945);
    msg.setSource(35904U);
    msg.setSourceEntity(232U);
    msg.setDestination(61408U);
    msg.setDestinationEntity(202U);
    msg.value = 0.43263903264444703;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.5328354207113281);
    msg.setSource(55979U);
    msg.setSourceEntity(106U);
    msg.setDestination(46325U);
    msg.setDestinationEntity(23U);
    msg.value = 0.9244529984712322;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.828103094441063);
    msg.setSource(46595U);
    msg.setSourceEntity(45U);
    msg.setDestination(56871U);
    msg.setDestinationEntity(252U);
    msg.value = 0.6446241553810718;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.4926198291916375);
    msg.setSource(38661U);
    msg.setSourceEntity(93U);
    msg.setDestination(19546U);
    msg.setDestinationEntity(206U);
    msg.value = 0.3630515381737677;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.9446282578740937);
    msg.setSource(29407U);
    msg.setSourceEntity(15U);
    msg.setDestination(14202U);
    msg.setDestinationEntity(84U);
    msg.value = 0.9115841982689283;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.7112460581263664);
    msg.setSource(62590U);
    msg.setSourceEntity(178U);
    msg.setDestination(33635U);
    msg.setDestinationEntity(245U);
    msg.number.assign("IWUKCHXYMPUHCVTRAIRGQLNKZFYMOKSZWITJIZJDDPPABXLGDAWYRGHXZWHEZIDMNFSSOWAPYFKAFFOEWAZHHQHVYZXWRCQJIZQFUAJGOSLARKXPQJPKSGDLTYTDFDIEEVHUTRVOGUXYVRLTVTGMOKBNJYZTBUHPQEEJOSPVESTUPCVONVJVGNXALBBSFQEETSYERBZKCCKWNDQCUMMRYXWDUIRO");
    msg.timeout = 25221U;
    msg.contents.assign("NOQAYVJCCZGZSVBCHILOYDYMVPRKUUXAZBTXKGOSRMNERJZANYUCIPEFQVCUWQBHKKGVMFQOYWOLDDNVGCXY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.5239103056643032);
    msg.setSource(48655U);
    msg.setSourceEntity(75U);
    msg.setDestination(4227U);
    msg.setDestinationEntity(185U);
    msg.number.assign("SKYMLAENZEOYLZLJIDQGZHBTPIQXYCNWJSONKGKFPYEGPMEJWVZHZNEWUVOQUGFVGJUPGBTAJEPBMJBHZCCRJKOGDRRHHKYEDEYJRQCTKRVDPPYDQATOHZF");
    msg.timeout = 4764U;
    msg.contents.assign("NKVHGOXPUIAJQSZVFOMGRXWSJRCV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.7228694984574101);
    msg.setSource(9193U);
    msg.setSourceEntity(99U);
    msg.setDestination(32916U);
    msg.setDestinationEntity(160U);
    msg.number.assign("HIHJITUTJPOHSFDKD");
    msg.timeout = 30223U;
    msg.contents.assign("QMCHRRBQXEZOODLSQTBKZHXPERXSIFXYYAQONCNKVWDXAHDWUULLRPJLGUKNYONRUSOEDMMQVTHJCTSFVVNXBOMFRYLWKIW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.8266790371118609);
    msg.setSource(26677U);
    msg.setSourceEntity(4U);
    msg.setDestination(49927U);
    msg.setDestinationEntity(66U);
    msg.seq = 1964116543U;
    msg.destination.assign("QLGOCZPLQYXHWETHWHVTXPDLNKRUAXFEISKMZTSWRPNYDWCBJNVWIOOJQILQHLIHKTULEUKJCCELWYAKYYPACVXWVCIKXUCTGRONRYGYJSFOJKKSEFPIWYMDAQREJNSXFIEQSDYNMMPJXDUAHQNKAEVFQTSUNCUWDGYVROFAMFFUEIOGBZLZAUSGBQAARPKXHXTVDMOBDNGJP");
    msg.timeout = 2270U;
    const signed char tmp_msg_0[] = {-11, 18, 28, 24, 98, -33, -108, 21, 75, -45, 8, -69, -128, 109, 66, 115, 116, 56, 0, -15, 9, -32, 85, -75, -25, -127, -92, -98, 37, 10, -45, -126, -48, -15, -18, -78, 107, 11, -10, 53, -64, 0, -21, -95, -120, 40, 48, -24, 60, -71, -46, -67, -107, 102, -38, -93, -127, 115, -41, -7, -25, 79, 33, -104, -87, 2, 125, 41, -84, -19, 114, 39, 25, 121, -88, -116, 15, -74, -42, 115, 124, -127, 19, 10, 15, -111, 34, -66, 82, 57, -53, -114, -35, 13, -29, 107, 22, 77, 22, 4, -116, 96, 39, 12, 29, -121, 14, -5, 8, 35, 105, 111, -1, -89, 22, 74, -48, -48, -52, -9, 70, 102, -81, 53, 80, -114, -84, 112, -11, -119, 40, 27, -2, -113, 53, 56, -19, 80, -9, 121, 34, 8, -119, -17, 11, 64, -78, 28, -80, -44, 62, 21, -11, 30, 107, 51, -42, -88, -7, 99, -6, 28, -89, -88, 67, -4, -61, -114, 74, -65, 0, -81};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.9082402473960204);
    msg.setSource(38557U);
    msg.setSourceEntity(131U);
    msg.setDestination(11787U);
    msg.setDestinationEntity(99U);
    msg.seq = 3862994659U;
    msg.destination.assign("DIBOBSVNUEBVXZAKCKZHGOPCBUAHGZZYSZKUSFXOKMGHJDZYOQQWIMNQPHPNFPAETTMEQHABDAPZYGJCFLOFULNHMGDGXRYVJDANONWKXJJELYTSWXVRDTFCTFMCHEMQRQEMECAPDUTJWYAG");
    msg.timeout = 64U;
    const signed char tmp_msg_0[] = {-57, 114, 80, 123, -53, -110, -16, -7, -47, 6, -71, -84, 80, -127, 112, -103, 51, -76, 39, 16, 13, -9, -60, -40, 108, -120, -120, -66, -68, 31, 121, -104, 30, -68, -39, -3, -67, 47, -5, -86, -126, -78, -33, -42, 126, 77};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.20867775340374295);
    msg.setSource(24410U);
    msg.setSourceEntity(45U);
    msg.setDestination(31759U);
    msg.setDestinationEntity(132U);
    msg.seq = 1217490544U;
    msg.destination.assign("UVUIWQONGYJTTPPWQZLDJHHRQJPADCMGVLLHOVMXTDOBCFEXAIFFSXFDPNEGAINOMIYBTXZRNSUBCKMHMHTEKYJZQYLEZOQRSWOQQEQRSKUVHUOJRVFKVVKLPVCYXFAAJTOCXGHGBSJPNBHTDLOAVDMCHWNXPKASUWSNNHQFISXPUKIECYSNJUUYACZGDMKIPRGYYGGLIKAKFFISLMZLWTWORMTBALEBZQBERZFWCZB");
    msg.timeout = 36750U;
    const signed char tmp_msg_0[] = {1, -52, 33, 125, 74, -59, 53, 1, 122, -20, -57, -115, -46, 104, -76, -74, -24, -124, -34, 51, -13, -118, 10, 87, -24, -101, 82, 11, -72, -1, 19, 124, -126, -125, 32, 45, -102, -27, 121, -80, -8, 87, -2, 85, 72, 51, -94, -7, -48, 62, 14, 111, 61, 69, -37, 115, -119, -84, -20, -7, 88, 22, 58, 111, -8, -46, -109, -97, 99, -42, -102, -101, 114, 71, -57, -112, 0, -35, 7, -47, -55, 97, 121, -121, -68, -8, 98, 14, 113, -99, 67, -30, -118, -15, -128, -110, 82, 82, -61, 56, 9, -59, -10, 47, 32, -22, 102, -58, 95, -51, 53, -27, -66, -25, -71, -63, -90, -38, -32, 57, 46, 81, -99, 29, -65, 122, 52, 95, 7, -102, 31, -118, 50, 120, 98, -29};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.5309578668105635);
    msg.setSource(39278U);
    msg.setSourceEntity(115U);
    msg.setDestination(46644U);
    msg.setDestinationEntity(218U);
    msg.source.assign("FXOLDQKTAYFQGDELDBPIIPXTPMXXZTBFQYSBOZNMHTJGETOXFEVCKFLWKPNZAVOZDRZUSYHAGUERLJVYCBZXST");
    const signed char tmp_msg_0[] = {-63, -45, -93, 26, 72, 63, 29, 18, 14, -56, -115};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.6226327790567768);
    msg.setSource(9157U);
    msg.setSourceEntity(39U);
    msg.setDestination(21891U);
    msg.setDestinationEntity(112U);
    msg.source.assign("HGPCYXWAJCDAHCNRXSGYKAMGOMIXSZZJFMQANUDKMAYHUUWVMNOZLIKBQSOZASNQTCWEGVPLWMIQKBULSPGFWAPJSMBDCYKOHPQRBOTTBEEURVUDEJGOHBRFEHAXQTRVEFZKKNEVV");
    const signed char tmp_msg_0[] = {36, 50, 34, 42, -11, -37, -119, -50, -25, 103, -17, -91, 3, -12, -122, -112, 81, -10, 101, -45, -10, -53, 54, 52, 56, 82, 26, 76, 36, -115};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.8840628004236867);
    msg.setSource(51582U);
    msg.setSourceEntity(208U);
    msg.setDestination(62295U);
    msg.setDestinationEntity(199U);
    msg.source.assign("KISYBQCLIBXGGELXDUHHRNRCPKUNKTIVOVJQKKCHTBBMKNVKZGXGACHXBSDPNOKRVZLDCUQWRWQJTRFEVLMMWDENUGSWXUZFWFLWSJGAETUAMRCCZXZLFZTVSQBEWLEXYGCWIUJHJFUVKOAODQGLYNQHYWPSZITEHOVASIBRCPMZYYDXJEEIMTARQHUTHFYFDPGHPDAYDSPEBFCOTNRKLMTM");
    const signed char tmp_msg_0[] = {27, 48, 96, -86, 9, -9, -65, 43, -111, 112, -28, -19, -56, 68, -82, 100, 42, 62, -121, 60, 7, 109, -109, -105, 43, 86, 86, -13, -38, -126, -102, 27, -13, 88, 93, 15, -126, 52, -45, -1, -71, 66, 0, 104, 45, 59, -27, -64, -122, -8, -68, -71, 19, -66, -59, -105, -72, 15, 119, -38, -14, 39, -49, -116, -44, 123, 55, -12, 43, 122, -41, -42, -7, -111, 28, -60, 88, -22};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.8013792232099702);
    msg.setSource(19319U);
    msg.setSourceEntity(159U);
    msg.setDestination(5909U);
    msg.setDestinationEntity(98U);
    msg.seq = 2808234946U;
    msg.state = 238U;
    msg.error.assign("TPUTSXVYRGKAD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.991920432662749);
    msg.setSource(52706U);
    msg.setSourceEntity(16U);
    msg.setDestination(44327U);
    msg.setDestinationEntity(111U);
    msg.seq = 2159493522U;
    msg.state = 4U;
    msg.error.assign("BTDYRJKJUHGWDNCMSFQFDK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.7106008506912691);
    msg.setSource(33815U);
    msg.setSourceEntity(254U);
    msg.setDestination(50080U);
    msg.setDestinationEntity(249U);
    msg.seq = 2423906122U;
    msg.state = 90U;
    msg.error.assign("DNSLYEOASCJSUZRXVYGHAIARHPQYNLIUMWKBMSVIQCEAUZJBNPEYTRSTNAHOKLGYBXYFWISUHRLNC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.09183679940828604);
    msg.setSource(18432U);
    msg.setSourceEntity(153U);
    msg.setDestination(8411U);
    msg.setDestinationEntity(100U);
    msg.origin.assign("DDSUZSCRZUWVN");
    msg.text.assign("EQAREBFHWJVXNUSIUJEGLQXFTJRJGWXSAAHEEVDSTVVBKUKBUUUVK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.1471048123027202);
    msg.setSource(19982U);
    msg.setSourceEntity(132U);
    msg.setDestination(19861U);
    msg.setDestinationEntity(102U);
    msg.origin.assign("YTJUEHEFTZASMJCOEZTNZXQVMBUYPAXOAEDPIPVNNYMOYWXGAKGFXWUM");
    msg.text.assign("JEVXWZPRWQKUYPMWATAXCLMLOKIGTWX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.49717269660406527);
    msg.setSource(17720U);
    msg.setSourceEntity(122U);
    msg.setDestination(39926U);
    msg.setDestinationEntity(210U);
    msg.origin.assign("MZMCBTXGPRNNPMULYIXEKZIILLOXFAHSUACHAGOZOWXTQGBLIWEKDUHVNNWJYOCRQWFXVBCIQFJWNIFTNKGHNMJQOMDVLPNAEDADUMHIOZTQTNXTEWRSMCSDZFEOACKDRXZEEAMQOTFHCLVSDHZKQWCRMHLWSJKRPSOKJLCADXKBSGBPSFPKHGVFVUUTXTJUBIW");
    msg.text.assign("DLOODUWYXHNPBIJBNAUHJWPCNRGIWOVUJNMGDTTQBZVIAEVBTUNKXEFNSFBHLMLOBIMHCGGPWMCYMJA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.21550024913188437);
    msg.setSource(49902U);
    msg.setSourceEntity(63U);
    msg.setDestination(12334U);
    msg.setDestinationEntity(68U);
    msg.origin.assign("LOLOQETNPBXMSEGZSVHXIWLDMIPOSAVFUTWVKUDKTSUHAWHUXAGQ");
    msg.htime = 0.2802003180758713;
    msg.lat = 0.9622563396567771;
    msg.lon = 0.5306338948400953;
    const signed char tmp_msg_0[] = {68, -108, 111, 121, -23, -118, 89, 97, 85, -29, 61, 95, 101, -111, 14, 120, -29, 39, -35, -7, 1, -43, 16, 35, -114, 103, -69, 35, -121, -13, 87, 39, 98, 80, -103, 47, -123, -49, 58, 63, -1, 83, -29, 101, 79, -71, 46, -3, -107, -112, -51, -127, -14, 44, 58, -60, -30, 13, -68, -62, -7, 95, -64, 84, -66, 94, -113, -31, -113, -126, -33, -24, 106, 9, 45, -80, 121, 81, 15, 83, 72, -51, 126, 46, -119, -1, -80, -77, 92, 2, 21, 83, 76, 105, 30, 114, 116, 57, -101, -96, 76, 80, -2, 31, 49, -9, 70, -78, -56, -20, 106, 97, -124, -106, -126, 9, -116, -8, 3, 91, 29, -16, -89, 52, 34, -53, -119, 72, 52, 109, -52, 73, -44, 87, 116, 98, -116, 95, -35, -96, -22, 54, 28, 119, -72, 70, 90, -104, 87, -70, 106, 17, 86, 81, -69, -33};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.8569103647447575);
    msg.setSource(24094U);
    msg.setSourceEntity(198U);
    msg.setDestination(26354U);
    msg.setDestinationEntity(165U);
    msg.origin.assign("CAXBZMYOKCDLPZRSXLNTLIJOXVUJABNXCIFIWMKYTMBGVQHGZGOYCKYKDXEGTPVTVTZQGUEFNZTHCTVLZDBLL");
    msg.htime = 0.6588798312352224;
    msg.lat = 0.17550188107261;
    msg.lon = 0.7743751598569798;
    const signed char tmp_msg_0[] = {-117, 89, -17, -71, -58, 38, -33, -1, 33, -70, -8, -61, -32, -50, 13, 0, -127, -46, 66, -114, -110, 27, -23, -91, 46, -63, 52, -97, -12, 3, 83, 45, 34, 114, -87, 18, 32, -73, 102, 85, -104, 0, 21, -5, -96, 90, 88, -99, 77, -112, 117, -125, 104, 98, 92, 102, 75, -32, 22, -7, 5, 79, 50, 5, 27, -41, -101, -77, -35, 114, 115, 5, -21, -5, 62, -126, 28, -63, 79, 84, 85, -95, 34, -90, 22, 89, -5, -128, 102, -118, -62, -65, 73, 54, 115, -69, -13, -60, 31, 27, 116, -66, -93, -106, -59, -6, 122, -50, -96, -5, -46, 70, 34, -35, -81, 89, -120, -39, -85, -20, 9, 78, -99, -61, 78, 123, 64, -74, -63, 124, -65, 114, -58, -6, -102, 64, 62, -25, -88, 110, 105, 108, 37, -58, -28, 111, -46, -90, 95, 40, 24, 93, -123, 33, -54, -66, 10, -89, 6, -70, 42, -40, 29, 47, 88, -87, 8, -41, 103, -88, -125, 81, -64, 13, 121, 58, 29, -93, -77, 0, -112, -70, -8, 86, 22, -68, 27, 5, 12, 74, 25, -109, 30, -17, -56, -42, 106, -52, -55, -92, -121, 85, 64, -44, -27, -17, -49, 103, 44, 119, -95, -25, 81, -14, -84, 47, 16, -78, 95, 87, -69, -111, 78, 116, -117, -94, -127, -115, -112, -107, -24, -32, 26};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.9867932538591714);
    msg.setSource(61824U);
    msg.setSourceEntity(242U);
    msg.setDestination(52905U);
    msg.setDestinationEntity(12U);
    msg.origin.assign("LWHZOIGMUBNYPXHEBLTTWZZSDCPDOJNWSNSBQLMKRKMKXSAMRZEOGSVKCWZYDYWURVOYIHXRCRFKEALXLQITZMGKIJHEJAUXQOFXEGJYHHXBFUMFUYRHLTBOVEWEKGCPXQPMDCFFICVDJJLYOTSNBFKFGQDIUDJKUCUPISPLTZAENTVORMGWBZTRJUVVLGSWRUPVFBIQYBHRGAZKYPIASPLNQW");
    msg.htime = 0.7821284057500458;
    msg.lat = 0.2961323995005575;
    msg.lon = 0.9437250318259556;
    const signed char tmp_msg_0[] = {49, -122, -84, 122, 32, -64, 48, 41, -16, 100, -10, -51, -100, 5, 14, -16, 94, -112, 57, 100, -100, 83, -126, 99, 7, -19, 119, 111, 29, -2, 4, 25, 8, -31, -84, -82, -84, -94, -83, 31, -27, 4, -73, -69, 126, -69, -54, 41, 79, -69, -59, -62, 71, 21, 19, -51, 103, 44, -17, 94, 8, 70, 56, -64, 52, -99, 66, -109, -9, 86, -26, 62, 86, 57, 34};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.17098446035706738);
    msg.setSource(28736U);
    msg.setSourceEntity(40U);
    msg.setDestination(38653U);
    msg.setDestinationEntity(212U);
    msg.req_id = 54957U;
    msg.ttl = 21221U;
    msg.destination.assign("SKCGDRGNCWBBVYVLOQWJGWZCBYLIHCOAILNBDURWXBFGMWHTUPOTXZIPFRPLTVNCZBGZRNJIDUPIXQUGXZSHLIDLOZJQNQFMMTDXREOKPSFSIFWYMOFZCOMEMHQQQDFAOTAXDEKJCSZQYUAIGLYWKKHPEWVJELUXNJVT");
    const signed char tmp_msg_0[] = {-69, 68, 21, -64, -11, 95, 43, 7, -25, -97, -29, -87, 42, 88, 15, -20, 100, 44, 119, 42, 120, 15, 37, -47, 34, 8, -43, 95, 0, -59, 66, 118, -81, -38, -94, -31, -54, 93, -100, 82, -31, 120, -72, -73, -54, -61, 18, -81, -41, -80, -26, 36, 111, -92, -63, 26, -72, 104, 67, 16, -29, 32, -71, 104, -5, 97, 126, 107, 10, 18, -61, 28, 32, 32, 79, -117, 91, 122, -21, -59, 57, -82, 65, -97, 18, -95, 93, -128, 103, -9, 83, -123, -122, -88, -4, 116, -98, 82, -42, -126, -27, 110, 107, 28, 115, 57, -8, 117, 121, 107, -48, 7, -94, -111, -67, -115, -121, 72, 113, -50, 102, -92, 49, 125, -66, 36, 9, 94, 99, -79, 116, 11, 24, 59, 59, -62, -49, 6, -58, -71, 94, -38, 41, -24, -65, 72, -31, -18, 102, -7, -98, 87, -88, -89, 89, -95, -102, -125, 32, 60, 8, 84, 42, -67, 89, 114, 35, 49, -58, 53, -102, 68, 64, -78, 61, -79, -67, -124, -95, -64, -13, 95, -106, -21, 106, 33, -96, -8, 124, 118, 42, -118, 72, -79, 117, -116, -77, 22, 52, -108, 57, -89, -85, 78, -108, -108, -98, -39, 86, 31, 3, -18, -123, 64, 62, 47, -32, -114, 44, 93, 34, -100, -10, 62, -115, 86, -76, 78, 43, 2, 20, -52, 78, 98, -96, -17, 125, -48, -33, -80, 112, -90, -111};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.2798329488906628);
    msg.setSource(13693U);
    msg.setSourceEntity(154U);
    msg.setDestination(23487U);
    msg.setDestinationEntity(206U);
    msg.req_id = 45662U;
    msg.ttl = 47810U;
    msg.destination.assign("LVEYFAWLOIGOOIHMVJJKHXLMBLSGABOMZSY");
    const signed char tmp_msg_0[] = {33, 16, 92, -78, -115, -29, -109, -126, -37, 88, 125, -128, 62, -26, 89, 114, -50, -108, 73, -45, 86, 80, -3, 110, 111, -85, -5, -66, 17, 100, 111, 86, 15, -3, 7, 61, 43, -39, 29, -83, -44, 98, 72, -115, 54, -45, 89, -113, 44, 119, 61, 42, 12, -16, -126, 53, 30, -106, 18, -39, 123, 29, 64, -61, -39, 30, -123, -11, -7, 8, 20, -15, -20, -57, 109, -11, -102, 60, 45, 43, 56, 13, 114, 65, -69, 24, 1};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.8241766276762097);
    msg.setSource(52094U);
    msg.setSourceEntity(122U);
    msg.setDestination(34687U);
    msg.setDestinationEntity(244U);
    msg.req_id = 19521U;
    msg.ttl = 54840U;
    msg.destination.assign("SGOPOKBMWABVPAKCTKVLOOAHHFHYUXLOJEOYUVOUSUSDQYLIKDGXCVGIQMGJWMCZYTAPPFZEAAZIQWMGCCSSVMRKCDEJXJFFJHCIAHLLSVHH");
    const signed char tmp_msg_0[] = {-50, -9, -66, 99, 7, -79, -117, -37, -118, 82, -94, -19, 84, 72, 110, -84, -123, -77, -23, 68, -118, 67, 87, -69, -58, 2, -12, -58, 60, -42, 77, -31, -9, 114, 72, 74, 62, 37, 83, -11, -84, -67, -4, -97, 120, -4, -53, 116, 71, -110, -111, 3, 19, 47, -42, -33, -83, 88, 38, 31, -16, 73, 126, -64, 90, -73, 86, 13, -127, -74, -82, -79, -37, 65, 19, -127, -84, -27, -85, 62, 33, 54, 26, -25, -97, 90, 63, 4, 27, -75, 122, 50, 106, 75, -119, -36, -109, 24, 28, -24, 107, -78, -89, -126, -2, 59, -111, 123, -23, 33, -69, -22, 91, -87, -117, 102, -89, 110, -80, 73, 1, -82, -28, -43, 57, 12, 38, -64, 26, -119, -48, -93, 115, 112, 35, -72, -27, 65, -63, -46, 58, 125, -46, 69, -37, 81, -65, 69, 99, -69, 84, 20, -107, -92, 83, -8, -103, -68, -45, -57, -90, -87, -81, 109, 32, 56, -89, 52, 114, -51, -81, -7, 60, -62, -98, 35, -96, -4, 124, 110, 110, -34, -66, 88, 102, -66, -126, 94, -44, 83, 48, 66, -49, 10, -45, 83, -13, 45, -4, -21, -28, 78, 56, -83, -110, -114, -15, -33, -5, 71, 42, -45, -25, 61, -67, 83, -21, -117, -78, 14, 61, -99, -123, -46, -24, 101, 91, 10, 40, 66, 61, 87, -126, 71, 6, 85, 110, -93};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.776713259359219);
    msg.setSource(18991U);
    msg.setSourceEntity(29U);
    msg.setDestination(50382U);
    msg.setDestinationEntity(38U);
    msg.req_id = 29076U;
    msg.status = 203U;
    msg.text.assign("MJPHYIZHZCZGUPSHLWVZQXGEFYKGQETQZEOUXSSDBBHRDFPELHPSVTAYUJQIFNKNRTABYPSTERDIXMLTNKIAUQKVMCKABHCIBNMONCRNGPWVTELGRMKUFG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.08526097518301279);
    msg.setSource(32733U);
    msg.setSourceEntity(219U);
    msg.setDestination(47482U);
    msg.setDestinationEntity(242U);
    msg.req_id = 43710U;
    msg.status = 173U;
    msg.text.assign("FRCQICJXQMPTITGLHOYPLCHVHPKTFKJIYVWIJZRRETZMAJSDDMNPKPHCWUWAXQJEZBYBUOCRJVLBILHXKAOSVNQDSXHKODMDMDQXRMBAMJIUBDTDNPWZSUKNUBWBVCQNOZGALRGHGPXRVBKYHUTSQFXEQJCUFPEPNCGDNXTYESSFMQYVTWSWKWRIVEONWMJLFAG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.7144227072135678);
    msg.setSource(15899U);
    msg.setSourceEntity(109U);
    msg.setDestination(30269U);
    msg.setDestinationEntity(52U);
    msg.req_id = 24596U;
    msg.status = 16U;
    msg.text.assign("VGMJBXTCVRLXBSSTWALFHOZZQQWPITDGLURYLZMWTXIXSSFCEEOKPESWPJRLYNPVNKBLDGQTMRDHSFFTUZZJQOVYJXLNLFPXAQGIDBYZYVEGSQDLSAZCXKRBTWJCJTICKOHEVEIRCJADHIRKKOBJLCINQBCIFKTAPCZGDMXCESJFYPPBONAIBWTNOMGYYNUZKIUAGOGXOARQHMMFJUWHDYMFVUWEDRWZMUEWHNMB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.884516464103619);
    msg.setSource(5359U);
    msg.setSourceEntity(136U);
    msg.setDestination(38017U);
    msg.setDestinationEntity(205U);
    msg.group_name.assign("UPGZFAKDNCTDZYUIKTVNXSGSELBBUNVWTQDFZPBLAFTXIIJMFEPYDGYULVYYAAAUGRVSQSAW");
    msg.links = 3357408625U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.7875216002934708);
    msg.setSource(10472U);
    msg.setSourceEntity(204U);
    msg.setDestination(7608U);
    msg.setDestinationEntity(99U);
    msg.group_name.assign("IIRIHADWJCXVHQDTUDWEMOQWPBIMBTNJHZBPXPLRDMJVVGJHLOPXKFAVQHDKADMRPHJUTQEGISLANTOBOBPVAKCEWYYRFDIFCLSNZNYZJKWBCFYLETNULESLZAXSIZACUQTGPEWZYGUSJKXZZQGUFYHCCQKRDTFMIBWDSNOINBSOLHJOQLMFXVRSKBJRT");
    msg.links = 1590560714U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.6453192414956896);
    msg.setSource(53622U);
    msg.setSourceEntity(50U);
    msg.setDestination(58580U);
    msg.setDestinationEntity(146U);
    msg.group_name.assign("EMSUILODIJPMKUKAAVAVXILNRYBBFABXODMIEAAQFHWQTZGRCHVGHZELYYLPLLIUGRDDYLRRXUBSQJJCYAGXRPRWESEVNXEYTTWCKVBQDMZFBDQWOZHWQQTDCSJGIYKIDIEVNBSFMLKCDPJSOWUEWTGMRMSFQOFNURNKZXTRCOBIVQXZHSKXPUYFMGJWPNZNGNJQE");
    msg.links = 1269349795U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.7311373396046492);
    msg.setSource(50039U);
    msg.setSourceEntity(108U);
    msg.setDestination(30867U);
    msg.setDestinationEntity(148U);
    msg.groupname.assign("HKVRUJSDSZYLHMHWWPDAVJITWKYPMMXZAUBUGACVFFNYEOQAFRXIGUNTNPPICWRTUXCNORASSFENEKVYGGQGHFLTOFWSDBWSHYVEWQKTPVGQMRVZYHSNAKWJNSOXK");
    msg.action = 123U;
    msg.grouplist.assign("LHBTRWHBTXUBZLEEHKAOXITFKSPCJNHTWLLSDTTDXPFQFJYTWMCPQFVGMUJMFIRWCMBALMKTEUQYUIVRDQUBOBPKWPOHSSY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.6838318882797035);
    msg.setSource(53699U);
    msg.setSourceEntity(12U);
    msg.setDestination(22850U);
    msg.setDestinationEntity(200U);
    msg.groupname.assign("LLYBAJFQXAQTPSSIOJQUUZANMUHCBZSOIGXPEKEVSSONKATBGBEFLVIRDVFZTEMZENMDFWVYWFQHRSWFJOCRIRALINJYULNGCORYAPCXCBJZZZWKJQPAPSIFTRNNTPGNTHPFOUCWKNYXGBLJOZMMCJCXLUTHXPUVUDXDBSGGMWBD");
    msg.action = 114U;
    msg.grouplist.assign("FWOBNNMHYNJJFPVMWRZEIDHHXYCJIIEXYSLPRCSNRQDFCNHAWQUOPBVESXJCTUAOZJUMOVHLBGBYLESTYXGRZYEJVEQTSRXAMDLAWSWBYNBJGKNDQFGKGMOTNLLQPMDCOXYUNDTHOCMAGFGVUADKIUZBZTIPKKJHYBCWTIKRZIVQPHGA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.019075721348919772);
    msg.setSource(41848U);
    msg.setSourceEntity(155U);
    msg.setDestination(12481U);
    msg.setDestinationEntity(176U);
    msg.groupname.assign("WACCVACCINRPZBAAWMGXPJHJSFKXUQOYMSELEZYKCHQEMIFWGDTRJATJGWURQEWRALAQBBKDYZOIJEPCOGEQIDVMBCFJOVEQEFIXILCIKOZLFHG");
    msg.action = 62U;
    msg.grouplist.assign("KGOFATFFAAOZUIRKZPGBJJDWWLYMNS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.11609177296937434);
    msg.setSource(57999U);
    msg.setSourceEntity(167U);
    msg.setDestination(57699U);
    msg.setDestinationEntity(103U);
    msg.value = 0.4250194086601058;
    msg.sys_src = 5036U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.2383678439785698);
    msg.setSource(5704U);
    msg.setSourceEntity(170U);
    msg.setDestination(37459U);
    msg.setDestinationEntity(120U);
    msg.value = 0.268788359977699;
    msg.sys_src = 19250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.1426136885364776);
    msg.setSource(12348U);
    msg.setSourceEntity(9U);
    msg.setDestination(6391U);
    msg.setDestinationEntity(96U);
    msg.value = 0.3539106230687765;
    msg.sys_src = 21151U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.8885785929140603);
    msg.setSource(5746U);
    msg.setSourceEntity(58U);
    msg.setDestination(16304U);
    msg.setDestinationEntity(70U);
    msg.value = 0.3458060277994812;
    msg.units = 158U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.20247316978250574);
    msg.setSource(40166U);
    msg.setSourceEntity(200U);
    msg.setDestination(53809U);
    msg.setDestinationEntity(16U);
    msg.value = 0.1586872596773603;
    msg.units = 142U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.8387914345681624);
    msg.setSource(23205U);
    msg.setSourceEntity(168U);
    msg.setDestination(22273U);
    msg.setDestinationEntity(6U);
    msg.value = 0.7846426959260955;
    msg.units = 190U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.4503335269688795);
    msg.setSource(52076U);
    msg.setSourceEntity(197U);
    msg.setDestination(60796U);
    msg.setDestinationEntity(147U);
    msg.base_lat = 0.7963147433411708;
    msg.base_lon = 0.7763855557126439;
    msg.base_time = 0.3621330171124437;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.44362316928393297);
    msg.setSource(16049U);
    msg.setSourceEntity(239U);
    msg.setDestination(64201U);
    msg.setDestinationEntity(29U);
    msg.base_lat = 0.11889000270225647;
    msg.base_lon = 0.23750076250242658;
    msg.base_time = 0.07389523115868746;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.7106990965508272);
    msg.setSource(14598U);
    msg.setSourceEntity(94U);
    msg.setDestination(12243U);
    msg.setDestinationEntity(173U);
    msg.base_lat = 0.9887311076797602;
    msg.base_lon = 0.9005867997537437;
    msg.base_time = 0.9121804960204251;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.842127412771922);
    msg.setSource(26953U);
    msg.setSourceEntity(157U);
    msg.setDestination(13601U);
    msg.setDestinationEntity(240U);
    msg.base_lat = 0.2906671279931172;
    msg.base_lon = 0.5000694297297018;
    msg.base_time = 0.47926492946553545;
    const signed char tmp_msg_0[] = {-112, -64, 106, -84, -60, 124, -126, 31, -109, -33, -16, -17, -77, -17, -27, -57, -53, 96, -44, 69, 23, -122, 64, 124, -24, -41, 62, 58, -6, -57, -88, -75, -91, -34, 63, 108, -74, -126, 35, 43, 43, 36, -121, 3, -126, 21, -8, -16, -46, -7, -15, -83, 97, 119, 7, 8, -34, -43, 91, -72, -6, -100, -119, 65, 80, 94, 5, 106, 68, -91, -8, 71, 94, 117, -61, -47, 75, 7, -16, -84, -92, 37, -33, 0, -105, -94, 49, 90, 29, 19, -36, 65, 36, -36, -103, 72, -118, -7, -24, 32, 78, -60, -47, -20, -59, 30, 119, -104, -51, 106, -92, 112, -103, -23, -128, 112, 114, 37, -62, 35, -51, 94, 112, 20, 56, 31, -96, -17, -67, -31, 89, -57, 100, -47, -114, 64, 82, -29, -45, 49, 58, -4, -117, 21, 80, 40, -68, 89, 15, 24, 101, 113, 54, -109, -123, 110, 43, 12, -46, -60, -35, 104, 51, -44, -99, 42, -29, -81, 58, -75, -21, -80, 2, 19, -8, 88, 0, 111, 86, -21, 42, -40, -25, -91, 112, -43, 73, -88, -66, -19, -123, 86, 77, 16, -69, -5, 68, 34, 65, 97, 10, 51, 111, -73, 52, -116, -19, -61, 15, 91, 117, -37, -13};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.7115767612281252);
    msg.setSource(53952U);
    msg.setSourceEntity(98U);
    msg.setDestination(49415U);
    msg.setDestinationEntity(218U);
    msg.base_lat = 0.9125782299567805;
    msg.base_lon = 0.4844448804800109;
    msg.base_time = 0.2228455576584567;
    const signed char tmp_msg_0[] = {-112, -41, -90, 8, 42, -115, -42, 33, 105, -86, -36, 41, -38, -112, -28, 40, -4, 73, -18, 42, -6, -83, -41, -46, -111, 2, 36, -98, -34, -15, 42, -52, -22, -84, -93, -80, 102, -30, -87, 77, 76, -70, -15, 41, -93, -125, -13, -88, 13, -120, 81, -83, -17, -53, -80, 51, -78, -16, 86, 53, -61, 27, 114, -120, -93, 119, -112, 32, -85, -54, -34, 69, -89, -18, 32, 42, -11, -2, 24, 49, -54, -118, 13, -50, -78, 18, -31, 37, -5, 12, -3};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.8588171536171816);
    msg.setSource(34488U);
    msg.setSourceEntity(254U);
    msg.setDestination(4803U);
    msg.setDestinationEntity(33U);
    msg.base_lat = 0.14364251530615157;
    msg.base_lon = 0.9851232626570084;
    msg.base_time = 0.5934625204504115;
    const signed char tmp_msg_0[] = {-109, 69, 1, -115, 6, 19, -21, 121, 71, -128, -127, -70, -37, 97, 12, -28, 16, -89, 61, -95, -104, -106, -107, -79, 79, 109, 42, -32, 44, -127, 124, 103, -45, 73, 49, -123, -63, 84, -4, 17, -66, -91, 107, -119, -26, -59, -94, -9, 114, -11, -98, -84, -86, -110, 123, 100, 67, 27, -39, 45, 34, -112, -89, 52, 96, 101, -46, 103, 116, 86, 103, -90, 56, -79, 54, -91, -112, -23, -97, 90, -106, -59, -36, -19, 95, -64, 37, 18, 89, -20, -20, -31, 108, 56, 110, -28, -72, -49, -105, -49, -91, -84, -102, 114, 117, -101, 41, 96, -56, -44, 80, 64, -116, -90, -80, 60, 34, -117, -27};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.005465824298526156);
    msg.setSource(33615U);
    msg.setSourceEntity(106U);
    msg.setDestination(57656U);
    msg.setDestinationEntity(7U);
    msg.sys_id = 47678U;
    msg.priority = -69;
    msg.x = 14918;
    msg.y = -22423;
    msg.z = -12878;
    msg.t = -17886;
    IMC::RemoteActions tmp_msg_0;
    tmp_msg_0.actions.assign("HIEDGSLKDVYYCFLNSSHQBUVDGQALDBSCDGAWAPJUHYAGIZSQAYYPVKVKJBOWNTPHKAPLQB");
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.8832744100722029);
    msg.setSource(57973U);
    msg.setSourceEntity(19U);
    msg.setDestination(50915U);
    msg.setDestinationEntity(168U);
    msg.sys_id = 993U;
    msg.priority = -105;
    msg.x = -5956;
    msg.y = -10873;
    msg.z = 21772;
    msg.t = 27866;
    IMC::UbxStatus tmp_msg_0;
    tmp_msg_0.gpsfixtype = 147U;
    tmp_msg_0.flags = 51U;
    tmp_msg_0.diffcorr = 108U;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.8562357038339942);
    msg.setSource(37895U);
    msg.setSourceEntity(116U);
    msg.setDestination(33851U);
    msg.setDestinationEntity(0U);
    msg.sys_id = 52641U;
    msg.priority = 107;
    msg.x = 25551;
    msg.y = -22375;
    msg.z = 2200;
    msg.t = 31458;
    IMC::SoiState tmp_msg_0;
    tmp_msg_0.state = 34U;
    tmp_msg_0.plan_id = 47645U;
    tmp_msg_0.wpt_id = 26U;
    tmp_msg_0.settings_chk = 4552U;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.8045865286352194);
    msg.setSource(32111U);
    msg.setSourceEntity(89U);
    msg.setDestination(50071U);
    msg.setDestinationEntity(162U);
    msg.req_id = 54741U;
    msg.type = 236U;
    msg.max_size = 6381U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.40036904982422783;
    tmp_msg_0.base_lon = 0.6263258130037633;
    tmp_msg_0.base_time = 0.29358133382013807;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.9236164624692667);
    msg.setSource(5524U);
    msg.setSourceEntity(203U);
    msg.setDestination(22228U);
    msg.setDestinationEntity(45U);
    msg.req_id = 28398U;
    msg.type = 25U;
    msg.max_size = 17616U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.0856540931746822;
    tmp_msg_0.base_lon = 0.9301653762037476;
    tmp_msg_0.base_time = 0.032638499994887105;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 55577U;
    tmp_tmp_msg_0_0.destination = 45014U;
    tmp_tmp_msg_0_0.timeout = 0.2598930445519171;
    IMC::CacheControl tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.op = 235U;
    tmp_tmp_tmp_msg_0_0_0.snapshot.assign("UOKUBEOAITJAQDKXMRLDCRHEVFKRPRUVXPWPVEBKDJRFHIIJIZYVTBOFFHNGNMLORAMWZQQGZBAZAYQNAVKBXGVJMTGONOLWTW");
    IMC::OperationalLimits tmp_tmp_tmp_tmp_msg_0_0_0_0;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.mask = 115U;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.max_depth = 0.2563574187233465;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.min_altitude = 0.6601839681072772;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.max_altitude = 0.9406883290119482;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.min_speed = 0.6483936444199262;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.max_speed = 0.09720394372106766;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.max_vrate = 0.8636672512171046;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.lat = 0.6665067789798439;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.lon = 0.13039907766540382;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.orientation = 0.14020507414947192;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.width = 0.049738352123943286;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.length = 0.9205848744408048;
    tmp_tmp_tmp_msg_0_0_0.message.set(tmp_tmp_tmp_tmp_msg_0_0_0_0);
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.895568439796898);
    msg.setSource(38521U);
    msg.setSourceEntity(127U);
    msg.setDestination(5131U);
    msg.setDestinationEntity(172U);
    msg.req_id = 63089U;
    msg.type = 209U;
    msg.max_size = 37848U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.6804023297992523;
    tmp_msg_0.base_lon = 0.04789370521773606;
    tmp_msg_0.base_time = 0.10111379762886086;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 4439U;
    tmp_tmp_msg_0_0.destination = 8745U;
    tmp_tmp_msg_0_0.timeout = 0.39318150517161343;
    IMC::Current tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.value = 0.6964709879439784;
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.20755186323791341);
    msg.setSource(44651U);
    msg.setSourceEntity(125U);
    msg.setDestination(36834U);
    msg.setDestinationEntity(68U);
    msg.original_source = 44635U;
    msg.destination = 51767U;
    msg.timeout = 0.7812461338856346;
    IMC::EmergencyControlState tmp_msg_0;
    tmp_msg_0.state = 164U;
    tmp_msg_0.plan_id.assign("HCQTLJFTIXXEJEQZSHQJRFQGPWABSVUPMXQDJIOCNCNUTNYKRPYTDASFJLFAEIDIUMLGSXBNBIUYBHQLFJMDBHYWBJSKPAHVKV");
    tmp_msg_0.comm_level = 216U;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.5422590855833125);
    msg.setSource(40050U);
    msg.setSourceEntity(172U);
    msg.setDestination(55985U);
    msg.setDestinationEntity(19U);
    msg.original_source = 31152U;
    msg.destination = 12326U;
    msg.timeout = 0.44266891242056416;
    IMC::ExternalNavData tmp_msg_0;
    IMC::EstimatedState tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.9994097017954723;
    tmp_tmp_msg_0_0.lon = 0.8931706849770605;
    tmp_tmp_msg_0_0.height = 0.08716661382852786;
    tmp_tmp_msg_0_0.x = 0.16696000801058686;
    tmp_tmp_msg_0_0.y = 0.14156608650233782;
    tmp_tmp_msg_0_0.z = 0.2512081649357427;
    tmp_tmp_msg_0_0.phi = 0.8554301209087247;
    tmp_tmp_msg_0_0.theta = 0.5837875556740197;
    tmp_tmp_msg_0_0.psi = 0.24753681551144013;
    tmp_tmp_msg_0_0.u = 0.1806716126328286;
    tmp_tmp_msg_0_0.v = 0.25822374480935895;
    tmp_tmp_msg_0_0.w = 0.8380866613101873;
    tmp_tmp_msg_0_0.vx = 0.7175424802168776;
    tmp_tmp_msg_0_0.vy = 0.37378602939027783;
    tmp_tmp_msg_0_0.vz = 0.5181469026217357;
    tmp_tmp_msg_0_0.p = 0.8032842363267011;
    tmp_tmp_msg_0_0.q = 0.3158961835292884;
    tmp_tmp_msg_0_0.r = 0.16473137649128433;
    tmp_tmp_msg_0_0.depth = 0.8292570290919569;
    tmp_tmp_msg_0_0.alt = 0.8791695332946876;
    tmp_msg_0.state.set(tmp_tmp_msg_0_0);
    tmp_msg_0.type = 174U;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.6042880163568934);
    msg.setSource(64651U);
    msg.setSourceEntity(72U);
    msg.setDestination(43791U);
    msg.setDestinationEntity(58U);
    msg.original_source = 8706U;
    msg.destination = 29122U;
    msg.timeout = 0.2455566360185013;
    IMC::NeptusBlob tmp_msg_0;
    tmp_msg_0.content_type.assign("FDHTEJXRQTVQCARGWWQNURYGXAPTMPOUXUPSQXCHSILPBFOPHLOIJGMICIGJEGBTAWCKPUZXBMUSRVHBOWZIZCZNZJSYYOVWYKOJPHHNACUYDKXRVDFBQQZICIZVSJX");
    const signed char tmp_tmp_msg_0_0[] = {38, 20, -20, 64, -124, 69, 107, -55, 113, -82, -95, -93, 101, -21, -5, -94, 33, -25, -27, 74, -101, 59, 80, 18, 44, -13, -27, -117, 102, 123, -71, 108, -67, -108, 90, 28, -24, 35, -39, -10, 114, 110, -10, -77, 36, -92, 15, 56, 93, -43, 46, 32, 10, 69, -111, 122, -52, 103, 1, -83, -99, 61, -47, 55, -79, -15, 54, 112, 83, 91, 67, -24, -8, -57, 101, -47, -56, -87, -70, 109, 30, -57, -71, 79, 0, -111, 75, -45, 29, -86, 6, -6, 37, -39, -7, 61, -70, -12, -48, -18, -68, -76, 4, -110, -50, 54, 61, 14, 61, 71, -31, -124, -27};
    tmp_msg_0.content.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.3970111615684013);
    msg.setSource(23082U);
    msg.setSourceEntity(115U);
    msg.setDestination(16996U);
    msg.setDestinationEntity(106U);
    msg.type = 132U;
    msg.comm_interface = 60609U;
    msg.model = 65455U;
    msg.list.assign("UDMUXHJYUASFVIBEJWTOVDPMZSGVNL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.28284371000716246);
    msg.setSource(4344U);
    msg.setSourceEntity(241U);
    msg.setDestination(24427U);
    msg.setDestinationEntity(179U);
    msg.type = 117U;
    msg.comm_interface = 29928U;
    msg.model = 48623U;
    msg.list.assign("NLVCFFXRQBMOCEPQGSMWBRGUHAAPPDQFPDYWQWUERMZOQADTGBBXVUCTGJWUECNSFAJOZGGMQVEXOVFECBBMJCTNNSWXGXUNVXYLDYKFUOJXHSHDTNLDJDHCGPPOILIGAILNQMWMODKKCOZKRYYKITITVTATEYBKOAYDWONJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.6730649773080635);
    msg.setSource(52729U);
    msg.setSourceEntity(70U);
    msg.setDestination(62926U);
    msg.setDestinationEntity(166U);
    msg.type = 226U;
    msg.comm_interface = 41460U;
    msg.model = 10109U;
    msg.list.assign("CVZMYPPHASMMUCDNAIOZMJHZEAVACRJWMVNVVSFZEFWYXCYPAOTEILKNJBRCQPKIBTSERHTGNYGSGXTFJBRTQISTRENNKYWCNLGFHSNXPUFUSMLHGOHOGBNNERHDHEUIPSLXYABDLRMXHOCPIOZUWWQITOQADCJYDKWXJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.1798833010256874);
    msg.setSource(22736U);
    msg.setSourceEntity(108U);
    msg.setDestination(16180U);
    msg.setDestinationEntity(233U);
    msg.type = 142U;
    msg.req_id = 142659965U;
    msg.ttl = 14365U;
    msg.code = 153U;
    msg.destination.assign("LYQRDAYCXNMEFDZZDIQANDNGKQUHYUYSEWEVHRTCMRSOPNUJRYHWFOGISCWOXSDCCJXLIDEJPXKUPHTCCVZMBTXAUOFKSQYHNRW");
    msg.source.assign("VOOJDNWWXRYNLIHMUKVUHQBATLPOVSFTOBJJKYLLCRMZGIQWVBQWHVTIYPVUMFEQQSCEQCDLNFRPJPGEHDINDAOBXPXXDOIMIOMERWKCOPVVMWASTXKLKZZZNBKEMYTFXJGAEJGDHSCGIEIQBWRGOUNXRPITVMFUYZXJWYSCFRAHPPFHHNSKFZAOZTK");
    msg.acknowledge = 201U;
    msg.status = 197U;
    const signed char tmp_msg_0[] = {-1, 75, -26, 2, -20, 104, -116, 46, -115, 101, 66, -80, 65, 108, -70, -56, 27, 55, 44, -79, 81, 32, 49, -85, -47, 9, 126, 102, 73, 101, -38, -107, -45, 65, -5, 1, 76};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.5880015965725062);
    msg.setSource(11823U);
    msg.setSourceEntity(204U);
    msg.setDestination(33772U);
    msg.setDestinationEntity(209U);
    msg.type = 2U;
    msg.req_id = 87318638U;
    msg.ttl = 63575U;
    msg.code = 212U;
    msg.destination.assign("OZADSVBSODWYBNRICDHDBNWAAKVIZJGBISTJTYGLCOYTCVLSJMYBVFOQQLFFRLXBYTXXSDWDQSLGUDNRAPSQVKEKDFGUCJQCOCGMIRAVJ");
    msg.source.assign("QEFSMQMNIZKYDNCXTZJDHUDTXTYNZAPCHIGPZVYSUWRFBIORZXXAUOEOIQVMTFPULMRYZUTLNKMOLGYVXUWGNDL");
    msg.acknowledge = 71U;
    msg.status = 232U;
    const signed char tmp_msg_0[] = {-91, -42, 118, 107, 23, -97, 44, -120, 56, -21, -81, -70, -63, 16, -127, 28, 44, 114, 41, 65, 104, 43, -26, 126, -88, -103, 68, 89, -116, -20, -103, -116, 89, 113, 49, -83, -71, -88, 36, -4, -39, -123, -30, -118, -62, -43, -19, -78, -119, 83, 27, 86, 67, 28, -104, 14, -90, 84, 124, -36, -93, 63, 80, -4, -34, -72, 88, 46, 124, -20, 22, -22, 103, -46, 41, 83, 46, 112, 21, 0, -43, 42, 26, 87, -7, 8, -51, 71, -127, 97, 61, 88, 114, 11, -109, -39, -99, -82, -96, 68, 110, -119, -66, -7, -86, 30, -52, 9, -63, 45, 35, 123, -73, 16, 58, -97, -117, -90, 9, 20, -82, 96, 28, -120, 111, -54, 24, -26, 92, -59, -48, -12, 23, 3, -19, -14, 27, 116, 36, -88, 12, 95, -110, -92, 115, -18, -85, -121, 2, 40, 93, 66, 71, -12, -39, -16, 25, 119, -123, -7, 121, 108, -53, 91, -125, -84};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.4086605672064717);
    msg.setSource(47812U);
    msg.setSourceEntity(226U);
    msg.setDestination(23105U);
    msg.setDestinationEntity(95U);
    msg.type = 218U;
    msg.req_id = 2927848006U;
    msg.ttl = 4678U;
    msg.code = 87U;
    msg.destination.assign("PRWUYVQMBVJCREBDKITRCJKIZIITPKGOBKJGKFGNZUOXQRPUNPVYEOSLXSHWCMHMPJXTFSAYZXJCECFSQLVKHSMOISRWDNGWUUBGETNENXJQKJLLIGWPCFTAMIXFSDVKAJPNHGYRRLGIFWZNIDTUSGFOHQAHQCIFAOZFYWDDACCBXVFEDBWZHRCZX");
    msg.source.assign("ZUKPWOYGMZRH");
    msg.acknowledge = 174U;
    msg.status = 138U;
    const signed char tmp_msg_0[] = {-67, -38, -99, 104, -88, -105, 47, 40, -48, -10, 12, 16, 13, 110, 49, -66, 61, 22, 0, -4, -16, -23, 108, -46, -42, -14, 97, 99, 103, 78, -116, -117, -114, -110, 0, -114, 30, 50, 125, -104, -111, -53, 29, 90, -68, 28, -57, 7, -104, 15, -10, 43, -85, -49, 85, -99, -87, -38, -87, 113, -51, 60, -121, -29, 121, 34, 4, -99, -1, 57, 5, -60, -94, -88, -46, 94, -50, 84, 66, 110, 24, 19, 63, 121, -103, -36, -6, -26, 118, 47, 119};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.14840862896086549);
    msg.setSource(6958U);
    msg.setSourceEntity(205U);
    msg.setDestination(14015U);
    msg.setDestinationEntity(14U);
    msg.id = 40U;
    msg.range = 0.5841202555860212;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.12307951366527425);
    msg.setSource(52476U);
    msg.setSourceEntity(223U);
    msg.setDestination(50501U);
    msg.setDestinationEntity(161U);
    msg.id = 79U;
    msg.range = 0.8889357417072079;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.08880717221385326);
    msg.setSource(33691U);
    msg.setSourceEntity(200U);
    msg.setDestination(12503U);
    msg.setDestinationEntity(156U);
    msg.id = 131U;
    msg.range = 0.14753556171197946;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.542804748951615);
    msg.setSource(17684U);
    msg.setSourceEntity(74U);
    msg.setDestination(55594U);
    msg.setDestinationEntity(191U);
    msg.beacon.assign("NHOSASKOVDEGQHVHBZZTOAFCWGDTNCHEZKJFTKHYJURMUBKQSXGLGTHUIZNWAEOZLNAFDOUSQPFUHLCLYPCESYNZAGFRCKCLATWMECWJVRBYOJBPXRDXUKXXQESNYZDARRMYQLXCYNFCXTMBFFMREQUEZKOIAWIBPWLUHTOZYFPJNFVJGWBTVPRVSSDRUIIPKVDWIGLNBMDNWQLYRIQBHKD");
    msg.lat = 0.6189391788182258;
    msg.lon = 0.849281359532982;
    msg.depth = 0.7963081402982304;
    msg.query_channel = 184U;
    msg.reply_channel = 39U;
    msg.transponder_delay = 7U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.43224410670822044);
    msg.setSource(38866U);
    msg.setSourceEntity(91U);
    msg.setDestination(3765U);
    msg.setDestinationEntity(92U);
    msg.beacon.assign("FUMSEFSRDLMITBVFLAOINPBTXLGGXGIZRYEXPVBSPKVJVCWUJDTSZZXWWEROLCULPN");
    msg.lat = 0.3568929082880019;
    msg.lon = 0.4718620122552897;
    msg.depth = 0.23258793687912227;
    msg.query_channel = 193U;
    msg.reply_channel = 7U;
    msg.transponder_delay = 141U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.012903027326524596);
    msg.setSource(12304U);
    msg.setSourceEntity(133U);
    msg.setDestination(55495U);
    msg.setDestinationEntity(132U);
    msg.beacon.assign("HSYCBMIDLHDMIHWZITWZATWBRMBZAOSSJEPBIQQWHPBOLDVVJNPMJDDRIYSNSOWXAUANCGISEHDSRGPBJYRNGKDXOFXQRNFUYXKZKVQJYCQKVTZZMXGBLUBYHDJMOHGUFREENTMSVFPXYZRQSTKTCHOUPVBCBXZECVEXF");
    msg.lat = 0.5875794536655207;
    msg.lon = 0.7094253240583949;
    msg.depth = 0.5004035315884432;
    msg.query_channel = 15U;
    msg.reply_channel = 54U;
    msg.transponder_delay = 146U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.5867641109095214);
    msg.setSource(21753U);
    msg.setSourceEntity(253U);
    msg.setDestination(34220U);
    msg.setDestinationEntity(15U);
    msg.op = 128U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.5495829055048784);
    msg.setSource(49207U);
    msg.setSourceEntity(212U);
    msg.setDestination(42696U);
    msg.setDestinationEntity(164U);
    msg.op = 69U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("OAMVXQVONXFJSRZXRCXXDAYYCVNSAAHQKMFWMILJIGYZNLNL");
    tmp_msg_0.lat = 0.5416803931206795;
    tmp_msg_0.lon = 0.41541849027616873;
    tmp_msg_0.depth = 0.8091183586740425;
    tmp_msg_0.query_channel = 39U;
    tmp_msg_0.reply_channel = 195U;
    tmp_msg_0.transponder_delay = 102U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.4861251796289465);
    msg.setSource(32044U);
    msg.setSourceEntity(181U);
    msg.setDestination(47805U);
    msg.setDestinationEntity(9U);
    msg.op = 130U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("ECXBSKTKPMHYUEXZYBSYDNOBJCJYPWDCJBQZRGKRNICNXBNJFRAEHJGNDIZTZUHDGIAPBRGEWICLFVPQIHYFULVYFHHSAOCTVFMMCOUUHJNVQIVPKMLUDPWUSHSIDVTZJLFECBQXRAYAQMGWOWKFDGQLOQMWZWTSRNVUBWFMHOMI");
    tmp_msg_0.lat = 0.3187907611142682;
    tmp_msg_0.lon = 0.14338006905740874;
    tmp_msg_0.depth = 0.43628331177259316;
    tmp_msg_0.query_channel = 202U;
    tmp_msg_0.reply_channel = 132U;
    tmp_msg_0.transponder_delay = 244U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.33446031405184795);
    msg.setSource(22337U);
    msg.setSourceEntity(40U);
    msg.setDestination(16330U);
    msg.setDestinationEntity(155U);
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("BRDVIDVPCHLVSBVDZWTZIWFO");
    tmp_msg_0.attr_type = 122U;
    tmp_msg_0.min.assign("DFDDYEYZUWQJXTIWLTLXQCJFQKJSBIRDPHOZLCDWAMLHNAGACKOTRVMKKCYZPHJOHYEAYSFIOCEQSRIQGTCRHFLMOPPUOJYPHWZZTQZYDFHOALRBDMGTMIGUXLXXMNNVRVXOVHSJWPMFCSUIAJNWAUUKXYWGQEXBIVDBSUCZKBNDKZVBQVQFVRY");
    tmp_msg_0.max.assign("KHARPFXXLPFGNMPQBVTELDQYVRFUTWKEDHOQFCZILVMAIQJWUDTBKMJNWHWGPEWDMFGVPIEXAZMRMQLCUSBBXMJRJUGOYJBOLUGFUQKPBLVDVAITXAUHNHVCIILVXLNQFLESCVTOIS");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.826802416627595);
    msg.setSource(11034U);
    msg.setSourceEntity(87U);
    msg.setDestination(53297U);
    msg.setDestinationEntity(120U);
    IMC::GpsFix tmp_msg_0;
    tmp_msg_0.validity = 62151U;
    tmp_msg_0.type = 104U;
    tmp_msg_0.utc_year = 35658U;
    tmp_msg_0.utc_month = 65U;
    tmp_msg_0.utc_day = 82U;
    tmp_msg_0.utc_time = 0.46966522957639756;
    tmp_msg_0.lat = 0.671445264120745;
    tmp_msg_0.lon = 0.9768151161584779;
    tmp_msg_0.height = 0.6363489636799333;
    tmp_msg_0.satellites = 91U;
    tmp_msg_0.cog = 0.35784354742195723;
    tmp_msg_0.sog = 0.7666125617616062;
    tmp_msg_0.hdop = 0.7200347531289691;
    tmp_msg_0.vdop = 0.3240622034548146;
    tmp_msg_0.hacc = 0.6029498854667269;
    tmp_msg_0.vacc = 0.5578994130504342;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.20309422437116176);
    msg.setSource(53342U);
    msg.setSourceEntity(126U);
    msg.setDestination(46300U);
    msg.setDestinationEntity(194U);
    IMC::CommSystemsQuery tmp_msg_0;
    tmp_msg_0.type = 216U;
    tmp_msg_0.comm_interface = 10936U;
    tmp_msg_0.model = 61570U;
    tmp_msg_0.list.assign("YNQOAJRUELIXPEV");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.5631433581020612);
    msg.setSource(41586U);
    msg.setSourceEntity(128U);
    msg.setDestination(7439U);
    msg.setDestinationEntity(113U);
    msg.lat = 0.8582599027287345;
    msg.lon = 0.6304105902865421;
    msg.depth = 0.22840399991890037;
    msg.sentence.assign("CKPLOPUFVVUQNCNXMHIGQRVDTNKUDSPUJEMSIRLMXOJVTKZKH");
    msg.txtime = 0.5152543609051524;
    msg.modem_type.assign("EHNXFIIBAYVRJTYOEAHRMAPFOXYKQOBRXRZEITNARPZCQQXFHEIDRIGKYUGCSGSRZESLDAMYCOQPESVBTUMGHMCLCQQKOQNYFKLPKHFUPYOJWYXIQTJKWQZECXZGLTRTBDTSLGLUMURVEIXWLKOTVPCIWDBVCWTPNAUFKBLXUOHZPPBEFYHSYZWCHWNUDUZGMNVUJNLXFVOBVNCMATDM");
    msg.sys_src.assign("NUVONUJMGYIUVEHPVPPWWXMUFGGRAFDRPJBRTOUQNFUBZAGPNBABGYPLXQASZUIHYCJZHUOFEEJNLTRKFBCCDIJPVYAYMCWSKRBRHPHNTLYNMCXWWMXPUIHMGMLASYXFIYKFDRDQQVKZVYNXAQJDREELCSZLCTDRSKXOBOTSHAMVYOZTMQZCWOPFFZWTCQILIWGIHRNVDMNJVSOGKODEQTFQSXAGCOKZJQEETDHSL");
    msg.seq = 15644U;
    msg.sys_dst.assign("CTTVRIJFBANWIGHZXEFHGKLSJLSCONWTZYFDMPOHEENFEFYQWFOAVQTTPZXDBQMQQYCMDCRSUGUZCKUMSSLXOGPRRPLWUYHRVHANCIUFTQJGDFATEKKSZIKLYYGXNKAIKRJWWXMNESPMBTXLZEVPLHZCAHUAQONRUANVDSKYBNJVFJGWVBRZM");
    msg.flags = 133U;
    const signed char tmp_msg_0[] = {-110, -62, -49, 112, -53, 39, 102, -46, -12, 50, -88, 21, 27, -2, -39, -64, 46, -17, -31, 55, -125, 53, -16, 88, -67, -18, 126, -107, -102, 115, -20, 32, 73, -73, 77, 18, -97, 77, 11, 17, -47, 105, 51, -71, 51, -28, -123, -32, 117, -119, -7, -102, 85, 75, -121, -109, 4, 94, -76, -114, 95, 122, 34, 97, 78, 121, -13, 27, -73, -113, 54, -26, -67, -83, 51, -38, 31, -113, 108, 126, 59, -1, 19, 104, 125, 32, -75, -70, 40, 36, 108, 20, -57, 53, 21, -85, 84, 60, -50, 88, -120, -65, -72, 85, -24, -125, 15, -71, -120, -57, 0, -91, -75, -98, 8, -37, -82, -37, 65, -10, 99, -116, 105, 98, 36, -71, -52, -21, 23, 55, 111, 78, 12, -82, 99, -48, 88, -88, -67, -12, -19, 101, 103, -32, -57, -89, -93, 59, 100, 108, 72, 13, 92, -108, 20, -64, -125, 68, -117, 85, 96, -59, -75, 99, -89, -66, 61, -98, 124, 82, -103, -127, -128, -59, -40, -58, -40, 117, 13, -127, -25, 46, 54, 104, -67, -1, 116, 125, -39, 24, -53, -93, -45, 10, 82, -59, -127, -57, 58, 52, -56, 61, -124, -8};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.212662463709833);
    msg.setSource(53627U);
    msg.setSourceEntity(3U);
    msg.setDestination(27171U);
    msg.setDestinationEntity(188U);
    msg.lat = 0.8969608127827138;
    msg.lon = 0.2563336905191138;
    msg.depth = 0.5294939122147797;
    msg.sentence.assign("XRAIMWWDJTMPCUILQHPMJVJCRJTNTGIXSHQFDHXCSLGLWXPZPSDQYRUDBYDLRRVYGPPNEKBANNYXBMJSQAPFGXRAFQLGTQFXYNZMFXWNELMKIGBHSMHGLKKUXVNYQNDTBHKCAZIWGBEQESIIOUUXUHCIRFWWTVWSFJRTDOYZKJCBVWBSTZBSVJMJPDPCONEIUZOZHHAFZUZKDREANWRLJFZOYVBYEAPVTCQYLEOCGOAKGAMKOFLHOOCEMIDSUQ");
    msg.txtime = 0.035911615717388656;
    msg.modem_type.assign("VRNJCFGMRYTWNUQKVBUMNBNVIKWCVLLEEBDEUNJMNBGWWOPKWIZSGOYSIQNXQJOOQOEEILFAPXLXHHTHLCEHXYEJGNTTWRDHKCTCVTZNFRYJOOGKXUKMPGFYCDFSQCRYYDHJGLQBOLF");
    msg.sys_src.assign("XHBGYJBPAZXNSWNEHOIDZJBHZRLLNKKVDVKJRWLAEXMTUSYEOFRSWIAQCQMAUNSVMERCPFHRRXICLGOBBHNFCQWELGMAJKUJWZOGGCOKSKYSCZQMXXZVMPFLZUSWODEZSEBBUHUROEPETBHWUDQWCQVYYTPDGQPVXOJNHDTYJVSACWFNZAMMDTPNTKMFNUXATAXUFLDVTTYR");
    msg.seq = 20794U;
    msg.sys_dst.assign("JKIJPDAKEQVBDPAZILSBQSLCISDJJPXJXRYSHBM");
    msg.flags = 165U;
    const signed char tmp_msg_0[] = {109, 17, -5, -13, -39, 111, 43, -40, 46, -121, -123, 33, -44, -40, -33, -76, -112, -124, -100, -96, -89, -8, -18, 69, 110, 107, 125, 85, 16, -88, 122, -55, 72, -72, -36, -57, 105, -107, -99, 99, 93, -30, -34, 101, 94, -46, 103, -9, -73, -33, 61, 50, -125, -25, 126, -46, -126, 88, -10, -24, 37, 120, -33, 98, 121, -74, -115, -71, -31, 10, -94, -114, -46, -24, -25, 85, -1, 30, -103, -68, 49, -66, -44, 104, -24, -47, -34, 65, -15, 107, 81, -97, -52, 33, 88, 63, 125, -4, 66, 11, 23, -37, -120, 70, 18, 75, -116, -1, 49, -30, 80, -88, -104, 69, 48, 37, 79, 1, 106, -44, 9, -52, -125, 47, -76, 84, 60, 51, 32, 98, 114, 11, -8, -1, 50, -76, -47, 13, 75, 126, 95, -60, 23, 122, -113, 64, 116, -24, -76, 98, -55, 106, -111, -98, 44, 70, -10, -19};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.9194629529991123);
    msg.setSource(24812U);
    msg.setSourceEntity(222U);
    msg.setDestination(23860U);
    msg.setDestinationEntity(150U);
    msg.lat = 0.4507603862808963;
    msg.lon = 0.010569813173497589;
    msg.depth = 0.347593283463265;
    msg.sentence.assign("QWCFTZBFTJQKLRAPKFIPVSLZOIVDMPAFBMEQZGDOZKJYTRGGDYZRRNSYFXRIHFJFUZNUVINGCLLIGQYYYPHEBYDVLCOOSQBVSEASEXYCWWVYNHFKCQMOQBCKQHWU");
    msg.txtime = 0.9438379187335554;
    msg.modem_type.assign("ZQILAKPZMQBUPQKINMENWDQJKHJNESVPTTIDKTAGWXBIEVQDVHCBAVUUYMZSFKSEEUZGACYQFJESDPETXQOFTMTHKZWOIUPDXKIDAOTRYQSLKRLWAEIIVTPECHJFFXGNONQBYAFXPHRFOSBOMUBWALLZOHTZTLRMPXPYCLLJHXJNSGACMYMDZCFYUGCBSWDROXNWWJVRCLBCXGYVSVLEYFXGJRQNZNJDRF");
    msg.sys_src.assign("DCXRAHRVSMVDEQFJC");
    msg.seq = 55206U;
    msg.sys_dst.assign("JJXJQINWTSNNTDAOWDUOWPMMQIZXWYZMZGPSXLDAFWQTEJKUAABLZQPLIWNGVIBABLRAFKXGFOKYIMBHNOBBKHRJTDVBTCXHYDZNSHCSAWOYVKXOCCKMGQRDQHFUZCFIFPGRYJVFEUEYOGUENLSUPESMAGHXLQBRTKDUIJYFZZKYNPHPHRTVEOXSEYCBIEKLTLSVIXIWUDYRVUEWCXOAPSTLJNWFZAVRKHOVPQJQPSJBUCDGMRQCR");
    msg.flags = 21U;
    const signed char tmp_msg_0[] = {-30, -108, -46, -4, 4, -4, 21, 86, -62, 12, -74, 19, 24, 54, 96};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.5016721531001153);
    msg.setSource(25105U);
    msg.setSourceEntity(34U);
    msg.setDestination(55612U);
    msg.setDestinationEntity(231U);
    msg.op = 0U;
    msg.system.assign("IVEOXOTPRQFZQDSHCDQNRUNSLILDOBGJUNJ");
    msg.range = 0.5624359472133076;
    IMC::LeakSimulation tmp_msg_0;
    tmp_msg_0.op = 195U;
    tmp_msg_0.entities.assign("TUJVUGAIDIYCEVEIXMLSJLCWVPOSCFDBULELRHQAQMORDVOEZNOAZXVUFUKMSWKZTNPLJJUMEYGGEXZNNBACWHRXEUSAWYKCNMXKFGRHYPGHSGPHKSONXBGQGXTSFTYPDNPRODHRTCXHLAROZUJIZIDVQLZAJSWGDQZJQHPVIWMUDYZAISKIFQBUJENZVFVFCCDFHMOBRWMHLMQKFDLPOLTSMYYXAQKWPRTE");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.9786401169352699);
    msg.setSource(41034U);
    msg.setSourceEntity(21U);
    msg.setDestination(41307U);
    msg.setDestinationEntity(62U);
    msg.op = 212U;
    msg.system.assign("UCDQPUHYNJERMMMBMOUTVAYJSJHDANRFHBWNXYHQQEBWDFZRKVCHMFTYPOFWKCGRFYBQJADSKQHAFVKEYGLLFICAPMBWTQVUWWBTUZJIKTCASKMEHSOZGGGPLAUDNAFZLXVZSPTKQALPRENILBWPIZJXVBOCZBTIMXGVQXNHNEGDDXJUJJVCOZBSKESQOIWDGRWXYIVQVOUFRYLXLPDZNPCJHIMOUILYR");
    msg.range = 0.2624238780908704;
    IMC::OpticalBackscatter tmp_msg_0;
    tmp_msg_0.value = 0.9992894034521731;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.5427314423969732);
    msg.setSource(36674U);
    msg.setSourceEntity(129U);
    msg.setDestination(51766U);
    msg.setDestinationEntity(224U);
    msg.op = 21U;
    msg.system.assign("KKEPLFAYGXWYCSQDMC");
    msg.range = 0.5490055932752245;
    IMC::TBRFishTag tmp_msg_0;
    tmp_msg_0.serial_no = 4259436150U;
    tmp_msg_0.unix_timestamp = 947192200U;
    tmp_msg_0.millis = 21719U;
    tmp_msg_0.trans_protocol = 39U;
    tmp_msg_0.trans_id = 1799978960U;
    tmp_msg_0.trans_data = 39483U;
    tmp_msg_0.snr = 125U;
    tmp_msg_0.trans_freq = 177U;
    tmp_msg_0.recv_mem_addr = 19987U;
    tmp_msg_0.lat = 0.051032003746445787;
    tmp_msg_0.lon = 0.3513903760377315;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.9413404000968837);
    msg.setSource(12648U);
    msg.setSourceEntity(52U);
    msg.setDestination(56923U);
    msg.setDestinationEntity(239U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.2948416255629056);
    msg.setSource(14637U);
    msg.setSourceEntity(194U);
    msg.setDestination(50467U);
    msg.setDestinationEntity(99U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.9352829223525899);
    msg.setSource(17530U);
    msg.setSourceEntity(105U);
    msg.setDestination(19342U);
    msg.setDestinationEntity(73U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.3578595163460644);
    msg.setSource(23784U);
    msg.setSourceEntity(246U);
    msg.setDestination(58399U);
    msg.setDestinationEntity(208U);
    msg.list.assign("WWFEIVNGMFWMKQPYCRPUSEWCSNHSBTFURPPOHGQVYAZIUPSFUHGEAROYNJRDOQADKQJLESGEVKPFOOEJWAQTMTHNZKHBELTCDBSXRVSYXILGAUVYPZSCYTIUFAMUQCLKMTOIBAWLSLMXZKGAJBOLTEJGRZJFKEJPIXDMVZZNRHCVQKYDVDGRYJMJHIAKFUDXQEDUBCMRXUIBVPIJNWRNHIMOXZGABFZQGBO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.4134479757394347);
    msg.setSource(43586U);
    msg.setSourceEntity(94U);
    msg.setDestination(48887U);
    msg.setDestinationEntity(168U);
    msg.list.assign("TPXEOXCSYJZNQJSLQANTIESPQBTIWJCATHHYZXAFLKOYJZFUYWFNFLBOWVLPAKMMGHASQOJXYMWKYGUMWJTIBGXBLNNKKPNPZLYDEFIEMZCIBLJDGDAU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.11527728410016014);
    msg.setSource(49191U);
    msg.setSourceEntity(241U);
    msg.setDestination(41705U);
    msg.setDestinationEntity(163U);
    msg.list.assign("QEJSNOLADMZYORFMXMHESVAONOCVFHVNWTKXJXHLFXSJAXIZGLEZGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.9917843047967427);
    msg.setSource(12849U);
    msg.setSourceEntity(136U);
    msg.setDestination(2916U);
    msg.setDestinationEntity(253U);
    msg.peer.assign("SBPANLUOFAYEVCTMBMDRGFORRFJEDYBLOKXBPETRJYZRHKFNJDZIOGHKDGQWKSPGHVVGDXMOPICIJFWYIJXZFQVUVJFUBTBUVCZIHXKMTLZVKJAQEYVTYNLIXNQDJEIBIHQDQGTYIOKTGBHZNFMRWZSVQFQMXLPRACWENYPAUDLMCCTMGJWEWCXHYSRAKUBAWNUB");
    msg.rssi = 0.30172998476622404;
    msg.integrity = 1684U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.2194286316860682);
    msg.setSource(15262U);
    msg.setSourceEntity(216U);
    msg.setDestination(12702U);
    msg.setDestinationEntity(34U);
    msg.peer.assign("GAOSTYXYFFAZZRBTCPETUPAHLAGQNFKACSAJFHJKKTJGZKPSORPUAISFRULVWHELOGJBUVINSHSCXACZDXQMQCJFBFDDCPMZCTYZNSJBTORMJYRGWKQWGANYVIGDNPOYZGMMDOQMSWVVELLCOXA");
    msg.rssi = 0.3481780750986777;
    msg.integrity = 26895U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.7121260533464635);
    msg.setSource(64483U);
    msg.setSourceEntity(12U);
    msg.setDestination(39041U);
    msg.setDestinationEntity(88U);
    msg.peer.assign("JEQVQHXXQHQSBAOSDAFHWWSXCYURPUYANCPNTSZKRLIBHDRPFMDYEYXTTFZEMUQJDDJYKTAOWGSXACVAWPVEKWOOBPMDMBLYNZTPCRSTQJJXYRVLVRDTLGBMMNEBPNJXNPZGSORHFGTTUVVFFKIYKFGNJKKXIGYNUZCBIKBZYLLNQRTZAJBCOOHEHOSWBSMFLGPE");
    msg.rssi = 0.365885278009082;
    msg.integrity = 17020U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.9360156241257893);
    msg.setSource(58774U);
    msg.setSourceEntity(220U);
    msg.setDestination(26513U);
    msg.setDestinationEntity(246U);
    msg.req_id = 29512U;
    msg.destination.assign("TGOQCSUZJHAWJDMVFOCMZMRIZGHGIKIOWFGPWNQIJPRTBXBHDVJNVLBYZMGYJTSCXADMKTXAWZGSODBFFVMTICTBZKPJUZLYXOXUPRRRGTVASFVJTMD");
    msg.timeout = 0.5125616623996648;
    msg.range = 0.7196818228925835;
    msg.type = 27U;
    IMC::PlanControlState tmp_msg_0;
    tmp_msg_0.state = 104U;
    tmp_msg_0.plan_id.assign("URYRZNLPUWLKMHBGUWYDGASORZIT");
    tmp_msg_0.plan_eta = 1327710411;
    tmp_msg_0.plan_progress = 0.03014695012002999;
    tmp_msg_0.man_id.assign("BFSJUOELAAMYFHZLJUXPQSTDXQGWNUHEHAUPNBHZJPROTFRJLBVEJSJIHKMCVTFRQZYTNPSILXFYPXDYDAVGCKYSPUNRCOUOEOS");
    tmp_msg_0.man_type = 1442U;
    tmp_msg_0.man_eta = -1677537877;
    tmp_msg_0.last_outcome = 157U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.8686500754782129);
    msg.setSource(34361U);
    msg.setSourceEntity(51U);
    msg.setDestination(3757U);
    msg.setDestinationEntity(60U);
    msg.req_id = 62401U;
    msg.destination.assign("SRNVKXPKTZCEIQWAYWFUQPBECYMNOBGKRYLGRSHYUZTZXCOGJFJDGIVFADTZMDAWOQUUIRHGLTWEWYHFKMFQIJLLBREHNCCJDLZXVCBCEUUTIRSMRNNOGMSGUPDTLAQBEAUVXKCNSJIAMBNYPOOZQXIJMDQJZFVMLGXHIRPMNHAYKGAEXYPEPDVAQWSYX");
    msg.timeout = 0.22838723141073491;
    msg.range = 0.3408461365963422;
    msg.type = 90U;
    IMC::FormationMonitor tmp_msg_0;
    tmp_msg_0.ax_cmd = 0.3210227740115871;
    tmp_msg_0.ay_cmd = 0.27241666290781597;
    tmp_msg_0.az_cmd = 0.06146724094833722;
    tmp_msg_0.ax_des = 0.8081621225814418;
    tmp_msg_0.ay_des = 0.4029956069819629;
    tmp_msg_0.az_des = 0.824458620485007;
    tmp_msg_0.virt_err_x = 0.7911522337757942;
    tmp_msg_0.virt_err_y = 0.69389704385372;
    tmp_msg_0.virt_err_z = 0.06726156922160287;
    tmp_msg_0.surf_fdbk_x = 0.3673315877607124;
    tmp_msg_0.surf_fdbk_y = 0.5957654602078142;
    tmp_msg_0.surf_fdbk_z = 0.8318651217139554;
    tmp_msg_0.surf_unkn_x = 0.5674819326419582;
    tmp_msg_0.surf_unkn_y = 0.8711810895672925;
    tmp_msg_0.surf_unkn_z = 0.005169638466157589;
    tmp_msg_0.ss_x = 0.22623783264092767;
    tmp_msg_0.ss_y = 0.19438206253906354;
    tmp_msg_0.ss_z = 0.2322514802789306;
    IMC::RelativeState tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.s_id.assign("PCTMSFJICTBULE");
    tmp_tmp_msg_0_0.dist = 0.5697973404268345;
    tmp_tmp_msg_0_0.err = 0.6741298992641428;
    tmp_tmp_msg_0_0.ctrl_imp = 0.4938176219370687;
    tmp_tmp_msg_0_0.rel_dir_x = 0.8215151701333434;
    tmp_tmp_msg_0_0.rel_dir_y = 0.08555262828130739;
    tmp_tmp_msg_0_0.rel_dir_z = 0.11364913685923006;
    tmp_tmp_msg_0_0.err_x = 0.1116591902605133;
    tmp_tmp_msg_0_0.err_y = 0.46557265217307775;
    tmp_tmp_msg_0_0.err_z = 0.7246879788452649;
    tmp_tmp_msg_0_0.rf_err_x = 0.03983902202648404;
    tmp_tmp_msg_0_0.rf_err_y = 0.40748280830823147;
    tmp_tmp_msg_0_0.rf_err_z = 0.3867995379320134;
    tmp_tmp_msg_0_0.rf_err_vx = 0.186914339412371;
    tmp_tmp_msg_0_0.rf_err_vy = 0.0891352575459734;
    tmp_tmp_msg_0_0.rf_err_vz = 0.29273552545636883;
    tmp_tmp_msg_0_0.ss_x = 0.3406538466714074;
    tmp_tmp_msg_0_0.ss_y = 0.8946164358352579;
    tmp_tmp_msg_0_0.ss_z = 0.5681047322742679;
    tmp_tmp_msg_0_0.virt_err_x = 0.8612518731619415;
    tmp_tmp_msg_0_0.virt_err_y = 0.9052182958344491;
    tmp_tmp_msg_0_0.virt_err_z = 0.5602890217747206;
    tmp_msg_0.rel_state.push_back(tmp_tmp_msg_0_0);
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.6695031692534901);
    msg.setSource(30967U);
    msg.setSourceEntity(95U);
    msg.setDestination(30287U);
    msg.setDestinationEntity(237U);
    msg.req_id = 26229U;
    msg.destination.assign("HZFDFHSZMEAVPILMTHRFWXPKIZOFXHBMUEUDOCKJXFCGUAQWKSJDSCJWFOBKSVANQCMKMXZZCPVXVBVLRAPNYTGXNZWDBODOPNUMGGUKBJTPLYCVAOWBTEJTQGHEIQPWDOFYLBWHIIQVRO");
    msg.timeout = 0.036884123445768635;
    msg.range = 0.5842084143507216;
    msg.type = 55U;
    IMC::AcousticRequest tmp_msg_0;
    tmp_msg_0.req_id = 27671U;
    tmp_msg_0.destination.assign("DQLLCEUHTSRRJNQDOSLBENXMWFIGIRTOGPPTHRAMSUSCBWQKVGPXPCAASOYMVNAPHOXTCGTONADZMBKTCIYCEIOQQWHVEKKBBELKKYFTPULLEPZGJXLEYNDYXBRRUZJDFEPAZWQQDURGNYTHK");
    tmp_msg_0.timeout = 0.6984473218869878;
    tmp_msg_0.range = 0.6862023218389705;
    tmp_msg_0.type = 8U;
    IMC::CompassCalibration tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 23386U;
    tmp_tmp_msg_0_0.lat = 0.5102023961110922;
    tmp_tmp_msg_0_0.lon = 0.46977399821196175;
    tmp_tmp_msg_0_0.z = 0.29217020384605263;
    tmp_tmp_msg_0_0.z_units = 86U;
    tmp_tmp_msg_0_0.pitch = 0.34021447775634184;
    tmp_tmp_msg_0_0.amplitude = 0.30529663526744977;
    tmp_tmp_msg_0_0.duration = 16221U;
    tmp_tmp_msg_0_0.speed = 0.789906858152903;
    tmp_tmp_msg_0_0.speed_units = 199U;
    tmp_tmp_msg_0_0.radius = 0.20778375341995292;
    tmp_tmp_msg_0_0.direction = 47U;
    tmp_tmp_msg_0_0.custom.assign("WUPXDVLMKFGACGKWBCUIGYBAQFLZJGCTYBOOLONGHRIKFEAUZSADBUFPEJVUVFQZGXIMFOYNSRMRQMEZHXVAUOENHKUDSMABAIOIYKYCULYFFLAIWWQZIRVLWHHTEOCTAJQJMCTVDYNWWLGDGEVSZERQPXNDXASKPJPQZZFBPSBKROKEHCHXUSRDTRNJJGTNMOYOSWLTWYBXIBTCZDEZQRLHVXDXMKIYJCIPP");
    tmp_msg_0.msg.set(tmp_tmp_msg_0_0);
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.17203910293379665);
    msg.setSource(54330U);
    msg.setSourceEntity(184U);
    msg.setDestination(30088U);
    msg.setDestinationEntity(238U);
    msg.req_id = 25415U;
    msg.type = 171U;
    msg.status = 250U;
    msg.info.assign("BLOTYTRECZJAFQNHYEMLFRMNEFJUQUWVKJAXCLAEVDRRDOXZGRPVTHISGXCERLQWZWIGGLFDZOIBRHMVVSZIIUXAJPSSTKXZKOVOCEDBNFMJNQPHODVBOYCSFMHIUJHNCTEGDMNGGPCNTBLDMKHPSWBEKXAT");
    msg.range = 0.1382118898781628;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.02655008578223328);
    msg.setSource(4434U);
    msg.setSourceEntity(187U);
    msg.setDestination(20617U);
    msg.setDestinationEntity(103U);
    msg.req_id = 40225U;
    msg.type = 253U;
    msg.status = 91U;
    msg.info.assign("QYHASJQVQUCEATIATZVYFOUDMEPRFQAYDRPKTZFXQIOBSUMKESRENILWGNWPXXCFLKFJLJDOGFKXTZJ");
    msg.range = 0.03935156463943812;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.12611078137706655);
    msg.setSource(56547U);
    msg.setSourceEntity(180U);
    msg.setDestination(28865U);
    msg.setDestinationEntity(33U);
    msg.req_id = 42445U;
    msg.type = 31U;
    msg.status = 143U;
    msg.info.assign("TBURQYDVVHBRCAXUUFDIT");
    msg.range = 0.12840607902209922;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.7169752956906572);
    msg.setSource(27218U);
    msg.setSourceEntity(24U);
    msg.setDestination(53349U);
    msg.setDestinationEntity(225U);
    msg.system.assign("ZIUMYBFUMKAWKNBDTAPIWH");
    msg.op = 93U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.228573042973791);
    msg.setSource(39743U);
    msg.setSourceEntity(90U);
    msg.setDestination(35358U);
    msg.setDestinationEntity(90U);
    msg.system.assign("GIDHHUXVTZWRWDBGRXSWURLYQAFEDJOHPVNSYTTPWFLSCGENPUCFSYOIFYDKLXXJZYBLWMGRYHHHZEOPONDVJMZCXUJFNDSHHALVXEAUMUAMQLOIVZKAAIVKHUERAJDNNSIIKFSOTFAFMKZAETUYLEOVPKITBYOGRQVCMEAKNSSNOQZLMZVJGJUGQRLCKNQOMWMLGWEBKDGBSQIPKDNRXZCQCBTXMXBBVQZWFUQ");
    msg.op = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.8234695033927428);
    msg.setSource(9887U);
    msg.setSourceEntity(1U);
    msg.setDestination(9493U);
    msg.setDestinationEntity(239U);
    msg.system.assign("ABQOLLMPHZPJWZFTYALKIXSRCUPJHAMXHRKFVBNPGVFUPRSHJKOYPVRNYZZGZIQUSMCIGKCOPLUYWPHEASBDTUQXXNLCASRZCBBWQSCAYNDVFODEUFMLKVEDZSBGMHKTVNGLJOWUFMCYXJOXXDP");
    msg.op = 104U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.9538998794685443);
    msg.setSource(51614U);
    msg.setSourceEntity(139U);
    msg.setDestination(64289U);
    msg.setDestinationEntity(4U);
    msg.value = 14801;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.07077020704666481);
    msg.setSource(25580U);
    msg.setSourceEntity(141U);
    msg.setDestination(21841U);
    msg.setDestinationEntity(208U);
    msg.value = 31368;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.5451082224137785);
    msg.setSource(37800U);
    msg.setSourceEntity(155U);
    msg.setDestination(59373U);
    msg.setDestinationEntity(124U);
    msg.value = 28181;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.5751389653501978);
    msg.setSource(48694U);
    msg.setSourceEntity(108U);
    msg.setDestination(5098U);
    msg.setDestinationEntity(84U);
    msg.value = 0.2453959701136349;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.8885491240486512);
    msg.setSource(45652U);
    msg.setSourceEntity(36U);
    msg.setDestination(34672U);
    msg.setDestinationEntity(210U);
    msg.value = 0.9052988166835508;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.5198614536446853);
    msg.setSource(16500U);
    msg.setSourceEntity(159U);
    msg.setDestination(24858U);
    msg.setDestinationEntity(205U);
    msg.value = 0.8357466747147326;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.37797306965057886);
    msg.setSource(55521U);
    msg.setSourceEntity(130U);
    msg.setDestination(35430U);
    msg.setDestinationEntity(117U);
    msg.value = 0.9013225090155204;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.47574679449506474);
    msg.setSource(46147U);
    msg.setSourceEntity(104U);
    msg.setDestination(40888U);
    msg.setDestinationEntity(151U);
    msg.value = 0.39614631043170534;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.9954093119745065);
    msg.setSource(18274U);
    msg.setSourceEntity(102U);
    msg.setDestination(52824U);
    msg.setDestinationEntity(146U);
    msg.value = 0.4127901199240329;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.21164967763946896);
    msg.setSource(54008U);
    msg.setSourceEntity(209U);
    msg.setDestination(31788U);
    msg.setDestinationEntity(62U);
    msg.validity = 27285U;
    msg.type = 124U;
    msg.utc_year = 63179U;
    msg.utc_month = 198U;
    msg.utc_day = 246U;
    msg.utc_time = 0.10109387613531906;
    msg.lat = 0.18713189804694907;
    msg.lon = 0.05764329285597447;
    msg.height = 0.7623691077171655;
    msg.satellites = 222U;
    msg.cog = 0.7593567364721938;
    msg.sog = 0.7099316090484531;
    msg.hdop = 0.19540687526767941;
    msg.vdop = 0.9014245494900098;
    msg.hacc = 0.4844846787553797;
    msg.vacc = 0.32141926635279117;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.33018043598198077);
    msg.setSource(53822U);
    msg.setSourceEntity(160U);
    msg.setDestination(30391U);
    msg.setDestinationEntity(219U);
    msg.validity = 13053U;
    msg.type = 79U;
    msg.utc_year = 17372U;
    msg.utc_month = 181U;
    msg.utc_day = 154U;
    msg.utc_time = 0.7519727467004881;
    msg.lat = 0.9757288608836845;
    msg.lon = 0.5300239553107838;
    msg.height = 0.37783736497601206;
    msg.satellites = 234U;
    msg.cog = 0.0479501704513724;
    msg.sog = 0.06666782233678781;
    msg.hdop = 0.9127716219880724;
    msg.vdop = 0.6316927230062219;
    msg.hacc = 0.18474999453875263;
    msg.vacc = 0.5072604912355372;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.418855816039333);
    msg.setSource(46973U);
    msg.setSourceEntity(108U);
    msg.setDestination(38407U);
    msg.setDestinationEntity(46U);
    msg.validity = 28596U;
    msg.type = 222U;
    msg.utc_year = 19033U;
    msg.utc_month = 139U;
    msg.utc_day = 38U;
    msg.utc_time = 0.34326457077391137;
    msg.lat = 0.5744836381892001;
    msg.lon = 0.006602218147161221;
    msg.height = 0.44875822124758824;
    msg.satellites = 162U;
    msg.cog = 0.25726064573291474;
    msg.sog = 0.7006713875327862;
    msg.hdop = 0.12012083154917785;
    msg.vdop = 0.7482974112084313;
    msg.hacc = 0.23938291394626088;
    msg.vacc = 0.6306585395714891;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.0077142346150927965);
    msg.setSource(33292U);
    msg.setSourceEntity(184U);
    msg.setDestination(45045U);
    msg.setDestinationEntity(107U);
    msg.time = 0.7829337029128199;
    msg.phi = 0.027374259470562823;
    msg.theta = 0.627608783982321;
    msg.psi = 0.7043090068594623;
    msg.psi_magnetic = 0.8871225129406626;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.1575777367495661);
    msg.setSource(62898U);
    msg.setSourceEntity(177U);
    msg.setDestination(65090U);
    msg.setDestinationEntity(69U);
    msg.time = 0.1935758709150308;
    msg.phi = 0.3974087616202714;
    msg.theta = 0.4961773358800028;
    msg.psi = 0.25656361223410973;
    msg.psi_magnetic = 0.9484993921347787;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.220841449317147);
    msg.setSource(27267U);
    msg.setSourceEntity(212U);
    msg.setDestination(48783U);
    msg.setDestinationEntity(37U);
    msg.time = 0.5128908882441948;
    msg.phi = 0.7607651886639862;
    msg.theta = 0.6336965052021571;
    msg.psi = 0.4226180633208838;
    msg.psi_magnetic = 0.07038782820939826;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.5871945104849229);
    msg.setSource(30980U);
    msg.setSourceEntity(253U);
    msg.setDestination(64233U);
    msg.setDestinationEntity(12U);
    msg.time = 0.42270419865395614;
    msg.x = 0.8808071326476062;
    msg.y = 0.7162133579081047;
    msg.z = 0.7920269153526981;
    msg.timestep = 0.5331581640373304;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.9720813875058862);
    msg.setSource(42836U);
    msg.setSourceEntity(230U);
    msg.setDestination(3901U);
    msg.setDestinationEntity(52U);
    msg.time = 0.641293340304538;
    msg.x = 0.6093443178209397;
    msg.y = 0.5818498251905073;
    msg.z = 0.1584847205294304;
    msg.timestep = 0.14632158545337948;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.7498718367119057);
    msg.setSource(64902U);
    msg.setSourceEntity(215U);
    msg.setDestination(20594U);
    msg.setDestinationEntity(213U);
    msg.time = 0.9691057661025829;
    msg.x = 0.7775127121220268;
    msg.y = 0.37642937739438376;
    msg.z = 0.47499537381635215;
    msg.timestep = 0.6939457488302279;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.9980515417823145);
    msg.setSource(37974U);
    msg.setSourceEntity(55U);
    msg.setDestination(33964U);
    msg.setDestinationEntity(40U);
    msg.time = 0.08030120278238773;
    msg.x = 0.8310338653217488;
    msg.y = 0.5828467206567547;
    msg.z = 0.839601916532573;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.9913485838386183);
    msg.setSource(54364U);
    msg.setSourceEntity(202U);
    msg.setDestination(55781U);
    msg.setDestinationEntity(239U);
    msg.time = 0.7424930832053975;
    msg.x = 0.13448455386195546;
    msg.y = 0.41339344865336924;
    msg.z = 0.8750851876230401;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.024566286085481726);
    msg.setSource(3365U);
    msg.setSourceEntity(127U);
    msg.setDestination(35260U);
    msg.setDestinationEntity(134U);
    msg.time = 0.08529419382763959;
    msg.x = 0.09024553987086625;
    msg.y = 0.08805771819986963;
    msg.z = 0.03216013883394897;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.5232124593737342);
    msg.setSource(3131U);
    msg.setSourceEntity(26U);
    msg.setDestination(61978U);
    msg.setDestinationEntity(249U);
    msg.time = 0.14293773939521837;
    msg.x = 0.18646230644035333;
    msg.y = 0.6762107384770966;
    msg.z = 0.40926462743740477;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.9761277785330639);
    msg.setSource(25661U);
    msg.setSourceEntity(247U);
    msg.setDestination(27664U);
    msg.setDestinationEntity(10U);
    msg.time = 0.7531009940291381;
    msg.x = 0.663741215904731;
    msg.y = 0.12749666754944355;
    msg.z = 0.6963587696884775;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.6213069999624024);
    msg.setSource(18220U);
    msg.setSourceEntity(85U);
    msg.setDestination(38726U);
    msg.setDestinationEntity(68U);
    msg.time = 0.9792820781586424;
    msg.x = 0.15481724890906712;
    msg.y = 0.5535134367392605;
    msg.z = 0.22998301335468951;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.3157820832628958);
    msg.setSource(14525U);
    msg.setSourceEntity(157U);
    msg.setDestination(63154U);
    msg.setDestinationEntity(92U);
    msg.time = 0.5336556634044334;
    msg.x = 0.15113562580474782;
    msg.y = 0.13895492551686028;
    msg.z = 0.45901875975785755;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.16269587325191204);
    msg.setSource(57295U);
    msg.setSourceEntity(238U);
    msg.setDestination(32401U);
    msg.setDestinationEntity(100U);
    msg.time = 0.7463496584789989;
    msg.x = 0.9548855813373031;
    msg.y = 0.18946199894934246;
    msg.z = 0.44296163181740666;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.7917062081444749);
    msg.setSource(32267U);
    msg.setSourceEntity(128U);
    msg.setDestination(23636U);
    msg.setDestinationEntity(131U);
    msg.time = 0.56967585110778;
    msg.x = 0.9726473662026291;
    msg.y = 0.2913853236330508;
    msg.z = 0.6664211949536651;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.28038495227080973);
    msg.setSource(3104U);
    msg.setSourceEntity(140U);
    msg.setDestination(5140U);
    msg.setDestinationEntity(212U);
    msg.validity = 115U;
    msg.x = 0.23910663878722227;
    msg.y = 0.95207936104611;
    msg.z = 0.2344078098985507;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.5733388547837113);
    msg.setSource(29754U);
    msg.setSourceEntity(44U);
    msg.setDestination(62318U);
    msg.setDestinationEntity(76U);
    msg.validity = 132U;
    msg.x = 0.8981458712023792;
    msg.y = 0.5095945643222218;
    msg.z = 0.8789088172862661;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.2045888023950011);
    msg.setSource(10871U);
    msg.setSourceEntity(127U);
    msg.setDestination(61456U);
    msg.setDestinationEntity(64U);
    msg.validity = 99U;
    msg.x = 0.636525284024873;
    msg.y = 0.37614453235350453;
    msg.z = 0.9664486248061832;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.7468207744271232);
    msg.setSource(19795U);
    msg.setSourceEntity(20U);
    msg.setDestination(8504U);
    msg.setDestinationEntity(62U);
    msg.validity = 91U;
    msg.x = 0.06490331436394925;
    msg.y = 0.08968208869151684;
    msg.z = 0.2891583103811707;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.7680050286090607);
    msg.setSource(52987U);
    msg.setSourceEntity(210U);
    msg.setDestination(17366U);
    msg.setDestinationEntity(154U);
    msg.validity = 196U;
    msg.x = 0.33074808748686524;
    msg.y = 0.9953866437831823;
    msg.z = 0.8907798969867552;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.813360874278145);
    msg.setSource(32204U);
    msg.setSourceEntity(133U);
    msg.setDestination(55710U);
    msg.setDestinationEntity(244U);
    msg.validity = 192U;
    msg.x = 0.9405424345137097;
    msg.y = 0.891267100695556;
    msg.z = 0.589848655442156;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.39346673231048857);
    msg.setSource(12790U);
    msg.setSourceEntity(155U);
    msg.setDestination(22504U);
    msg.setDestinationEntity(245U);
    msg.time = 0.5458157021792505;
    msg.x = 0.6807222662476926;
    msg.y = 0.33462781966928046;
    msg.z = 0.7882193450926008;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.5693269208168357);
    msg.setSource(1105U);
    msg.setSourceEntity(114U);
    msg.setDestination(50227U);
    msg.setDestinationEntity(30U);
    msg.time = 0.07916004819657829;
    msg.x = 0.9910047203372357;
    msg.y = 0.2756265570142731;
    msg.z = 0.5982924284537581;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.3251338675388348);
    msg.setSource(23802U);
    msg.setSourceEntity(191U);
    msg.setDestination(47615U);
    msg.setDestinationEntity(238U);
    msg.time = 0.05151687250926573;
    msg.x = 0.24462363848104052;
    msg.y = 0.6618229727498842;
    msg.z = 0.10932930654643269;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.7999677646320521);
    msg.setSource(6075U);
    msg.setSourceEntity(243U);
    msg.setDestination(16406U);
    msg.setDestinationEntity(103U);
    msg.validity = 215U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.5302959853419649;
    tmp_msg_0.y = 0.8654781279192982;
    tmp_msg_0.z = 0.052998561652255916;
    tmp_msg_0.phi = 0.7057765369812489;
    tmp_msg_0.theta = 0.8484136470255522;
    tmp_msg_0.psi = 0.45685514282234374;
    msg.location.push_back(tmp_msg_0);
    msg.value = 0.11720091569395397;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.05574722311170599);
    msg.setSource(9736U);
    msg.setSourceEntity(109U);
    msg.setDestination(481U);
    msg.setDestinationEntity(223U);
    msg.validity = 151U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.7295862941189826;
    tmp_msg_0.y = 0.6339287850668329;
    tmp_msg_0.z = 0.16378202774376682;
    tmp_msg_0.phi = 0.25607191772396143;
    tmp_msg_0.theta = 0.1983902688401583;
    tmp_msg_0.psi = 0.7770057581931321;
    msg.location.push_back(tmp_msg_0);
    IMC::BeamConfig tmp_msg_1;
    tmp_msg_1.beam_width = 0.3347777529231759;
    tmp_msg_1.beam_height = 0.5789849335453969;
    msg.beam_config.push_back(tmp_msg_1);
    msg.value = 0.03963408210740427;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.4910680724412353);
    msg.setSource(46921U);
    msg.setSourceEntity(118U);
    msg.setDestination(48424U);
    msg.setDestinationEntity(11U);
    msg.validity = 248U;
    msg.value = 0.9577935969175344;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.3079224888754968);
    msg.setSource(44206U);
    msg.setSourceEntity(163U);
    msg.setDestination(6914U);
    msg.setDestinationEntity(104U);
    msg.time = 0.3337874529513237;
    msg.value = 0.3401422699858231;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.009464131840508538);
    msg.setSource(8647U);
    msg.setSourceEntity(177U);
    msg.setDestination(55354U);
    msg.setDestinationEntity(103U);
    msg.time = 0.37720656633107863;
    msg.value = 0.7746649033943127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.9446329718910474);
    msg.setSource(1530U);
    msg.setSourceEntity(52U);
    msg.setDestination(38958U);
    msg.setDestinationEntity(231U);
    msg.time = 0.7923038973455995;
    msg.value = 0.08878357787500935;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.4822948621149614);
    msg.setSource(48290U);
    msg.setSourceEntity(214U);
    msg.setDestination(6352U);
    msg.setDestinationEntity(111U);
    msg.value = 0.5230570881023958;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.35902823420943075);
    msg.setSource(42555U);
    msg.setSourceEntity(198U);
    msg.setDestination(21560U);
    msg.setDestinationEntity(250U);
    msg.value = 0.0908139343469182;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.5579486528502455);
    msg.setSource(40860U);
    msg.setSourceEntity(214U);
    msg.setDestination(52793U);
    msg.setDestinationEntity(78U);
    msg.value = 0.34226706807205876;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.42412044816347383);
    msg.setSource(17975U);
    msg.setSourceEntity(238U);
    msg.setDestination(62329U);
    msg.setDestinationEntity(21U);
    msg.value = 0.1446336543591592;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.48559197900014806);
    msg.setSource(56125U);
    msg.setSourceEntity(247U);
    msg.setDestination(27312U);
    msg.setDestinationEntity(27U);
    msg.value = 0.8544830679122127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.5745226609329191);
    msg.setSource(35625U);
    msg.setSourceEntity(201U);
    msg.setDestination(16597U);
    msg.setDestinationEntity(158U);
    msg.value = 0.731254039928676;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.003506596095193437);
    msg.setSource(46456U);
    msg.setSourceEntity(212U);
    msg.setDestination(21541U);
    msg.setDestinationEntity(116U);
    msg.value = 0.22167126552228766;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.4912663924504045);
    msg.setSource(14629U);
    msg.setSourceEntity(251U);
    msg.setDestination(38396U);
    msg.setDestinationEntity(163U);
    msg.value = 0.5232122667170374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.08419967992225019);
    msg.setSource(62498U);
    msg.setSourceEntity(208U);
    msg.setDestination(6155U);
    msg.setDestinationEntity(87U);
    msg.value = 0.0963952322471131;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.607726678928764);
    msg.setSource(9756U);
    msg.setSourceEntity(161U);
    msg.setDestination(57792U);
    msg.setDestinationEntity(36U);
    msg.value = 0.4284511940400568;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.18582629732619627);
    msg.setSource(52331U);
    msg.setSourceEntity(97U);
    msg.setDestination(15334U);
    msg.setDestinationEntity(237U);
    msg.value = 0.4999907517488652;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.8174404324978134);
    msg.setSource(61287U);
    msg.setSourceEntity(17U);
    msg.setDestination(9031U);
    msg.setDestinationEntity(45U);
    msg.value = 0.25456914226845495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.5471226703131705);
    msg.setSource(186U);
    msg.setSourceEntity(20U);
    msg.setDestination(27180U);
    msg.setDestinationEntity(111U);
    msg.value = 0.018201343122781655;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.6702310529942931);
    msg.setSource(59799U);
    msg.setSourceEntity(234U);
    msg.setDestination(48248U);
    msg.setDestinationEntity(150U);
    msg.value = 0.7584813965067254;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.8938212410280344);
    msg.setSource(61953U);
    msg.setSourceEntity(28U);
    msg.setDestination(11182U);
    msg.setDestinationEntity(116U);
    msg.value = 0.7632208311908945;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.5911430074048216);
    msg.setSource(48936U);
    msg.setSourceEntity(24U);
    msg.setDestination(58562U);
    msg.setDestinationEntity(107U);
    msg.value = 0.24525144830038192;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.6332530290095914);
    msg.setSource(45692U);
    msg.setSourceEntity(220U);
    msg.setDestination(18147U);
    msg.setDestinationEntity(170U);
    msg.value = 0.8746465858837051;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.3966175589622549);
    msg.setSource(62895U);
    msg.setSourceEntity(43U);
    msg.setDestination(51866U);
    msg.setDestinationEntity(76U);
    msg.value = 0.8669112340970172;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.31686928055080366);
    msg.setSource(9313U);
    msg.setSourceEntity(234U);
    msg.setDestination(16819U);
    msg.setDestinationEntity(39U);
    msg.value = 0.2868360887772057;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.958876063598506);
    msg.setSource(59103U);
    msg.setSourceEntity(206U);
    msg.setDestination(56616U);
    msg.setDestinationEntity(149U);
    msg.value = 0.41797820572521915;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.8829359913461349);
    msg.setSource(43919U);
    msg.setSourceEntity(216U);
    msg.setDestination(37814U);
    msg.setDestinationEntity(107U);
    msg.value = 0.230542846762267;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.053038651081456334);
    msg.setSource(25250U);
    msg.setSourceEntity(247U);
    msg.setDestination(24471U);
    msg.setDestinationEntity(6U);
    msg.direction = 0.4155177033152101;
    msg.speed = 0.22697040721441075;
    msg.turbulence = 0.1501527576420949;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.4998420593059756);
    msg.setSource(35160U);
    msg.setSourceEntity(240U);
    msg.setDestination(58237U);
    msg.setDestinationEntity(85U);
    msg.direction = 0.13794609201595798;
    msg.speed = 0.3052773890956386;
    msg.turbulence = 0.8143910329437566;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.4972493704107618);
    msg.setSource(54805U);
    msg.setSourceEntity(249U);
    msg.setDestination(64764U);
    msg.setDestinationEntity(190U);
    msg.direction = 0.12139948667041844;
    msg.speed = 0.4737544265865291;
    msg.turbulence = 0.6251384097026887;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.983728425716014);
    msg.setSource(37961U);
    msg.setSourceEntity(69U);
    msg.setDestination(33994U);
    msg.setDestinationEntity(179U);
    msg.value = 0.770723238583848;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.3069753589834394);
    msg.setSource(22889U);
    msg.setSourceEntity(39U);
    msg.setDestination(429U);
    msg.setDestinationEntity(86U);
    msg.value = 0.8276822299363763;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.27730124342554396);
    msg.setSource(5235U);
    msg.setSourceEntity(153U);
    msg.setDestination(32924U);
    msg.setDestinationEntity(152U);
    msg.value = 0.006546858407790568;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.5531302302550256);
    msg.setSource(17256U);
    msg.setSourceEntity(230U);
    msg.setDestination(8404U);
    msg.setDestinationEntity(234U);
    msg.value.assign("TQPFGIRJKYWSLNYBUIOMIGZTYWREZFPBCUAQZFWIEFSHSHWTMDGRLINDXVLBYLGMUBKFYMPVDJWQPOGIPPNXSXZNJYVZXWFCVKVDHBGZGTPIUCIFAOMKCPTLJAKEWYSQFCKYUQSOAMJRQSQLUQGARLTQSXOIMPTXEFHNBLWSCWTUXXBBXONIJXRNWCCJOAMUAHUEOUDAVEESHKZBKDZDVHGEJLVCOJDQTMGFDKRHVRRHEOBRZVNYCKHDL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.4836896925281572);
    msg.setSource(2641U);
    msg.setSourceEntity(102U);
    msg.setDestination(49614U);
    msg.setDestinationEntity(45U);
    msg.value.assign("THWOHHDDGIYJJHESTVBXXHLFTGVBRSJXRKAUIVARMXYOJCNVUXPPPWHYTPCODDCMGPSEIDLKCACHZLKANBFLIKRGIFZWLYGXXNKZHUCOEOXSEDNQTFRVFAJVFKABULGUARAEMZUZIZSYQOSICXSGYCMCPPMEOQVUVMHWQQOMTRTNBNBFLTNQQWJREHJLJKDNFQZPKVZGWUXBYWAMYKBLIFRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.4820607259522641);
    msg.setSource(6910U);
    msg.setSourceEntity(166U);
    msg.setDestination(34140U);
    msg.setDestinationEntity(96U);
    msg.value.assign("DNYWEMCTRGYFDQPYZXOLWUFPIKKLXJNJFBEMDAXVVJHOVSCRJJTESKCANCBZPVDUQLEVZKQJTIMNMIKAWKXOXWBCKYAFFGTIMWDHDPTMPEPBUFRRSAUIPAQAXPCCYFZMXIVDSJNGYOUTGOTHMPMOGVYOUR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.28477464508578465);
    msg.setSource(49311U);
    msg.setSourceEntity(101U);
    msg.setDestination(681U);
    msg.setDestinationEntity(222U);
    const signed char tmp_msg_0[] = {45, -50, 47, 48, -79, 121, -103, -49, -16, -117, -92, 69, 27, -26, 86, -87, -6, 125, 126, 115, -108, 79, 74, 37, -28, -50, -43, -95, -81, 66, 79, -74, 125, -24, 118, -106, 124, -22, 55, 98, -10, 114, -54, -111, -70, 22, 104, 86, -128, -118, 100, -128, -119, -28, -46, -9, 33, 65, -85, -17, -117, 43, -33, 124, -73, 94, 45, -68, 78, -67, -90, 120, 115, -118, -55, 17, 64, 36, 14, -25, 77, -84, 95, 56, -109, -19, -26, 110, 104, -93, 112, -73, 35, -40, 22, 101, -99, -82, -75, -65, 53, -94, -11, -110, -68, 5, -75, 70, 63};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.9062034477591899);
    msg.setSource(16794U);
    msg.setSourceEntity(84U);
    msg.setDestination(12909U);
    msg.setDestinationEntity(251U);
    const signed char tmp_msg_0[] = {67, 104, 20, -14, -54, 74, 39, 116, -67, 90, 72, 46, 58, -109, -29, 86, 86, -26, -6, 48, 43, -32, 45, 72, 107, 14, -33, -26, 77, -110, -98, -61, -128, -90, -53, 24, -50, -68, 91, 71, 83, 16, -126, 110, 108, -59, 113, 28, -110, 100, -89, 112, -37, 46, 68, 59, 17, -109, 52, -27, -118, 73, 94, -127, 54, -36, -6, -108, -124, 89, -48, 99, 107, -57, -108, -126, -77, 10, -17, -112, -46, -54, 0, -16, -21, 87, -66, 24, -6, 112, -84, 45, -55, -77, 60, -63, 76, -52, 116, -18, 23, 30, -44, -62, -7, -51, -24, 45, 20, 4, 43, 123, -37, -84};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.6470385146021655);
    msg.setSource(64238U);
    msg.setSourceEntity(10U);
    msg.setDestination(33361U);
    msg.setDestinationEntity(191U);
    const signed char tmp_msg_0[] = {105, 44, -119, 12, 50, 75, 93, 24, -85, -71, -35, -97, 38, 73, 86, -2, 99, -112, -73};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.40829939451994257);
    msg.setSource(30402U);
    msg.setSourceEntity(252U);
    msg.setDestination(25200U);
    msg.setDestinationEntity(222U);
    msg.value = 0.6418475921385299;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.549556392798957);
    msg.setSource(36324U);
    msg.setSourceEntity(201U);
    msg.setDestination(21160U);
    msg.setDestinationEntity(154U);
    msg.value = 0.4136274550061072;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.557614753208274);
    msg.setSource(34106U);
    msg.setSourceEntity(24U);
    msg.setDestination(48218U);
    msg.setDestinationEntity(243U);
    msg.value = 0.7520975056621689;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.6556468978254568);
    msg.setSource(33036U);
    msg.setSourceEntity(124U);
    msg.setDestination(62548U);
    msg.setDestinationEntity(221U);
    msg.type = 80U;
    msg.frequency = 1240050175U;
    msg.min_range = 37466U;
    msg.max_range = 65250U;
    msg.bits_per_point = 135U;
    msg.scale_factor = 0.19486110889002328;
    const signed char tmp_msg_0[] = {81, -18, 3, -29, 76, 61, -61, 48, 47, 26, -17, -14, 74, 6, 78, 14, 5, 45, 122, -120, 115, -80, -63, -2, 56, -39, -28, -103, 35, -61, -36, -6, 125, 87, -4, -126, -75, -113, -12, 6, -91, -120, -108, 34, 118, -92, -119, 46, 44, -70, 47, 95, -70, -48, 105, -95, 74, 18, -32, 42, 110, 32, -54, 32, 118, -122, -97, 113, -19, -98, 26, 33, 94, -65, -2, 23, -113, -29, 109, -25, -89, -70, -46, 66, -85, 26, 113, -20, -58, -79, 50, -29, -31, -60, -37, 33, -49, -14, 60, 9, 77, -90, 71, 122, -106, -58, -88, 77, -75, 75, -121, -30, 106, -93, -119, 10, -10, 90, -99, 25, 112, -8, -95, -127, 4, -70, 75, 35, 48, -69, -96, -78, -114, -33, 93, 92, -17, 34, -15, 96, -49, -102, -64, -8, -103, 24, 106, 80, -96, -48, 122, 102, -87, -99, -123, 103, 46, 90, 84, 4, 103, 88, -111, 26, -3, -28, 58, -115, -73, 21, 88, 112, 33, 124, 84, 78, -48, 41, -10, -91, -40, -100, -106, -27, -31, 85, -30, 48, 115, -126, 50, -1, -119, 51, 49, -125, 34, 125, 93, -33, -87, -127, -97, -86, 64, 39, 122, 98, -108, 30, -45, 109, 98, 56, -100, 114, 109, 59, -15, 55, -126, -57, -30, 20, 12, 1, 120, 16, 119, -108, 121, 39, -123, -8};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.5036902364638985);
    msg.setSource(64332U);
    msg.setSourceEntity(116U);
    msg.setDestination(13467U);
    msg.setDestinationEntity(249U);
    msg.type = 79U;
    msg.frequency = 3490336872U;
    msg.min_range = 39512U;
    msg.max_range = 48594U;
    msg.bits_per_point = 88U;
    msg.scale_factor = 0.6082690774372699;
    const signed char tmp_msg_0[] = {54, -64, -36, -108, 21, -50, -62, -53, 28, -86, -110, -55, 20, 95, 34, -89, -81, 125, 115, 87, 81, -104, -41, 46, -73, -104, -95, 65, 51, 100, -60, -8, 45, -119, 59, 109, -72, -87, 59, -25, -47, -20, -55, 94, 108, -32, -95, -111, 101, -12, -82, 119, -3, 61, -37, 0, 10, 10, 119, -39, -21, -105, -59, -108, 26, -106, -15, 110, -60, 105, 36, 123, 84, -114, 124, 88, 28, 26, -4, 28, 64, -92, 57, 44, -80, -77, 99, 109, -112, -30, -110, -55, -118, 76, -63, -29, -40, -23, -92, -70, -126, -1, 40, 56, -107, -46, -117, 119, 63, 80, 54, 22, 12, -118, -56, -112, -32, -58, -16, 32, 121, 62, 57, 15, 73, -85, -60, -127, 38, 112, 74, -79, 32, 19, -102, -27, 22, -12, 102, -42, -114, 55, 110, -83, -31, 21, 18, 87, 123, 33, -8, 53, -122, -13, 103, 58, 68, 60, 29, 63, 57, 18, 95, 105, -58, -97, 93, -53, -68, 66, -11, 103, 25, 11, 103, -99, -65, 81, 21, -62, 107, -106, -47, -35, -117, 75, 85, -58, 45, 43, -74, 27, 104, 70, 74, -106, 44, 80, -25, 99, 90, 58, -24, 99, -62, -22, 100, -58, -105, 18, -5, -12, 66, 12, 19, -12, -32, 18, 39, 72, 69, -113, -49, 67, -112, -83, 73, -95, 40, -16, 23};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.9007360371936506);
    msg.setSource(17486U);
    msg.setSourceEntity(34U);
    msg.setDestination(34866U);
    msg.setDestinationEntity(46U);
    msg.type = 26U;
    msg.frequency = 120462062U;
    msg.min_range = 4218U;
    msg.max_range = 6082U;
    msg.bits_per_point = 100U;
    msg.scale_factor = 0.3892462612947787;
    const signed char tmp_msg_0[] = {126, -83, -5, -111, -4, -121, 73, 20, -69, 61, 15, -98, -42, -40, 21, -50, -102, 27, 114, 59, 7, 36, 89, -44, -73, -53, -80, 15, -22, -113, 124, -50, 11, 63, -50, -119, -101, 98, -101, -39, -90, 85, 66, -83, -15, 86, 121, 43, -116, -29, 124, -116, -115, 31, 57, 124, -109, -58, 15, -72, 13, -61, -84, 111, 62, 113, -64, -94, 79, 15, -82, 108, 45, 102, -112, 75, 81, 41, 5, -42, -80, 67, 67, 79, 37, 66, -120, -104, -2, 102, -39, -125, 22, -69, -65};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.23682886031169403);
    msg.setSource(17576U);
    msg.setSourceEntity(221U);
    msg.setDestination(12350U);
    msg.setDestinationEntity(80U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.8324262276050929);
    msg.setSource(27424U);
    msg.setSourceEntity(80U);
    msg.setDestination(52353U);
    msg.setDestinationEntity(120U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.9353118487321029);
    msg.setSource(55057U);
    msg.setSourceEntity(173U);
    msg.setDestination(20514U);
    msg.setDestinationEntity(27U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.9906543191942215);
    msg.setSource(33150U);
    msg.setSourceEntity(195U);
    msg.setDestination(64932U);
    msg.setDestinationEntity(120U);
    msg.op = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.22226813664609235);
    msg.setSource(53819U);
    msg.setSourceEntity(179U);
    msg.setDestination(52257U);
    msg.setDestinationEntity(240U);
    msg.op = 96U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.48218932807443404);
    msg.setSource(43317U);
    msg.setSourceEntity(203U);
    msg.setDestination(41385U);
    msg.setDestinationEntity(167U);
    msg.op = 152U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.44665665755130324);
    msg.setSource(17809U);
    msg.setSourceEntity(188U);
    msg.setDestination(10527U);
    msg.setDestinationEntity(196U);
    msg.value = 0.2066773789833526;
    msg.confidence = 0.7071434556354054;
    msg.opmodes.assign("HNYTEFWBTQNBRDTEGUSRNCUNQBOYHCYLWOJNXMIVDRKPJPKXIZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.02092047001249664);
    msg.setSource(63714U);
    msg.setSourceEntity(94U);
    msg.setDestination(28228U);
    msg.setDestinationEntity(79U);
    msg.value = 0.861611331407476;
    msg.confidence = 0.7890556383304789;
    msg.opmodes.assign("LVOTQSBGZZVQQZGHIZWKYFIAWYUAAQOFYZAXSDFJKYWLMFRQBSIEZTXOFYJFRCPGRGHULR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.2583272856731781);
    msg.setSource(2793U);
    msg.setSourceEntity(155U);
    msg.setDestination(23210U);
    msg.setDestinationEntity(122U);
    msg.value = 0.555367802569688;
    msg.confidence = 0.11830554820118644;
    msg.opmodes.assign("WTIWBIJGZXOBQJIDSFIODMXSXFJGAVFPAUPMUMQAXRCOAVQPCWFFBRTCZTIBKRZIEUPBKGS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.17659065381338768);
    msg.setSource(32762U);
    msg.setSourceEntity(90U);
    msg.setDestination(28769U);
    msg.setDestinationEntity(83U);
    msg.itow = 1716280309U;
    msg.lat = 0.06397530744923352;
    msg.lon = 0.07082020927327626;
    msg.height_ell = 0.5556960430243699;
    msg.height_sea = 0.30679441470063673;
    msg.hacc = 0.7577095459269458;
    msg.vacc = 0.1414846184447366;
    msg.vel_n = 0.04083667303769878;
    msg.vel_e = 0.6429574204513793;
    msg.vel_d = 0.009567155916920034;
    msg.speed = 0.7286474737650398;
    msg.gspeed = 0.9975886556040366;
    msg.heading = 0.7533154954411679;
    msg.sacc = 0.48341279116154545;
    msg.cacc = 0.7837806434717073;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.39665801876536544);
    msg.setSource(7952U);
    msg.setSourceEntity(186U);
    msg.setDestination(52026U);
    msg.setDestinationEntity(9U);
    msg.itow = 3855983048U;
    msg.lat = 0.769447093771691;
    msg.lon = 0.41600955550312346;
    msg.height_ell = 0.10538436681114038;
    msg.height_sea = 0.46016572855343973;
    msg.hacc = 0.8581327296854128;
    msg.vacc = 0.00840455519271488;
    msg.vel_n = 0.10787381560169806;
    msg.vel_e = 0.9751606937775581;
    msg.vel_d = 0.8576983628980068;
    msg.speed = 0.6816745491706016;
    msg.gspeed = 0.049904829848583465;
    msg.heading = 0.1145625762371989;
    msg.sacc = 0.3105064279576175;
    msg.cacc = 0.21970824693738156;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.5430009682941976);
    msg.setSource(50161U);
    msg.setSourceEntity(238U);
    msg.setDestination(44074U);
    msg.setDestinationEntity(70U);
    msg.itow = 1999500082U;
    msg.lat = 0.7922354997076806;
    msg.lon = 0.732035171455401;
    msg.height_ell = 0.30139245650116253;
    msg.height_sea = 0.22305799205988774;
    msg.hacc = 0.38836465111724994;
    msg.vacc = 0.5897673124135046;
    msg.vel_n = 0.21484215270704698;
    msg.vel_e = 0.9748022216193284;
    msg.vel_d = 0.3973629747951374;
    msg.speed = 0.24534614736074778;
    msg.gspeed = 0.5426638323833487;
    msg.heading = 0.8154550255586178;
    msg.sacc = 0.4760453508551171;
    msg.cacc = 0.45349318279143835;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.9136839629619168);
    msg.setSource(25106U);
    msg.setSourceEntity(152U);
    msg.setDestination(7676U);
    msg.setDestinationEntity(205U);
    msg.id = 158U;
    msg.value = 0.9608067987336179;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.5282716197079192);
    msg.setSource(41769U);
    msg.setSourceEntity(172U);
    msg.setDestination(25914U);
    msg.setDestinationEntity(31U);
    msg.id = 21U;
    msg.value = 0.46701645783344403;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.7091100279461292);
    msg.setSource(2671U);
    msg.setSourceEntity(5U);
    msg.setDestination(19336U);
    msg.setDestinationEntity(55U);
    msg.id = 40U;
    msg.value = 0.8974133594725553;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.555778120662476);
    msg.setSource(4016U);
    msg.setSourceEntity(233U);
    msg.setDestination(56545U);
    msg.setDestinationEntity(118U);
    msg.x = 0.3806776841078886;
    msg.y = 0.283447845193151;
    msg.z = 0.726650082833381;
    msg.phi = 0.38515250127802425;
    msg.theta = 0.10439113392393862;
    msg.psi = 0.2565331056978587;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.008563585955252306);
    msg.setSource(9782U);
    msg.setSourceEntity(226U);
    msg.setDestination(17437U);
    msg.setDestinationEntity(150U);
    msg.x = 0.6432160009926473;
    msg.y = 0.2741250504303472;
    msg.z = 0.23879459291378835;
    msg.phi = 0.9391324114213644;
    msg.theta = 0.8664747341037594;
    msg.psi = 0.7671876971755205;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.2984620048247003);
    msg.setSource(37933U);
    msg.setSourceEntity(88U);
    msg.setDestination(3832U);
    msg.setDestinationEntity(125U);
    msg.x = 0.27443136360775855;
    msg.y = 0.18533818649507317;
    msg.z = 0.06041574006700723;
    msg.phi = 0.13396249790804848;
    msg.theta = 0.737504914259487;
    msg.psi = 0.11125648245488862;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.9823173016149019);
    msg.setSource(1489U);
    msg.setSourceEntity(115U);
    msg.setDestination(18123U);
    msg.setDestinationEntity(5U);
    msg.beam_width = 0.6090636469545663;
    msg.beam_height = 0.37028089348447346;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.8264924103520928);
    msg.setSource(64559U);
    msg.setSourceEntity(74U);
    msg.setDestination(17509U);
    msg.setDestinationEntity(189U);
    msg.beam_width = 0.8837281634803555;
    msg.beam_height = 0.5328797530202734;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.6350885460588089);
    msg.setSource(35022U);
    msg.setSourceEntity(224U);
    msg.setDestination(61523U);
    msg.setDestinationEntity(23U);
    msg.beam_width = 0.23720295145086956;
    msg.beam_height = 0.21956738268894227;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.9452625392057459);
    msg.setSource(17260U);
    msg.setSourceEntity(139U);
    msg.setDestination(34380U);
    msg.setDestinationEntity(175U);
    msg.sane = 88U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.2193631760036956);
    msg.setSource(20769U);
    msg.setSourceEntity(59U);
    msg.setDestination(29431U);
    msg.setDestinationEntity(16U);
    msg.sane = 149U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.9919261888462814);
    msg.setSource(48340U);
    msg.setSourceEntity(230U);
    msg.setDestination(51993U);
    msg.setDestinationEntity(253U);
    msg.sane = 199U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.9050177934064612);
    msg.setSource(26560U);
    msg.setSourceEntity(72U);
    msg.setDestination(53481U);
    msg.setDestinationEntity(183U);
    msg.value = 0.7440715167887396;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.8949684446834799);
    msg.setSource(32299U);
    msg.setSourceEntity(56U);
    msg.setDestination(28859U);
    msg.setDestinationEntity(63U);
    msg.value = 0.02532819512864115;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.2707844421945189);
    msg.setSource(49828U);
    msg.setSourceEntity(251U);
    msg.setDestination(27352U);
    msg.setDestinationEntity(218U);
    msg.value = 0.6791120958153734;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.0014713548002937005);
    msg.setSource(46111U);
    msg.setSourceEntity(161U);
    msg.setDestination(61339U);
    msg.setDestinationEntity(205U);
    msg.value = 0.025734363607821664;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.34936074254368676);
    msg.setSource(16041U);
    msg.setSourceEntity(78U);
    msg.setDestination(50756U);
    msg.setDestinationEntity(8U);
    msg.value = 0.043657603297518;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.7249679556751124);
    msg.setSource(42092U);
    msg.setSourceEntity(210U);
    msg.setDestination(4701U);
    msg.setDestinationEntity(200U);
    msg.value = 0.30460811169720736;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.13989445662383837);
    msg.setSource(8683U);
    msg.setSourceEntity(168U);
    msg.setDestination(53466U);
    msg.setDestinationEntity(217U);
    msg.value = 0.9608342772040711;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.46739103906584256);
    msg.setSource(38396U);
    msg.setSourceEntity(252U);
    msg.setDestination(16664U);
    msg.setDestinationEntity(221U);
    msg.value = 0.36845538978645287;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.8502022460169174);
    msg.setSource(63854U);
    msg.setSourceEntity(145U);
    msg.setDestination(14352U);
    msg.setDestinationEntity(141U);
    msg.value = 0.9150151351051167;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.6678951886306937);
    msg.setSource(13134U);
    msg.setSourceEntity(83U);
    msg.setDestination(17838U);
    msg.setDestinationEntity(237U);
    msg.value = 0.7153876544190586;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.48394341492746995);
    msg.setSource(61154U);
    msg.setSourceEntity(42U);
    msg.setDestination(17841U);
    msg.setDestinationEntity(77U);
    msg.value = 0.20605268610216165;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.9222507915105058);
    msg.setSource(46011U);
    msg.setSourceEntity(157U);
    msg.setDestination(37182U);
    msg.setDestinationEntity(97U);
    msg.value = 0.45654842527356554;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.27290148216729804);
    msg.setSource(56176U);
    msg.setSourceEntity(22U);
    msg.setDestination(47378U);
    msg.setDestinationEntity(81U);
    msg.value = 0.019424329524274975;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.011117794871829068);
    msg.setSource(22668U);
    msg.setSourceEntity(88U);
    msg.setDestination(19076U);
    msg.setDestinationEntity(239U);
    msg.value = 0.4403317830601692;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.21503508807607774);
    msg.setSource(16785U);
    msg.setSourceEntity(77U);
    msg.setDestination(57954U);
    msg.setDestinationEntity(8U);
    msg.value = 0.41411997243338305;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.08824255882964216);
    msg.setSource(36123U);
    msg.setSourceEntity(86U);
    msg.setDestination(40948U);
    msg.setDestinationEntity(68U);
    msg.value = 0.2573024687834209;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.41572069673447887);
    msg.setSource(48568U);
    msg.setSourceEntity(41U);
    msg.setDestination(56980U);
    msg.setDestinationEntity(185U);
    msg.value = 0.07007096200374574;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.892392825911358);
    msg.setSource(2163U);
    msg.setSourceEntity(247U);
    msg.setDestination(46850U);
    msg.setDestinationEntity(18U);
    msg.value = 0.25075563618212193;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.8843959527124445);
    msg.setSource(13517U);
    msg.setSourceEntity(77U);
    msg.setDestination(9840U);
    msg.setDestinationEntity(3U);
    msg.value = 0.8141459245221794;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.2223632770089654);
    msg.setSource(34050U);
    msg.setSourceEntity(211U);
    msg.setDestination(22280U);
    msg.setDestinationEntity(251U);
    msg.value = 0.07524435225914905;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.11717474050185295);
    msg.setSource(884U);
    msg.setSourceEntity(208U);
    msg.setDestination(56963U);
    msg.setDestinationEntity(92U);
    msg.value = 0.4791081694493253;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.5722079251596457);
    msg.setSource(49309U);
    msg.setSourceEntity(19U);
    msg.setDestination(7305U);
    msg.setDestinationEntity(171U);
    msg.value = 0.4726063029364075;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.3712689048326471);
    msg.setSource(2572U);
    msg.setSourceEntity(228U);
    msg.setDestination(63045U);
    msg.setDestinationEntity(76U);
    msg.value = 0.722778102591353;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.020868908385891283);
    msg.setSource(12913U);
    msg.setSourceEntity(9U);
    msg.setDestination(54993U);
    msg.setDestinationEntity(227U);
    msg.value = 0.07273687326152778;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.23478125886550916);
    msg.setSource(56423U);
    msg.setSourceEntity(211U);
    msg.setDestination(33706U);
    msg.setDestinationEntity(85U);
    msg.validity = 3580U;
    msg.type = 70U;
    msg.tow = 2085381778U;
    msg.base_lat = 0.4587056561594506;
    msg.base_lon = 0.5036107908159013;
    msg.base_height = 0.3544740932324064;
    msg.n = 0.24385425307424913;
    msg.e = 0.26264637488441156;
    msg.d = 0.4410451663067839;
    msg.v_n = 0.06445757272741515;
    msg.v_e = 0.8483224189584744;
    msg.v_d = 0.006680776023649138;
    msg.satellites = 23U;
    msg.iar_hyp = 61747U;
    msg.iar_ratio = 0.14741636769672206;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.9258375460184994);
    msg.setSource(26414U);
    msg.setSourceEntity(242U);
    msg.setDestination(41956U);
    msg.setDestinationEntity(9U);
    msg.validity = 63397U;
    msg.type = 77U;
    msg.tow = 3942503786U;
    msg.base_lat = 0.8166487020111761;
    msg.base_lon = 0.6309957504721646;
    msg.base_height = 0.538532051288515;
    msg.n = 0.04360902220095997;
    msg.e = 0.20281691128196944;
    msg.d = 0.8299720153525028;
    msg.v_n = 0.9873429339688423;
    msg.v_e = 0.5936491584066518;
    msg.v_d = 0.5582745023468256;
    msg.satellites = 222U;
    msg.iar_hyp = 50289U;
    msg.iar_ratio = 0.16826929056199214;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.9544322456399212);
    msg.setSource(45910U);
    msg.setSourceEntity(120U);
    msg.setDestination(44423U);
    msg.setDestinationEntity(67U);
    msg.validity = 50000U;
    msg.type = 4U;
    msg.tow = 1786220468U;
    msg.base_lat = 0.1670059441274505;
    msg.base_lon = 0.3594602761154615;
    msg.base_height = 0.94318816670586;
    msg.n = 0.35019102341251584;
    msg.e = 0.5974706280499037;
    msg.d = 0.3576777122376117;
    msg.v_n = 0.36390087342313104;
    msg.v_e = 0.6300480509441245;
    msg.v_d = 0.600641238128962;
    msg.satellites = 163U;
    msg.iar_hyp = 40025U;
    msg.iar_ratio = 0.43518824084061736;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.35127638959234864);
    msg.setSource(31980U);
    msg.setSourceEntity(246U);
    msg.setDestination(26515U);
    msg.setDestinationEntity(31U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.7874485915675299;
    tmp_msg_0.lon = 0.8074773581509936;
    tmp_msg_0.height = 0.2480971590793336;
    tmp_msg_0.x = 0.9740519884368434;
    tmp_msg_0.y = 0.22086701733635838;
    tmp_msg_0.z = 0.10517208229662578;
    tmp_msg_0.phi = 0.01942385726799778;
    tmp_msg_0.theta = 0.7366449178638379;
    tmp_msg_0.psi = 0.9607714136217935;
    tmp_msg_0.u = 0.15796599952077162;
    tmp_msg_0.v = 0.11763087622715152;
    tmp_msg_0.w = 0.3545171179579304;
    tmp_msg_0.vx = 0.10049579848911139;
    tmp_msg_0.vy = 0.9837433745767296;
    tmp_msg_0.vz = 0.2805898592005116;
    tmp_msg_0.p = 0.34469764782603984;
    tmp_msg_0.q = 0.5800345980781264;
    tmp_msg_0.r = 0.12628958037087368;
    tmp_msg_0.depth = 0.9582425609788634;
    tmp_msg_0.alt = 0.8296147360058675;
    msg.state.set(tmp_msg_0);
    msg.type = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.7473651642123038);
    msg.setSource(18660U);
    msg.setSourceEntity(66U);
    msg.setDestination(49306U);
    msg.setDestinationEntity(12U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.5634508029105875;
    tmp_msg_0.lon = 0.005616436524314539;
    tmp_msg_0.height = 0.4172019355379478;
    tmp_msg_0.x = 0.7079098743827161;
    tmp_msg_0.y = 0.8556870576955202;
    tmp_msg_0.z = 0.389205600224947;
    tmp_msg_0.phi = 0.6030748906146125;
    tmp_msg_0.theta = 0.0693047840025588;
    tmp_msg_0.psi = 0.32672658002205957;
    tmp_msg_0.u = 0.5131048903878298;
    tmp_msg_0.v = 0.4827285032781776;
    tmp_msg_0.w = 0.699457143553212;
    tmp_msg_0.vx = 0.2935792087985283;
    tmp_msg_0.vy = 0.28310723346858857;
    tmp_msg_0.vz = 0.1433511859027743;
    tmp_msg_0.p = 0.5298159194282308;
    tmp_msg_0.q = 0.44383674356356295;
    tmp_msg_0.r = 0.475580394529618;
    tmp_msg_0.depth = 0.17297221788350936;
    tmp_msg_0.alt = 0.5871546433044346;
    msg.state.set(tmp_msg_0);
    msg.type = 10U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.19628762536911337);
    msg.setSource(11819U);
    msg.setSourceEntity(23U);
    msg.setDestination(40184U);
    msg.setDestinationEntity(95U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.8954746160282178;
    tmp_msg_0.lon = 0.7685080679407404;
    tmp_msg_0.height = 0.1978034763495391;
    tmp_msg_0.x = 0.28186406841168565;
    tmp_msg_0.y = 0.030682977468513783;
    tmp_msg_0.z = 0.8241123329869172;
    tmp_msg_0.phi = 0.911453921913293;
    tmp_msg_0.theta = 0.15186549384945747;
    tmp_msg_0.psi = 0.21310797399822323;
    tmp_msg_0.u = 0.22084220085144168;
    tmp_msg_0.v = 0.3681764897061902;
    tmp_msg_0.w = 0.354652117786727;
    tmp_msg_0.vx = 0.8657495899742601;
    tmp_msg_0.vy = 0.6920457032114316;
    tmp_msg_0.vz = 0.6927530423810679;
    tmp_msg_0.p = 0.7870642606326628;
    tmp_msg_0.q = 0.5376221496702364;
    tmp_msg_0.r = 0.1645785442315778;
    tmp_msg_0.depth = 0.3078879695451425;
    tmp_msg_0.alt = 0.6220172783263892;
    msg.state.set(tmp_msg_0);
    msg.type = 199U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.9858801406570333);
    msg.setSource(54385U);
    msg.setSourceEntity(219U);
    msg.setDestination(2393U);
    msg.setDestinationEntity(75U);
    msg.value = 0.6298857057515994;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.4331502596838165);
    msg.setSource(59881U);
    msg.setSourceEntity(76U);
    msg.setDestination(54118U);
    msg.setDestinationEntity(148U);
    msg.value = 0.379173121271998;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.8345150115912103);
    msg.setSource(48166U);
    msg.setSourceEntity(148U);
    msg.setDestination(51896U);
    msg.setDestinationEntity(87U);
    msg.value = 0.0042980708746487295;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.30643041172234065);
    msg.setSource(10143U);
    msg.setSourceEntity(206U);
    msg.setDestination(44964U);
    msg.setDestinationEntity(137U);
    msg.value = 0.8052902399432911;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.5663159957629278);
    msg.setSource(50920U);
    msg.setSourceEntity(168U);
    msg.setDestination(3914U);
    msg.setDestinationEntity(19U);
    msg.value = 0.21599573063161748;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.9685980721721521);
    msg.setSource(1632U);
    msg.setSourceEntity(172U);
    msg.setDestination(36085U);
    msg.setDestinationEntity(244U);
    msg.value = 0.9146328900499717;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.46085947667020344);
    msg.setSource(40464U);
    msg.setSourceEntity(44U);
    msg.setDestination(24552U);
    msg.setDestinationEntity(180U);
    msg.value = 0.20491420926418125;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.6080197929557695);
    msg.setSource(58517U);
    msg.setSourceEntity(101U);
    msg.setDestination(22132U);
    msg.setDestinationEntity(247U);
    msg.value = 0.9539826580632331;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.7482697851555248);
    msg.setSource(63170U);
    msg.setSourceEntity(111U);
    msg.setDestination(33572U);
    msg.setDestinationEntity(120U);
    msg.value = 0.9162716493597528;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.5834121380512113);
    msg.setSource(60371U);
    msg.setSourceEntity(21U);
    msg.setDestination(51963U);
    msg.setDestinationEntity(81U);
    msg.value = 0.5004076584309372;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.471490473501773);
    msg.setSource(56737U);
    msg.setSourceEntity(56U);
    msg.setDestination(56829U);
    msg.setDestinationEntity(3U);
    msg.value = 0.3436028188715885;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.6205716640621859);
    msg.setSource(11048U);
    msg.setSourceEntity(34U);
    msg.setDestination(39368U);
    msg.setDestinationEntity(103U);
    msg.value = 0.49605102661358347;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.8279035947565292);
    msg.setSource(52365U);
    msg.setSourceEntity(191U);
    msg.setDestination(46100U);
    msg.setDestinationEntity(45U);
    msg.value = 0.6592914308826221;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.9959882274600419);
    msg.setSource(2500U);
    msg.setSourceEntity(206U);
    msg.setDestination(28570U);
    msg.setDestinationEntity(134U);
    msg.value = 0.4481194649726774;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.16612628284430075);
    msg.setSource(53798U);
    msg.setSourceEntity(156U);
    msg.setDestination(39219U);
    msg.setDestinationEntity(240U);
    msg.value = 0.5285874642516445;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.35063232562278535);
    msg.setSource(27224U);
    msg.setSourceEntity(6U);
    msg.setDestination(8606U);
    msg.setDestinationEntity(66U);
    msg.id = 223U;
    msg.zoom = 82U;
    msg.action = 247U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.08146591639900203);
    msg.setSource(1485U);
    msg.setSourceEntity(39U);
    msg.setDestination(5975U);
    msg.setDestinationEntity(68U);
    msg.id = 141U;
    msg.zoom = 213U;
    msg.action = 109U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.829990284979111);
    msg.setSource(56571U);
    msg.setSourceEntity(101U);
    msg.setDestination(27835U);
    msg.setDestinationEntity(59U);
    msg.id = 223U;
    msg.zoom = 43U;
    msg.action = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.80069121270474);
    msg.setSource(24710U);
    msg.setSourceEntity(11U);
    msg.setDestination(30289U);
    msg.setDestinationEntity(10U);
    msg.id = 1U;
    msg.value = 0.808624402325255;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.7875967450946171);
    msg.setSource(53267U);
    msg.setSourceEntity(156U);
    msg.setDestination(37819U);
    msg.setDestinationEntity(7U);
    msg.id = 59U;
    msg.value = 0.2765943482767045;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.6642279738983204);
    msg.setSource(16065U);
    msg.setSourceEntity(67U);
    msg.setDestination(5384U);
    msg.setDestinationEntity(241U);
    msg.id = 153U;
    msg.value = 0.9465907926254997;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.7583484459917958);
    msg.setSource(4423U);
    msg.setSourceEntity(204U);
    msg.setDestination(14622U);
    msg.setDestinationEntity(237U);
    msg.id = 6U;
    msg.value = 0.7920697095802264;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.5812196548751922);
    msg.setSource(65345U);
    msg.setSourceEntity(176U);
    msg.setDestination(8798U);
    msg.setDestinationEntity(108U);
    msg.id = 169U;
    msg.value = 0.06911276601200156;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.6876302335590458);
    msg.setSource(31471U);
    msg.setSourceEntity(67U);
    msg.setDestination(26706U);
    msg.setDestinationEntity(103U);
    msg.id = 98U;
    msg.value = 0.5673807528565002;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.8761106065096839);
    msg.setSource(26246U);
    msg.setSourceEntity(138U);
    msg.setDestination(53551U);
    msg.setDestinationEntity(70U);
    msg.id = 6U;
    msg.angle = 0.7156086058859791;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.2346188860137165);
    msg.setSource(32844U);
    msg.setSourceEntity(82U);
    msg.setDestination(25451U);
    msg.setDestinationEntity(130U);
    msg.id = 98U;
    msg.angle = 0.3009875673817437;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.13828802856936062);
    msg.setSource(46209U);
    msg.setSourceEntity(73U);
    msg.setDestination(15476U);
    msg.setDestinationEntity(22U);
    msg.id = 234U;
    msg.angle = 0.7637034987810236;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.8735285496058077);
    msg.setSource(18484U);
    msg.setSourceEntity(243U);
    msg.setDestination(20483U);
    msg.setDestinationEntity(212U);
    msg.op = 201U;
    msg.actions.assign("XZDHEUTEHRMXCKOAEBOTQRTCJUAOWDJCPEFAXOJZTXHKKYLPEWHLBBNBLVZNRSDYHEIBHXVGCUFCMUJDWULUMBGAOSEORQBNFYQJIAVHWXDVWZQTIPVKCXENLKQLKYGOLGXNEQPPGQFAAZGIIBWNFWQHJKQBZIGDJSROPDACVMCZXSMOFIRMOCGIBPYLWTASMRDUZFLGNVTKDANSYTQSZUUFSWKWRIIHJPST");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.22782001275310915);
    msg.setSource(56568U);
    msg.setSourceEntity(53U);
    msg.setDestination(51924U);
    msg.setDestinationEntity(150U);
    msg.op = 101U;
    msg.actions.assign("FPTBKCNGVNYNXUFGGSIATSFENAJVOJVOWTSGXLYQUGHGDMQSILJJBIRAEZVLYOVRRZPUHXYRWFGKOLHUIKNYSJZSLABZURHRQDFHSAAACJFXLKHXELPZUIYTYNBXEXWRIVQWMPPTKCCBEBSQQZDBNFJAUOJDEONRYBIUGSBXDMEQOKMMZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.751139506714296);
    msg.setSource(12180U);
    msg.setSourceEntity(120U);
    msg.setDestination(5061U);
    msg.setDestinationEntity(231U);
    msg.op = 169U;
    msg.actions.assign("SXIGZQCDLNBKTQAIOZCVOVHAWNZAPEXKPJTSDGEFNDTPCPKGGNBBUSQHMWCIYQLQYTHFKQHHLQBWTUVDQMHDQRSLHWALCNFMAVJIPEEGAJEVOKSORDENXGXSSCBJVCUZRPJWAUOHTKOYAPITZLUXJTXGRNYKPMFMEPMYWZWMHOTAHNBZBYMLEOYXKXJDORGBRXSU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.233711724619862);
    msg.setSource(51771U);
    msg.setSourceEntity(178U);
    msg.setDestination(53332U);
    msg.setDestinationEntity(156U);
    msg.actions.assign("JJGBXJJZBTBJRLBYEHCUOQVVNVWITDXHXFMZUYVRLLASDXFUOJYVROPDYRAEAWDOERSHMZQDWLFNHQTWMLYEFOSKKUKXKRQCZNGESMXVDQFNMKIFAZTUWSWDPJVTVANDPGBIWMBMESZVONGVXAEGIHJOWYIDXSHILOB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.8220442200889762);
    msg.setSource(42795U);
    msg.setSourceEntity(71U);
    msg.setDestination(64625U);
    msg.setDestinationEntity(194U);
    msg.actions.assign("WMNBAFRSEKBYQQVENULVWMAMECXKMSNGEDLWHJTRL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.8722108681094541);
    msg.setSource(43825U);
    msg.setSourceEntity(108U);
    msg.setDestination(48694U);
    msg.setDestinationEntity(7U);
    msg.actions.assign("KPVHZAORDCQMPYVFKQMDABPZIOATNQFSXUMKCEGQFMHYSOZVJCTEHGFMYWFYEWCYUGZOWTLUPHTLDRJZQQCOVFISVOEJDWYBXGDUHECNABRFWRVNTEPKBNTGJSZVBNQQZBIVD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.7856008902056553);
    msg.setSource(47142U);
    msg.setSourceEntity(212U);
    msg.setDestination(9130U);
    msg.setDestinationEntity(142U);
    msg.button = 213U;
    msg.value = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.64882347681258);
    msg.setSource(47588U);
    msg.setSourceEntity(179U);
    msg.setDestination(50979U);
    msg.setDestinationEntity(95U);
    msg.button = 203U;
    msg.value = 152U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.19178962359126706);
    msg.setSource(10171U);
    msg.setSourceEntity(35U);
    msg.setDestination(26412U);
    msg.setDestinationEntity(83U);
    msg.button = 57U;
    msg.value = 2U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.9079641127693894);
    msg.setSource(65106U);
    msg.setSourceEntity(198U);
    msg.setDestination(61338U);
    msg.setDestinationEntity(238U);
    msg.op = 62U;
    msg.text.assign("GXOJSTYSKCVATNEPCPIRTQFXAVNUCYXQAQNKKNFCNRHQZRCMJQZZQDZSCLBGZZEJRWWBMECDJGSZHYRFJKXKXERGOUFPUNQVOGBUTDLOIAYMKCLTWTDTMILXGFPUVFWFHOMUENXHQOWBJCHIFPLPVBVKLYTVHTEISHNMNLLMOYBYLGVBOAWHEKJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.3340324162805063);
    msg.setSource(197U);
    msg.setSourceEntity(120U);
    msg.setDestination(50479U);
    msg.setDestinationEntity(53U);
    msg.op = 54U;
    msg.text.assign("RBLJWYGGSYWHQCAMZT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.6637976791974896);
    msg.setSource(22782U);
    msg.setSourceEntity(141U);
    msg.setDestination(38986U);
    msg.setDestinationEntity(221U);
    msg.op = 251U;
    msg.text.assign("KLAOIBCTYBZKJPARZPYMNVWOBIMYDPFDPTJXDMSKBFELWMQXJQWLHFUZISGZQWSQWVHGXGNPBTVLJRFUWBYZDOAKAFDXB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.49294985727321805);
    msg.setSource(41609U);
    msg.setSourceEntity(178U);
    msg.setDestination(32435U);
    msg.setDestinationEntity(140U);
    msg.op = 230U;
    msg.time_remain = 0.7859311426012386;
    msg.sched_time = 0.5864355514758983;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.6449747958867738);
    msg.setSource(46394U);
    msg.setSourceEntity(31U);
    msg.setDestination(5014U);
    msg.setDestinationEntity(175U);
    msg.op = 134U;
    msg.time_remain = 0.48004634891111264;
    msg.sched_time = 0.028522476798139684;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.5918449964146649);
    msg.setSource(54349U);
    msg.setSourceEntity(114U);
    msg.setDestination(59885U);
    msg.setDestinationEntity(22U);
    msg.op = 228U;
    msg.time_remain = 0.7323231849946894;
    msg.sched_time = 0.7237565022528802;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.05398679699015996);
    msg.setSource(35214U);
    msg.setSourceEntity(124U);
    msg.setDestination(23734U);
    msg.setDestinationEntity(28U);
    msg.name.assign("JRHROCUMKIJWIVTJKOAPWKCK");
    msg.op = 77U;
    msg.sched_time = 0.7556175764980892;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.035621548732592934);
    msg.setSource(650U);
    msg.setSourceEntity(192U);
    msg.setDestination(50862U);
    msg.setDestinationEntity(33U);
    msg.name.assign("WHJPCNDOGUEODXXKPLKKMGNOBOKANVDRRKLSCXRUDBLDXCKQBX");
    msg.op = 193U;
    msg.sched_time = 0.18119181597315015;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.32941459593561506);
    msg.setSource(51774U);
    msg.setSourceEntity(132U);
    msg.setDestination(58697U);
    msg.setDestinationEntity(168U);
    msg.name.assign("YDLWUJFVMBSCWDHHDRWPWDNEBKJHKGLIXUCZWOXEBTSFQGISDAMCHSYZHLEGVMOBGVYHMLIGFDPCSDIYVXCOOKXPZASTAUBDPQPTOTXCTGONRNEOWOFZPHKKNYNTQZKMREWIDMQ");
    msg.op = 229U;
    msg.sched_time = 0.6988173907448944;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.7463546315032813);
    msg.setSource(36182U);
    msg.setSourceEntity(77U);
    msg.setDestination(39300U);
    msg.setDestinationEntity(131U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.07690376339043281);
    msg.setSource(20241U);
    msg.setSourceEntity(19U);
    msg.setDestination(1827U);
    msg.setDestinationEntity(231U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.454162814866524);
    msg.setSource(16968U);
    msg.setSourceEntity(25U);
    msg.setDestination(55248U);
    msg.setDestinationEntity(140U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.4290878634838253);
    msg.setSource(32913U);
    msg.setSourceEntity(84U);
    msg.setDestination(8360U);
    msg.setDestinationEntity(158U);
    msg.name.assign("QXBPFHMESJQWJUWTMECANGBDJUGZDLXSPHYATBLKAZJB");
    msg.state = 167U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.04473965123509549);
    msg.setSource(12580U);
    msg.setSourceEntity(27U);
    msg.setDestination(5049U);
    msg.setDestinationEntity(43U);
    msg.name.assign("GZPBDQMBCHWEJKLGXUMJILQGEWHUCYDXNLJZYYTHCONMUFHVFHMTCBFAYGJTEPJPWQFUANSZQGRKWXSVDOTDOLBKYFSYAWNBTQZTDRVXXNYETNTAGELKHEAESIBYUXOYGECXOPJIINAVEWSJPKVDAOHS");
    msg.state = 144U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.7292401726708135);
    msg.setSource(52031U);
    msg.setSourceEntity(82U);
    msg.setDestination(44380U);
    msg.setDestinationEntity(147U);
    msg.name.assign("BIPTCWILCSUIGNMKZEYZMVTCEGODQSASXDRLWOPOTRTHYACQYWEJINXPWIJHKRFNKIGPBFUTJBDHQCAWKLZLQUOVSYFHVSUMHFEEXRLZWJMVWGJADLPJMXCCBUTAGZEOWKFGZDFHLQLZMTQTFHAXIOSBEHLCRSDSNXBAPFKQMXICVGKNVPDIAKJOHMUPIPRAPNOVUYJYHMVLVYYRCWTNBFGTABYXRXGESYRGEKZJBQNDQJNZNEUBV");
    msg.state = 153U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.274235392494547);
    msg.setSource(26999U);
    msg.setSourceEntity(238U);
    msg.setDestination(63470U);
    msg.setDestinationEntity(130U);
    msg.name.assign("RVKBNJUOGEOLTLWMLJJYDJQFOXTQKKDZMDINWWPVRUVZEYQKFXHSHISQRPULUZBVLSGKMUVXIJMDKXUMYPXBOLSYBFXESVINXWDPWVRFYDCMNZGFAGEJHPAHUEDIPQZGNFZGVSEBXDDIHZCMGGDEOOOGATWSTGHBRQHCBQZBW");
    msg.value = 206U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.39211462666204644);
    msg.setSource(41857U);
    msg.setSourceEntity(74U);
    msg.setDestination(34342U);
    msg.setDestinationEntity(197U);
    msg.name.assign("XADBZFMKWMKMESTRLVGTELLBJXKFFSCNVQSVOBPXMQPZUHLBPIQNARHITDSFTXOQQJPFOLNJRXYYMUSUUAISAAIIRRNVWDZNDGH");
    msg.value = 155U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.5192375838792019);
    msg.setSource(17839U);
    msg.setSourceEntity(206U);
    msg.setDestination(33246U);
    msg.setDestinationEntity(28U);
    msg.name.assign("UZJXZDMBGMVBIKPQNDCZQJWTJMIIKKODCWEDSHMWLOUHQPSWXLOTYHYBZSTGAEZVCXVGRLDBGCAPWQXFCXBVZCJDXKUYOKFGQWRPRHBMTLFIUVATLPKRYGPHIJYLTLOWAFFCYNEWDQUNFFFBJXIHTSYBCXMKKHFRIJOQPJEDMVQNABMNGONTDLVSOSSBFSIYNJCIAAYKKASPMUPZGOVSHGO");
    msg.value = 127U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.7685875713290923);
    msg.setSource(1123U);
    msg.setSourceEntity(139U);
    msg.setDestination(3486U);
    msg.setDestinationEntity(231U);
    msg.name.assign("LXPOSDNNCHYRARGPLJHTNEZZSSCOFGOBDQITMWDBYDARVGGTEXXYJWZIDVWHWIUAREBKWJYKFVLWKUKRPDOKENVRJMCTJNMIFOSICQNHZLHTAPUKYUAELBZJHPDAYLCTKHNYUESWYVMJUOAQOHOPCOYIWRIHWHXXVZISJXBVZDDMBNPLCZERYIRMIGSAKFVEQLNVQAQFJMXUFKCETSPJFURGXMCVTCSMQFGPBBNLXBGWOQQDGFQTTMUFP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.7952340625489038);
    msg.setSource(1187U);
    msg.setSourceEntity(84U);
    msg.setDestination(27500U);
    msg.setDestinationEntity(8U);
    msg.name.assign("ARNPBDQVTVIFJTRWUCHREMGSOUNLGELSFLCLXHCENGXHPUKEKZDBHQXNDADZLSYITOAQIJYOZSZKBVPMMLOUYVFXFGVVSCIEKELWDQHVFWPXIRHKUSCNWKQJZOMWYCDGBCOIYGTERAIBGLTRSFTOMGNEFWTQXJTSLCFVLZHBQUDAFPCINUUQABQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.9586390324178268);
    msg.setSource(54135U);
    msg.setSourceEntity(254U);
    msg.setDestination(55079U);
    msg.setDestinationEntity(75U);
    msg.name.assign("LPHTVPESODBXAVUVMXCGFRSHUFDUSXTJVPYFRWRHNYKVBYGTOBEWGUKRQZNPQBJLCZLSJRNLPYQNZBRTKVRJEAKEOXYMDEIZALFUAIEVIZKPJGHFOBBLOSFYDVIYXZUHAMTMRJMELIAXKDZGXPADVIJECLQBKRDCFIQHUWAWSUHGZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.2951760371533594);
    msg.setSource(40249U);
    msg.setSourceEntity(24U);
    msg.setDestination(60830U);
    msg.setDestinationEntity(4U);
    msg.name.assign("LFOSHFYPGUILWKUGYVNLWNQSIIPURSEFBTKUORIFKTRIIJLSMKENWCYRBFJNVOXVATKZVIQTYXYLDRLBEHITCDZHHRALAPZUJCBWFQSAGQNLZUFDXFXAYDETDHLWBEODMWXXPHGEKQCDADMGSPTVNOOCKKJSPJCZNEEWZSJWFBQCHYQTRJBTLQCVJIHOSGEYZHPVUMBQIVUOXHGGGC");
    msg.value = 39U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.05667100379720247);
    msg.setSource(3785U);
    msg.setSourceEntity(216U);
    msg.setDestination(5830U);
    msg.setDestinationEntity(203U);
    msg.name.assign("QEZQRGSKJPVYVIRARRXQPHQMTICJLRZQXLNVURQJHWAUHYNWRXAYSBPDOOFFLJDKMQUFBEZNIAMOVZPUBHVNNSVMPOWZTBRTTHOUSWNIGWDFJYAHTSEFOXEDDJBCLHOCWYOYQHKUSCMLPZEGBFDGIBPJG");
    msg.value = 183U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.2127308146621365);
    msg.setSource(60947U);
    msg.setSourceEntity(103U);
    msg.setDestination(25793U);
    msg.setDestinationEntity(209U);
    msg.name.assign("LRAAJDXSVEFWXACYQKKUGKVUEGIMTVUQWCNMMYLMCXCQZKYOZNUUVTLOBMSNPLVUXTFZHGWJKJCCHGXOPDVMABHNPDRKUQREOHLSBUPOSJHAQNEPSPMIGOMCRGDRVHBSJEQPUTTJVJYMTWBYZWTLRLRYMAKFGDAEDTOXNWDJEIYAWLOGYKOIXZBIHXBNZCCLEQFVETIWZXAIENSVKNFYLHGIRQQAGFUPSFRDZRKDPSIHBYZFDZTJJBF");
    msg.value = 32U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.8962485224358484);
    msg.setSource(20082U);
    msg.setSourceEntity(62U);
    msg.setDestination(36334U);
    msg.setDestinationEntity(244U);
    msg.id = 47U;
    msg.period = 2883948698U;
    msg.duty_cycle = 3569923090U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.5522111143090341);
    msg.setSource(34758U);
    msg.setSourceEntity(50U);
    msg.setDestination(30038U);
    msg.setDestinationEntity(173U);
    msg.id = 0U;
    msg.period = 3674643777U;
    msg.duty_cycle = 2401094895U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.105826269718859);
    msg.setSource(46525U);
    msg.setSourceEntity(114U);
    msg.setDestination(52334U);
    msg.setDestinationEntity(36U);
    msg.id = 207U;
    msg.period = 1653265932U;
    msg.duty_cycle = 2535754797U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.755393935973966);
    msg.setSource(40876U);
    msg.setSourceEntity(134U);
    msg.setDestination(3219U);
    msg.setDestinationEntity(121U);
    msg.id = 171U;
    msg.period = 3922763475U;
    msg.duty_cycle = 3450374395U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.6112993792518655);
    msg.setSource(62586U);
    msg.setSourceEntity(172U);
    msg.setDestination(40167U);
    msg.setDestinationEntity(154U);
    msg.id = 74U;
    msg.period = 3898738454U;
    msg.duty_cycle = 3234469198U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.28582730132783496);
    msg.setSource(34922U);
    msg.setSourceEntity(73U);
    msg.setDestination(5306U);
    msg.setDestinationEntity(225U);
    msg.id = 167U;
    msg.period = 1327594609U;
    msg.duty_cycle = 2793339019U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.8031247123981756);
    msg.setSource(41164U);
    msg.setSourceEntity(81U);
    msg.setDestination(1538U);
    msg.setDestinationEntity(113U);
    msg.lat = 0.3957759902992052;
    msg.lon = 0.39424731836798454;
    msg.height = 0.3854965634606866;
    msg.x = 0.24053473428721983;
    msg.y = 0.12825248115749344;
    msg.z = 0.7340576585851505;
    msg.phi = 0.31495191391401944;
    msg.theta = 0.9993435711256563;
    msg.psi = 0.6317071698068698;
    msg.u = 0.7684753607782561;
    msg.v = 0.06440388438892808;
    msg.w = 0.7327980353689367;
    msg.vx = 0.0651022247785138;
    msg.vy = 0.7380717451023867;
    msg.vz = 0.28769365402989266;
    msg.p = 0.07990015263260675;
    msg.q = 0.4517723273745663;
    msg.r = 0.4412790838914077;
    msg.depth = 0.10439301863315675;
    msg.alt = 0.0710662052086144;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.4216127997408037);
    msg.setSource(40796U);
    msg.setSourceEntity(134U);
    msg.setDestination(37118U);
    msg.setDestinationEntity(84U);
    msg.lat = 0.6248503167039106;
    msg.lon = 0.9537945549569882;
    msg.height = 0.1458516334436748;
    msg.x = 0.369916937328682;
    msg.y = 0.7506823502253684;
    msg.z = 0.20292242548694628;
    msg.phi = 0.7642710200652912;
    msg.theta = 0.8081637153638646;
    msg.psi = 0.029648972123731743;
    msg.u = 0.14534781964686438;
    msg.v = 0.4376020119439752;
    msg.w = 0.5144117966395049;
    msg.vx = 0.3899115639540651;
    msg.vy = 0.6828072281240375;
    msg.vz = 0.7145303071107504;
    msg.p = 0.9822854626919695;
    msg.q = 0.6023514803870093;
    msg.r = 0.057321500522032776;
    msg.depth = 0.5065634074788227;
    msg.alt = 0.2899248582400644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.9468949673784858);
    msg.setSource(25620U);
    msg.setSourceEntity(171U);
    msg.setDestination(16399U);
    msg.setDestinationEntity(88U);
    msg.lat = 0.4819686894503361;
    msg.lon = 0.2752501743320245;
    msg.height = 0.6682023787914023;
    msg.x = 0.4580175649174467;
    msg.y = 0.9743322992299248;
    msg.z = 0.9107444747032492;
    msg.phi = 0.7557062298106172;
    msg.theta = 0.26477909067392036;
    msg.psi = 0.21254287745361944;
    msg.u = 0.5232582267757;
    msg.v = 0.1093066890236909;
    msg.w = 0.8147369396723265;
    msg.vx = 0.8494595857625737;
    msg.vy = 0.4555097248724659;
    msg.vz = 0.8017999052117017;
    msg.p = 0.7226635881147113;
    msg.q = 0.9233912313982994;
    msg.r = 0.7876220662994157;
    msg.depth = 0.8395314196433571;
    msg.alt = 0.6642432107898825;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.8865710294642138);
    msg.setSource(49751U);
    msg.setSourceEntity(174U);
    msg.setDestination(5850U);
    msg.setDestinationEntity(29U);
    msg.x = 0.3382473282341807;
    msg.y = 0.3044446591482547;
    msg.z = 0.3942690215825886;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.7099531153481589);
    msg.setSource(13253U);
    msg.setSourceEntity(168U);
    msg.setDestination(29321U);
    msg.setDestinationEntity(64U);
    msg.x = 0.6588358281775061;
    msg.y = 0.11800935347747987;
    msg.z = 0.5550452977393285;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.7420736349297777);
    msg.setSource(22362U);
    msg.setSourceEntity(90U);
    msg.setDestination(52570U);
    msg.setDestinationEntity(27U);
    msg.x = 0.5994616772143739;
    msg.y = 0.6232991863392993;
    msg.z = 0.34042119277718075;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.28437886359725084);
    msg.setSource(19927U);
    msg.setSourceEntity(31U);
    msg.setDestination(45495U);
    msg.setDestinationEntity(190U);
    msg.value = 0.7552548445917446;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.7892370855293788);
    msg.setSource(47079U);
    msg.setSourceEntity(124U);
    msg.setDestination(49725U);
    msg.setDestinationEntity(229U);
    msg.value = 0.7961486624701227;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.3237383286244525);
    msg.setSource(7020U);
    msg.setSourceEntity(168U);
    msg.setDestination(2168U);
    msg.setDestinationEntity(107U);
    msg.value = 0.49452785417913425;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.46534081808294736);
    msg.setSource(35110U);
    msg.setSourceEntity(186U);
    msg.setDestination(47643U);
    msg.setDestinationEntity(7U);
    msg.value = 0.936103874975629;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.831829892736332);
    msg.setSource(43657U);
    msg.setSourceEntity(214U);
    msg.setDestination(37902U);
    msg.setDestinationEntity(78U);
    msg.value = 0.23385615889325662;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.2741209493534187);
    msg.setSource(25982U);
    msg.setSourceEntity(17U);
    msg.setDestination(8310U);
    msg.setDestinationEntity(49U);
    msg.value = 0.3034358598520872;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.0442786548593751);
    msg.setSource(65432U);
    msg.setSourceEntity(234U);
    msg.setDestination(28988U);
    msg.setDestinationEntity(39U);
    msg.x = 0.3034724479261556;
    msg.y = 0.49883303341827745;
    msg.z = 0.9543081571325276;
    msg.phi = 0.8599333948019383;
    msg.theta = 0.9153889434495178;
    msg.psi = 0.9247978376386731;
    msg.p = 0.3317677611558131;
    msg.q = 0.22911812475925186;
    msg.r = 0.3416708888304205;
    msg.u = 0.8301885926057926;
    msg.v = 0.022179611827493728;
    msg.w = 0.051073845888425895;
    msg.bias_psi = 0.33156180074673214;
    msg.bias_r = 0.012364462539492638;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.8515853249451352);
    msg.setSource(28505U);
    msg.setSourceEntity(138U);
    msg.setDestination(24355U);
    msg.setDestinationEntity(107U);
    msg.x = 0.46849474724428386;
    msg.y = 0.16970565975292307;
    msg.z = 0.8899448574718932;
    msg.phi = 0.8261345569121364;
    msg.theta = 0.9114373736136678;
    msg.psi = 0.2651314331652844;
    msg.p = 0.15915111069677712;
    msg.q = 0.8426203329199213;
    msg.r = 0.019735539209874142;
    msg.u = 0.6839840041917639;
    msg.v = 0.16825320115220055;
    msg.w = 0.06953851223612084;
    msg.bias_psi = 0.19038845634166968;
    msg.bias_r = 0.7603545344141633;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.7049947747688047);
    msg.setSource(56116U);
    msg.setSourceEntity(22U);
    msg.setDestination(27326U);
    msg.setDestinationEntity(204U);
    msg.x = 0.6352334606084414;
    msg.y = 0.43646215147737566;
    msg.z = 0.21842493832704468;
    msg.phi = 0.47428550487145604;
    msg.theta = 0.12624497012456048;
    msg.psi = 0.9124410690525921;
    msg.p = 0.14451093535417092;
    msg.q = 0.5653747512030367;
    msg.r = 0.9480484569420048;
    msg.u = 0.38079291081549904;
    msg.v = 0.16520510683625744;
    msg.w = 0.3512295846135245;
    msg.bias_psi = 0.8232416350383787;
    msg.bias_r = 0.40489404856915245;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.4149290156690396);
    msg.setSource(26360U);
    msg.setSourceEntity(74U);
    msg.setDestination(49435U);
    msg.setDestinationEntity(18U);
    msg.bias_psi = 0.8281719870920156;
    msg.bias_r = 0.5685365494850083;
    msg.cog = 0.04225937064656038;
    msg.cyaw = 0.642395138475341;
    msg.lbl_rej_level = 0.6492422040054716;
    msg.gps_rej_level = 0.6721256839391961;
    msg.custom_x = 0.854151437493321;
    msg.custom_y = 0.8533797523852809;
    msg.custom_z = 0.47761736527424714;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.6895085711409861);
    msg.setSource(26449U);
    msg.setSourceEntity(231U);
    msg.setDestination(1656U);
    msg.setDestinationEntity(54U);
    msg.bias_psi = 0.5568128687119948;
    msg.bias_r = 0.965666654369089;
    msg.cog = 0.41713269157002186;
    msg.cyaw = 0.029299791005456544;
    msg.lbl_rej_level = 0.21105657468639982;
    msg.gps_rej_level = 0.20543343906248135;
    msg.custom_x = 0.2459329353411135;
    msg.custom_y = 0.6990219579005497;
    msg.custom_z = 0.2547035051161606;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.463511229430827);
    msg.setSource(17809U);
    msg.setSourceEntity(82U);
    msg.setDestination(3848U);
    msg.setDestinationEntity(65U);
    msg.bias_psi = 0.8254415113154507;
    msg.bias_r = 0.41624670862189306;
    msg.cog = 0.9138293555213838;
    msg.cyaw = 0.10060554555958878;
    msg.lbl_rej_level = 0.5539182374508503;
    msg.gps_rej_level = 0.4619813660368618;
    msg.custom_x = 0.40526392928437116;
    msg.custom_y = 0.7354131693809945;
    msg.custom_z = 0.9306593778443601;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.2118804188420318);
    msg.setSource(61579U);
    msg.setSourceEntity(202U);
    msg.setDestination(31371U);
    msg.setDestinationEntity(182U);
    msg.utc_time = 0.5645610548104778;
    msg.reason = 160U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.9066797512900056);
    msg.setSource(31675U);
    msg.setSourceEntity(159U);
    msg.setDestination(57117U);
    msg.setDestinationEntity(202U);
    msg.utc_time = 0.8856588091429767;
    msg.reason = 13U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.9393995735778358);
    msg.setSource(19176U);
    msg.setSourceEntity(123U);
    msg.setDestination(45462U);
    msg.setDestinationEntity(93U);
    msg.utc_time = 0.11183608651412091;
    msg.reason = 15U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.2433741144533097);
    msg.setSource(20146U);
    msg.setSourceEntity(20U);
    msg.setDestination(44392U);
    msg.setDestinationEntity(135U);
    msg.id = 78U;
    msg.range = 0.017490757802408274;
    msg.acceptance = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.05931909583168837);
    msg.setSource(60008U);
    msg.setSourceEntity(87U);
    msg.setDestination(52856U);
    msg.setDestinationEntity(89U);
    msg.id = 82U;
    msg.range = 0.41132407947274485;
    msg.acceptance = 252U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.3662580749069896);
    msg.setSource(30565U);
    msg.setSourceEntity(165U);
    msg.setDestination(26763U);
    msg.setDestinationEntity(96U);
    msg.id = 73U;
    msg.range = 0.8892188932776778;
    msg.acceptance = 235U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.9508662570719361);
    msg.setSource(26905U);
    msg.setSourceEntity(233U);
    msg.setDestination(19040U);
    msg.setDestinationEntity(19U);
    msg.type = 190U;
    msg.reason = 169U;
    msg.value = 0.046081714696971754;
    msg.timestep = 0.7462973602443631;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.6753365334433253);
    msg.setSource(5979U);
    msg.setSourceEntity(166U);
    msg.setDestination(3600U);
    msg.setDestinationEntity(68U);
    msg.type = 244U;
    msg.reason = 78U;
    msg.value = 0.23310850405061057;
    msg.timestep = 0.6551209901201285;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.6712865085350017);
    msg.setSource(11058U);
    msg.setSourceEntity(146U);
    msg.setDestination(10195U);
    msg.setDestinationEntity(26U);
    msg.type = 201U;
    msg.reason = 68U;
    msg.value = 0.4190087058585781;
    msg.timestep = 0.20088694795183049;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.7611418517506076);
    msg.setSource(61581U);
    msg.setSourceEntity(121U);
    msg.setDestination(49087U);
    msg.setDestinationEntity(235U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("ARURMNYKYYTBHUWZYPRYVMSZKMJZLVIPXBMWDTIABAWULXSIBSEZETLIVHGNEIVJEDS");
    tmp_msg_0.lat = 0.4749985607517764;
    tmp_msg_0.lon = 0.02501390412568294;
    tmp_msg_0.depth = 0.41284728230323386;
    tmp_msg_0.query_channel = 238U;
    tmp_msg_0.reply_channel = 127U;
    tmp_msg_0.transponder_delay = 167U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.7155517125245311;
    msg.y = 0.4189700604678622;
    msg.var_x = 0.6071238021222758;
    msg.var_y = 0.9778158341036134;
    msg.distance = 0.8104577620577107;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.6330868058441308);
    msg.setSource(22563U);
    msg.setSourceEntity(23U);
    msg.setDestination(23046U);
    msg.setDestinationEntity(25U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("RCOEBJABYAMHYYFLNZIVEKLVLTMKPEWGWUBIHGAQOMCOEHI");
    tmp_msg_0.lat = 0.5561564979489095;
    tmp_msg_0.lon = 0.5419474973648878;
    tmp_msg_0.depth = 0.8461778947247927;
    tmp_msg_0.query_channel = 109U;
    tmp_msg_0.reply_channel = 197U;
    tmp_msg_0.transponder_delay = 80U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.07479496840447619;
    msg.y = 0.5190485452077941;
    msg.var_x = 0.4815139740164388;
    msg.var_y = 0.2682806983394559;
    msg.distance = 0.8423414036984047;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.6017746576031052);
    msg.setSource(49524U);
    msg.setSourceEntity(115U);
    msg.setDestination(32951U);
    msg.setDestinationEntity(66U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("FFJHMMPDEMTEDRPOIBBPWKWMLGMXALYTEFNYKBKZLLMFDBVGXEOTZMZDBWKNHJHTCNVZFFGUBHVEJTHOOIFTIZNLTJGCVLHQVZTZUUREIDOUETPSVRAJKQGYGPSSA");
    tmp_msg_0.lat = 0.832340990126961;
    tmp_msg_0.lon = 0.6252115561299822;
    tmp_msg_0.depth = 0.9303759392622759;
    tmp_msg_0.query_channel = 147U;
    tmp_msg_0.reply_channel = 61U;
    tmp_msg_0.transponder_delay = 1U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.8823381522936521;
    msg.y = 0.5814276260758839;
    msg.var_x = 0.628861334241855;
    msg.var_y = 0.035843135640041934;
    msg.distance = 0.9822992446313223;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.12380550360319698);
    msg.setSource(24224U);
    msg.setSourceEntity(101U);
    msg.setDestination(17848U);
    msg.setDestinationEntity(108U);
    msg.state = 151U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.1522482276020467);
    msg.setSource(57052U);
    msg.setSourceEntity(54U);
    msg.setDestination(59363U);
    msg.setDestinationEntity(88U);
    msg.state = 131U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.030196582829611573);
    msg.setSource(35913U);
    msg.setSourceEntity(26U);
    msg.setDestination(37496U);
    msg.setDestinationEntity(6U);
    msg.state = 231U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.679878496833972);
    msg.setSource(25385U);
    msg.setSourceEntity(53U);
    msg.setDestination(26480U);
    msg.setDestinationEntity(47U);
    msg.x = 0.9501458807762467;
    msg.y = 0.586015752607239;
    msg.z = 0.7476726159134206;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.8845030456056588);
    msg.setSource(35816U);
    msg.setSourceEntity(162U);
    msg.setDestination(44434U);
    msg.setDestinationEntity(112U);
    msg.x = 0.5998463807458174;
    msg.y = 0.23081534384703795;
    msg.z = 0.4427780470744289;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.9539668516059778);
    msg.setSource(33081U);
    msg.setSourceEntity(146U);
    msg.setDestination(37216U);
    msg.setDestinationEntity(169U);
    msg.x = 0.7619558915545743;
    msg.y = 0.6322248403933624;
    msg.z = 0.312990041458283;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.7574935706904601);
    msg.setSource(34500U);
    msg.setSourceEntity(232U);
    msg.setDestination(63951U);
    msg.setDestinationEntity(17U);
    msg.va = 0.8089474288474411;
    msg.aoa = 0.7209782948760444;
    msg.ssa = 0.22775482733196784;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.09879749251560432);
    msg.setSource(16287U);
    msg.setSourceEntity(19U);
    msg.setDestination(55U);
    msg.setDestinationEntity(112U);
    msg.va = 0.6690087986582027;
    msg.aoa = 0.8513432170360721;
    msg.ssa = 0.6485818510167399;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.6261812314784164);
    msg.setSource(27584U);
    msg.setSourceEntity(217U);
    msg.setDestination(3494U);
    msg.setDestinationEntity(55U);
    msg.va = 0.13139199204248986;
    msg.aoa = 0.260825484584553;
    msg.ssa = 0.7204986121684143;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.43602806758237445);
    msg.setSource(49114U);
    msg.setSourceEntity(206U);
    msg.setDestination(4090U);
    msg.setDestinationEntity(238U);
    msg.value = 0.6827446877458326;
    msg.off = 0.20605433998274425;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.3282684846202276);
    msg.setSource(23032U);
    msg.setSourceEntity(49U);
    msg.setDestination(17769U);
    msg.setDestinationEntity(171U);
    msg.value = 0.2798393991814121;
    msg.off = 0.60175275905828;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.30788447982851197);
    msg.setSource(35320U);
    msg.setSourceEntity(244U);
    msg.setDestination(45771U);
    msg.setDestinationEntity(19U);
    msg.value = 0.11957867663113542;
    msg.off = 0.2236414798563271;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.37983148476911077);
    msg.setSource(23158U);
    msg.setSourceEntity(220U);
    msg.setDestination(38384U);
    msg.setDestinationEntity(216U);
    msg.value = 0.6764348122330845;
    msg.z_units = 212U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.12087960677233567);
    msg.setSource(22948U);
    msg.setSourceEntity(37U);
    msg.setDestination(27000U);
    msg.setDestinationEntity(36U);
    msg.value = 0.12693989898562175;
    msg.z_units = 1U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.6189766972328208);
    msg.setSource(31023U);
    msg.setSourceEntity(139U);
    msg.setDestination(46433U);
    msg.setDestinationEntity(209U);
    msg.value = 0.7076988381606993;
    msg.z_units = 191U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.1710312749840064);
    msg.setSource(30179U);
    msg.setSourceEntity(75U);
    msg.setDestination(20330U);
    msg.setDestinationEntity(197U);
    msg.value = 0.7637864316748217;
    msg.speed_units = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.7743880615702086);
    msg.setSource(19629U);
    msg.setSourceEntity(75U);
    msg.setDestination(40202U);
    msg.setDestinationEntity(164U);
    msg.value = 0.5949434748029182;
    msg.speed_units = 70U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.03909144341468185);
    msg.setSource(45323U);
    msg.setSourceEntity(54U);
    msg.setDestination(30937U);
    msg.setDestinationEntity(145U);
    msg.value = 0.013051158936327356;
    msg.speed_units = 57U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.28666063122715546);
    msg.setSource(48101U);
    msg.setSourceEntity(124U);
    msg.setDestination(43799U);
    msg.setDestinationEntity(46U);
    msg.value = 0.11080587645623807;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.3599961442481344);
    msg.setSource(4257U);
    msg.setSourceEntity(2U);
    msg.setDestination(38768U);
    msg.setDestinationEntity(253U);
    msg.value = 0.830403867150287;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.6077906986222756);
    msg.setSource(58566U);
    msg.setSourceEntity(206U);
    msg.setDestination(30411U);
    msg.setDestinationEntity(73U);
    msg.value = 0.934643866253417;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.3872497585515069);
    msg.setSource(32832U);
    msg.setSourceEntity(105U);
    msg.setDestination(60748U);
    msg.setDestinationEntity(215U);
    msg.value = 0.5914349083216113;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.4862987238882349);
    msg.setSource(38669U);
    msg.setSourceEntity(246U);
    msg.setDestination(60746U);
    msg.setDestinationEntity(219U);
    msg.value = 0.06392712723969718;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.19830027061692146);
    msg.setSource(40970U);
    msg.setSourceEntity(147U);
    msg.setDestination(20964U);
    msg.setDestinationEntity(25U);
    msg.value = 0.9340468349643307;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.28422669429168435);
    msg.setSource(16045U);
    msg.setSourceEntity(96U);
    msg.setDestination(9072U);
    msg.setDestinationEntity(8U);
    msg.value = 0.8873588572846152;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.3278527480732377);
    msg.setSource(55436U);
    msg.setSourceEntity(114U);
    msg.setDestination(11914U);
    msg.setDestinationEntity(248U);
    msg.value = 0.63343266297082;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.811159774904578);
    msg.setSource(37863U);
    msg.setSourceEntity(6U);
    msg.setDestination(2585U);
    msg.setDestinationEntity(129U);
    msg.value = 0.8918575085886096;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.2421377888895635);
    msg.setSource(41857U);
    msg.setSourceEntity(116U);
    msg.setDestination(35836U);
    msg.setDestinationEntity(222U);
    msg.path_ref = 3291524022U;
    msg.start_lat = 0.7573004061761968;
    msg.start_lon = 0.5049660787651372;
    msg.start_z = 0.032507226025515035;
    msg.start_z_units = 151U;
    msg.end_lat = 0.6396914918365975;
    msg.end_lon = 0.43093363682769814;
    msg.end_z = 0.3268099582532491;
    msg.end_z_units = 160U;
    msg.speed = 0.5566149406797929;
    msg.speed_units = 2U;
    msg.lradius = 0.6226082446430636;
    msg.flags = 155U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.08297298863765767);
    msg.setSource(15537U);
    msg.setSourceEntity(52U);
    msg.setDestination(35167U);
    msg.setDestinationEntity(9U);
    msg.path_ref = 1402581869U;
    msg.start_lat = 0.584460907819474;
    msg.start_lon = 0.9986963088917443;
    msg.start_z = 0.7818959933977712;
    msg.start_z_units = 155U;
    msg.end_lat = 0.8084878800985188;
    msg.end_lon = 0.6451059086931545;
    msg.end_z = 0.41954341499107795;
    msg.end_z_units = 54U;
    msg.speed = 0.36306699258670716;
    msg.speed_units = 86U;
    msg.lradius = 0.29162405192581664;
    msg.flags = 249U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.3704770860757147);
    msg.setSource(30213U);
    msg.setSourceEntity(248U);
    msg.setDestination(27912U);
    msg.setDestinationEntity(118U);
    msg.path_ref = 244249144U;
    msg.start_lat = 0.23032004784828575;
    msg.start_lon = 0.6907281935908214;
    msg.start_z = 0.3190543443207604;
    msg.start_z_units = 54U;
    msg.end_lat = 0.21773285767239547;
    msg.end_lon = 0.4565565782836596;
    msg.end_z = 0.28414751489290435;
    msg.end_z_units = 8U;
    msg.speed = 0.9524102921556377;
    msg.speed_units = 129U;
    msg.lradius = 0.288757585441193;
    msg.flags = 116U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.8395311548115242);
    msg.setSource(32927U);
    msg.setSourceEntity(236U);
    msg.setDestination(8625U);
    msg.setDestinationEntity(219U);
    msg.x = 0.9044832844718738;
    msg.y = 0.473945626589932;
    msg.z = 0.6910893156929755;
    msg.k = 0.8698299192577924;
    msg.m = 0.5351250145804277;
    msg.n = 0.863950076958402;
    msg.flags = 91U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.2567990090953117);
    msg.setSource(26904U);
    msg.setSourceEntity(192U);
    msg.setDestination(1944U);
    msg.setDestinationEntity(78U);
    msg.x = 0.24570039206966765;
    msg.y = 0.28153813227048086;
    msg.z = 0.05637662553300704;
    msg.k = 0.5730236583633062;
    msg.m = 0.7438338669478884;
    msg.n = 0.09612296015067234;
    msg.flags = 63U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.47147839022178806);
    msg.setSource(13688U);
    msg.setSourceEntity(223U);
    msg.setDestination(61146U);
    msg.setDestinationEntity(207U);
    msg.x = 0.21001337031047962;
    msg.y = 0.9715024164818555;
    msg.z = 0.4979746346825805;
    msg.k = 0.8799660055793892;
    msg.m = 0.11967808102921984;
    msg.n = 0.5084943521239625;
    msg.flags = 153U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.2996964625766555);
    msg.setSource(46035U);
    msg.setSourceEntity(207U);
    msg.setDestination(38426U);
    msg.setDestinationEntity(8U);
    msg.value = 0.936835482702645;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.41785015650554735);
    msg.setSource(55448U);
    msg.setSourceEntity(148U);
    msg.setDestination(49459U);
    msg.setDestinationEntity(199U);
    msg.value = 0.438837327671205;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.36529659393684877);
    msg.setSource(46853U);
    msg.setSourceEntity(186U);
    msg.setDestination(3115U);
    msg.setDestinationEntity(17U);
    msg.value = 0.29541126423985076;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.6976370384963467);
    msg.setSource(13414U);
    msg.setSourceEntity(20U);
    msg.setDestination(51902U);
    msg.setDestinationEntity(147U);
    msg.u = 0.30293593800583973;
    msg.v = 0.7836931643271982;
    msg.w = 0.136423084841787;
    msg.p = 0.999281416854958;
    msg.q = 0.19890343629297436;
    msg.r = 0.056950163154400824;
    msg.flags = 81U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.6292666854838022);
    msg.setSource(30575U);
    msg.setSourceEntity(58U);
    msg.setDestination(28191U);
    msg.setDestinationEntity(252U);
    msg.u = 0.10465565533347876;
    msg.v = 0.6971243536779566;
    msg.w = 0.320026159119974;
    msg.p = 0.5836741718315575;
    msg.q = 0.31569195430543195;
    msg.r = 0.19877215546485716;
    msg.flags = 96U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.49785999404991244);
    msg.setSource(21824U);
    msg.setSourceEntity(114U);
    msg.setDestination(46510U);
    msg.setDestinationEntity(10U);
    msg.u = 0.08837072764697107;
    msg.v = 0.08526298824147893;
    msg.w = 0.31862597274107507;
    msg.p = 0.9142573667985835;
    msg.q = 0.415336847779629;
    msg.r = 0.1806197346778332;
    msg.flags = 13U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.4378507477865472);
    msg.setSource(14220U);
    msg.setSourceEntity(123U);
    msg.setDestination(49530U);
    msg.setDestinationEntity(106U);
    msg.path_ref = 3122742529U;
    msg.start_lat = 0.1846602782216793;
    msg.start_lon = 0.5903594457573604;
    msg.start_z = 0.7226758292636425;
    msg.start_z_units = 102U;
    msg.end_lat = 0.19445010606633106;
    msg.end_lon = 0.5175669150581361;
    msg.end_z = 0.7471801199180604;
    msg.end_z_units = 11U;
    msg.lradius = 0.8024567017090214;
    msg.flags = 165U;
    msg.x = 0.19079981749708474;
    msg.y = 0.5073350328614694;
    msg.z = 0.9364005401225483;
    msg.vx = 0.6214993623157042;
    msg.vy = 0.5028067293244948;
    msg.vz = 0.07176783885867588;
    msg.course_error = 0.3518187874378549;
    msg.eta = 59818U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.8196507372885699);
    msg.setSource(15794U);
    msg.setSourceEntity(30U);
    msg.setDestination(18483U);
    msg.setDestinationEntity(25U);
    msg.path_ref = 3992383071U;
    msg.start_lat = 0.5054187744415607;
    msg.start_lon = 0.07774783845495792;
    msg.start_z = 0.8968075814343534;
    msg.start_z_units = 237U;
    msg.end_lat = 0.26592110921515066;
    msg.end_lon = 0.5316417334458264;
    msg.end_z = 0.9988713445200806;
    msg.end_z_units = 68U;
    msg.lradius = 0.31386612742393016;
    msg.flags = 10U;
    msg.x = 0.8415609555737799;
    msg.y = 0.6914547972050312;
    msg.z = 0.614572353014991;
    msg.vx = 0.29203431659621715;
    msg.vy = 0.6315288515003259;
    msg.vz = 0.926626185552754;
    msg.course_error = 0.1677656823167485;
    msg.eta = 54429U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.06495805416634881);
    msg.setSource(40292U);
    msg.setSourceEntity(106U);
    msg.setDestination(27675U);
    msg.setDestinationEntity(137U);
    msg.path_ref = 3351669284U;
    msg.start_lat = 0.37014011797618585;
    msg.start_lon = 0.8309678942986742;
    msg.start_z = 0.22637188456445356;
    msg.start_z_units = 171U;
    msg.end_lat = 0.6862292043407635;
    msg.end_lon = 0.21609726449638977;
    msg.end_z = 0.44323404986890624;
    msg.end_z_units = 208U;
    msg.lradius = 0.2190204439187804;
    msg.flags = 205U;
    msg.x = 0.7266404407048267;
    msg.y = 0.12251608324829621;
    msg.z = 0.6211177188772742;
    msg.vx = 0.710850082452877;
    msg.vy = 0.3079814033637289;
    msg.vz = 0.5216564148920437;
    msg.course_error = 0.2726978872371584;
    msg.eta = 62748U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8506389626967694);
    msg.setSource(16420U);
    msg.setSourceEntity(66U);
    msg.setDestination(31756U);
    msg.setDestinationEntity(76U);
    msg.k = 0.999315012659493;
    msg.m = 0.6199161945693381;
    msg.n = 0.7745494317108615;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.7729505621619848);
    msg.setSource(32796U);
    msg.setSourceEntity(186U);
    msg.setDestination(41801U);
    msg.setDestinationEntity(56U);
    msg.k = 0.7991762229163678;
    msg.m = 0.38583522021112915;
    msg.n = 0.32318832407061215;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8212251027849092);
    msg.setSource(50584U);
    msg.setSourceEntity(27U);
    msg.setDestination(8830U);
    msg.setDestinationEntity(61U);
    msg.k = 0.6341159620415564;
    msg.m = 0.7314662067877842;
    msg.n = 0.974714622740151;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.6448446297585085);
    msg.setSource(61029U);
    msg.setSourceEntity(101U);
    msg.setDestination(47849U);
    msg.setDestinationEntity(221U);
    msg.p = 0.807341727288347;
    msg.i = 0.029326983980252352;
    msg.d = 0.8499987698433605;
    msg.a = 0.5001170542397819;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.2933155448784921);
    msg.setSource(8661U);
    msg.setSourceEntity(199U);
    msg.setDestination(65026U);
    msg.setDestinationEntity(169U);
    msg.p = 0.5031969808657415;
    msg.i = 0.21480384100874328;
    msg.d = 0.8343634649101321;
    msg.a = 0.041122046975895055;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.8171617650139109);
    msg.setSource(33643U);
    msg.setSourceEntity(251U);
    msg.setDestination(20025U);
    msg.setDestinationEntity(18U);
    msg.p = 0.24552080138283017;
    msg.i = 0.8792159163554153;
    msg.d = 0.5804675926920789;
    msg.a = 0.4234463534654571;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.6970230297946775);
    msg.setSource(43846U);
    msg.setSourceEntity(203U);
    msg.setDestination(36829U);
    msg.setDestinationEntity(83U);
    msg.op = 147U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.40002831570510067);
    msg.setSource(53049U);
    msg.setSourceEntity(208U);
    msg.setDestination(37332U);
    msg.setDestinationEntity(23U);
    msg.op = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.1137163792721777);
    msg.setSource(10422U);
    msg.setSourceEntity(98U);
    msg.setDestination(36532U);
    msg.setDestinationEntity(218U);
    msg.op = 190U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.5021132660528087);
    msg.setSource(12115U);
    msg.setSourceEntity(32U);
    msg.setDestination(5869U);
    msg.setDestinationEntity(250U);
    msg.x = 0.8383298257965669;
    msg.y = 0.11274206249812979;
    msg.z = 0.3447519181729143;
    msg.vx = 0.25554550849690794;
    msg.vy = 0.4971846522017712;
    msg.vz = 0.929713579176233;
    msg.ax = 0.8875744504664057;
    msg.ay = 0.8930099388691902;
    msg.az = 0.8076311475053197;
    msg.flags = 37589U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.3334503064474502);
    msg.setSource(16746U);
    msg.setSourceEntity(130U);
    msg.setDestination(63032U);
    msg.setDestinationEntity(1U);
    msg.x = 0.9681523694929655;
    msg.y = 0.7054371814794234;
    msg.z = 0.4368331737600326;
    msg.vx = 0.7275146114783937;
    msg.vy = 0.6957145586543266;
    msg.vz = 0.32981122006031427;
    msg.ax = 0.644399160453228;
    msg.ay = 0.6501368631642627;
    msg.az = 0.3567035573730002;
    msg.flags = 57572U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.12386466493203219);
    msg.setSource(52037U);
    msg.setSourceEntity(193U);
    msg.setDestination(16484U);
    msg.setDestinationEntity(97U);
    msg.x = 0.6062646780221204;
    msg.y = 0.737608786957802;
    msg.z = 0.6795920737669485;
    msg.vx = 0.11138121091954856;
    msg.vy = 0.4365256381822261;
    msg.vz = 0.3438288043065899;
    msg.ax = 0.2233712204586119;
    msg.ay = 0.33532848056090436;
    msg.az = 0.43751985991988707;
    msg.flags = 57305U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.5144536933615439);
    msg.setSource(10682U);
    msg.setSourceEntity(200U);
    msg.setDestination(10908U);
    msg.setDestinationEntity(180U);
    msg.value = 0.6258459546410173;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.7690602472160663);
    msg.setSource(52317U);
    msg.setSourceEntity(206U);
    msg.setDestination(41131U);
    msg.setDestinationEntity(81U);
    msg.value = 0.6860429180407789;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.5417908964123859);
    msg.setSource(30553U);
    msg.setSourceEntity(53U);
    msg.setDestination(19884U);
    msg.setDestinationEntity(14U);
    msg.value = 0.025964503334234057;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.30663437973224916);
    msg.setSource(56041U);
    msg.setSourceEntity(3U);
    msg.setDestination(13485U);
    msg.setDestinationEntity(8U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2315403683U;
    tmp_msg_0.start_lat = 0.8180809744930213;
    tmp_msg_0.start_lon = 0.08979408387320864;
    tmp_msg_0.start_z = 0.9675311510450707;
    tmp_msg_0.start_z_units = 15U;
    tmp_msg_0.end_lat = 0.7196148948504917;
    tmp_msg_0.end_lon = 0.8087578085801133;
    tmp_msg_0.end_z = 0.1822420530414729;
    tmp_msg_0.end_z_units = 112U;
    tmp_msg_0.speed = 0.8301732629676414;
    tmp_msg_0.speed_units = 168U;
    tmp_msg_0.lradius = 0.41593988122692394;
    tmp_msg_0.flags = 49U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.2925382135069968);
    msg.setSource(53162U);
    msg.setSourceEntity(27U);
    msg.setDestination(60441U);
    msg.setDestinationEntity(250U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 1955624373U;
    tmp_msg_0.start_lat = 0.8289034998011346;
    tmp_msg_0.start_lon = 0.023327547527314585;
    tmp_msg_0.start_z = 0.12127272238289066;
    tmp_msg_0.start_z_units = 103U;
    tmp_msg_0.end_lat = 0.9985750376539546;
    tmp_msg_0.end_lon = 0.32606041745020775;
    tmp_msg_0.end_z = 0.9180499948725608;
    tmp_msg_0.end_z_units = 84U;
    tmp_msg_0.speed = 0.27934515214189226;
    tmp_msg_0.speed_units = 208U;
    tmp_msg_0.lradius = 0.502621780957665;
    tmp_msg_0.flags = 116U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.11074212785584236);
    msg.setSource(3531U);
    msg.setSourceEntity(72U);
    msg.setDestination(24699U);
    msg.setDestinationEntity(59U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 3351852615U;
    tmp_msg_0.start_lat = 0.572869282608392;
    tmp_msg_0.start_lon = 0.724503274737523;
    tmp_msg_0.start_z = 0.8774070416607758;
    tmp_msg_0.start_z_units = 129U;
    tmp_msg_0.end_lat = 0.09410246456339033;
    tmp_msg_0.end_lon = 0.850737823497714;
    tmp_msg_0.end_z = 0.6820044133624499;
    tmp_msg_0.end_z_units = 158U;
    tmp_msg_0.speed = 0.18356073191785438;
    tmp_msg_0.speed_units = 39U;
    tmp_msg_0.lradius = 0.6613098109381536;
    tmp_msg_0.flags = 236U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.33668073207529847);
    msg.setSource(26488U);
    msg.setSourceEntity(193U);
    msg.setDestination(60007U);
    msg.setDestinationEntity(107U);
    msg.timeout = 32604U;
    msg.lat = 0.806432559257005;
    msg.lon = 0.9499143894893883;
    msg.z = 0.8889118581309791;
    msg.z_units = 115U;
    msg.speed = 0.7858372634776389;
    msg.speed_units = 149U;
    msg.roll = 0.1295347100374057;
    msg.pitch = 0.10921709783062183;
    msg.yaw = 0.2783126314213782;
    msg.custom.assign("GYWRGDFALCCILALXRMDTKSEMPHGOVMBEBIIPYTFZFENWWGDCMOSHLTTEFOAPBSUIUYUHNXUCSXRAUMXRSAXRDDMINOSWGYJYUKUOFNVEYQVGVAAPOPBNMZQXSMJLHJFQOZVEVGPVS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.13160193063743186);
    msg.setSource(5365U);
    msg.setSourceEntity(235U);
    msg.setDestination(4714U);
    msg.setDestinationEntity(59U);
    msg.timeout = 32725U;
    msg.lat = 0.45120920633212014;
    msg.lon = 0.22645750318056934;
    msg.z = 0.9353792904418032;
    msg.z_units = 25U;
    msg.speed = 0.8214526504796326;
    msg.speed_units = 160U;
    msg.roll = 0.5860532912799886;
    msg.pitch = 0.22094742320175387;
    msg.yaw = 0.5010699531165139;
    msg.custom.assign("GZNNZMMJNEGZPWYXGROTBAAPNVERILQUCFWXRVWMHWQLOLAQUOVVXMTMRTCUMYPMPMBDWEJCLRSARHHANKKEBCSEHSEOTIYZHVPUNDUKJOICWIDFHXZSSBIQTBZLYFAWUBHOXRYOTKZQTFFCUXJXWGTXQEJVPHSVFSMVGXZQVJNIPQICODDLJAAEKUIHTDDAUKFQJYZGDWWJLUBYCLFPBERTYR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.28532750675612406);
    msg.setSource(33199U);
    msg.setSourceEntity(163U);
    msg.setDestination(44695U);
    msg.setDestinationEntity(226U);
    msg.timeout = 10090U;
    msg.lat = 0.4470624014125706;
    msg.lon = 0.6563010862325561;
    msg.z = 0.16183592047040618;
    msg.z_units = 253U;
    msg.speed = 0.05358607807778237;
    msg.speed_units = 172U;
    msg.roll = 0.5392034290714889;
    msg.pitch = 0.6910336689534624;
    msg.yaw = 0.7730752156257441;
    msg.custom.assign("AQGYBJYUCMVXQJFEZRQZGKX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.004101194086583604);
    msg.setSource(20107U);
    msg.setSourceEntity(71U);
    msg.setDestination(26601U);
    msg.setDestinationEntity(30U);
    msg.timeout = 17004U;
    msg.lat = 0.013216536983505667;
    msg.lon = 0.5424816487271461;
    msg.z = 0.12588843131958682;
    msg.z_units = 68U;
    msg.speed = 0.08865132552290733;
    msg.speed_units = 152U;
    msg.duration = 54353U;
    msg.radius = 0.04584084957072743;
    msg.flags = 92U;
    msg.custom.assign("FESEEVXQTATWTICTPNBYNMWONARGEWJYRDZWOZKWAYCJRJBDPKXJOZIYVKKMAHXJYCNAXWJSKFPDMDJKFPXTLDWHVBTHRVINQBIQDHRVXZIGOGZCGOMDEGSZOZMABEQWYWUMGDXYCUEXZRHKYAJCEISBSLFKUQNGNPRTUPMBCXYRSFASRVLNPDFXOOVZVQQEVMUPNZAHHUGRUBHUOLLGJKBMQISCTYJIFUWIBLMCUPKDGNQATSEFVCLILP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.5173809234422325);
    msg.setSource(65470U);
    msg.setSourceEntity(86U);
    msg.setDestination(34530U);
    msg.setDestinationEntity(215U);
    msg.timeout = 30656U;
    msg.lat = 0.5888600225649888;
    msg.lon = 0.19763448491460278;
    msg.z = 0.4382399651530564;
    msg.z_units = 112U;
    msg.speed = 0.16274850421991383;
    msg.speed_units = 200U;
    msg.duration = 7575U;
    msg.radius = 0.8894295596581391;
    msg.flags = 97U;
    msg.custom.assign("OXVQXHEULJMCASWDVJDQWZOTLHKGUFSCIKLJNPEMEPITQHWRJGVUCGCLORGUHCHOFDIRDEYMZLKGSVXSCZUMDNPSENMZBKYPIKTJPYANHJIBAIUZFCBYCKHDBZIUSXWWATARXBDTEBMCRKGEABVYMVHBLNCQMMDXDXJLBWZEAYLFWWXSPSRUTLVOYOZPTENOHESFPPJFANTHYOGIQBFQSPKZKRQKFZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.8950725451188206);
    msg.setSource(19572U);
    msg.setSourceEntity(151U);
    msg.setDestination(20119U);
    msg.setDestinationEntity(158U);
    msg.timeout = 37886U;
    msg.lat = 0.2976470066888358;
    msg.lon = 0.40126807125130903;
    msg.z = 0.24113587336757503;
    msg.z_units = 228U;
    msg.speed = 0.8058126136186246;
    msg.speed_units = 68U;
    msg.duration = 17644U;
    msg.radius = 0.7048200643374423;
    msg.flags = 207U;
    msg.custom.assign("HJBCQEZTQSIZLPVIBEGTQHGVLZYBFAEEDNNKCOHDOCWZOKMLXKRWSLJRIPDAUHXJEUKCCYNEHCASOZWVIWKFLTXNAJYNUQXWOADRFMVOWAGKMMDTPPUFRSQTYVEJWDYIISMPLJERLIBCMOUVBUOXS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.2529521228122218);
    msg.setSource(22384U);
    msg.setSourceEntity(56U);
    msg.setDestination(37996U);
    msg.setDestinationEntity(214U);
    msg.custom.assign("PUOTQJYMJINTTJPXQWFOSLWCRRQDYENCKORGIVXFXHMBNKMFZHKLGAIIRWRKRMFDRTBADOVTQYDSIRTFS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.4119194692108268);
    msg.setSource(41705U);
    msg.setSourceEntity(186U);
    msg.setDestination(54444U);
    msg.setDestinationEntity(7U);
    msg.custom.assign("VXKLDLQCHYMBAWUUPSGMCFUHDCLXMOKRLLRUORSGZKJGLHYJQJECPWTCVJTBBEWNRCZBKWBZFIIFCOZXCVQZHTSHIOTAPVPWVUJLNAGXELDEXIPADQNZHVDH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.02556404109878696);
    msg.setSource(3148U);
    msg.setSourceEntity(122U);
    msg.setDestination(38533U);
    msg.setDestinationEntity(198U);
    msg.custom.assign("TVMLAUMSHYEKLPBJDWKXYZKNQGDXAQISREDPSUGBJOXFDSBVSWACRSSEXZUNFHODGHQGGCMODHBZKODANJPLQWLZEIWNKMXZFYYPLJCNOMGIZVMAAFHCEPTKUEPVJUTIRCEBJHVTRTLFORUYUFJUCGORVTNHJLFKJQYNXBWGYGWDTCOWBDLEQIXRCJFSZDCOIPBU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.3037536406692677);
    msg.setSource(16353U);
    msg.setSourceEntity(128U);
    msg.setDestination(26192U);
    msg.setDestinationEntity(74U);
    msg.timeout = 57760U;
    msg.lat = 0.5490859818178632;
    msg.lon = 0.13900865918002658;
    msg.z = 0.18961751074606537;
    msg.z_units = 234U;
    msg.duration = 35834U;
    msg.speed = 0.5971100444297546;
    msg.speed_units = 195U;
    msg.type = 106U;
    msg.radius = 0.4995670468552553;
    msg.length = 0.1359337675051009;
    msg.bearing = 0.8193977656580139;
    msg.direction = 190U;
    msg.custom.assign("PIHLNCOKKLUJRQVXGCCUPJWWXHTXZXEEECHLEIUTNUDXDVQSIRXJEATAERSBSGVMFFKIXVKFZKWNYHYOUUROJILPEAFAOARXSKNQAMBQXIZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.21618420936398508);
    msg.setSource(39298U);
    msg.setSourceEntity(160U);
    msg.setDestination(64253U);
    msg.setDestinationEntity(75U);
    msg.timeout = 39534U;
    msg.lat = 0.2611391002062694;
    msg.lon = 0.6010050119786053;
    msg.z = 0.3511221582216665;
    msg.z_units = 137U;
    msg.duration = 43251U;
    msg.speed = 0.0715217876823172;
    msg.speed_units = 161U;
    msg.type = 147U;
    msg.radius = 0.9353516035152148;
    msg.length = 0.48857466193787435;
    msg.bearing = 0.49315207877397294;
    msg.direction = 42U;
    msg.custom.assign("RKIETZYAJPYTMMMPIBLSBVPZLPCAHXDLOSURAHWAEHDIVFPQWRELKWICRVUNUQXANQEJKXHSDAFYEBNMORFOJBRGSTHVZDNCDDGNYUPKAQTZXOXOKKXNLZFFNVFBBGFIGPZMGXSCCJBQWCQTWOQJAKDICUCQBHHWILGEK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.4905961394345236);
    msg.setSource(64947U);
    msg.setSourceEntity(160U);
    msg.setDestination(844U);
    msg.setDestinationEntity(162U);
    msg.timeout = 54841U;
    msg.lat = 0.5656786725542776;
    msg.lon = 0.7109166412258684;
    msg.z = 0.17174605811797838;
    msg.z_units = 105U;
    msg.duration = 50742U;
    msg.speed = 0.2860840484454412;
    msg.speed_units = 105U;
    msg.type = 99U;
    msg.radius = 0.4303341822604181;
    msg.length = 0.10258205428682021;
    msg.bearing = 0.08305262343698816;
    msg.direction = 220U;
    msg.custom.assign("ZFCXCWDMOYJHZLAXHUYHSWQXQQRNETNIAPBWFKHNLOARSAUMEEJJICIKKILJQBQDMMHEORZHREGJGNVFLMKKVDAZWKEQCYDJRJXMFRGGICVNUXFNLXTUJCOMVVEGPZQOWETDLQJBLYLTSPUFRPVBZDWKAUNXOAOFDPMZIBNYKPQSSSFUIRGPDBCHIXXPSTUVHROVMBWSUTNAWQTIH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.006402338377909489);
    msg.setSource(3810U);
    msg.setSourceEntity(174U);
    msg.setDestination(9315U);
    msg.setDestinationEntity(227U);
    msg.duration = 62705U;
    msg.custom.assign("MPMHYRDYGQFPMAZVSTIOWAOCENWJSLBHIUZMVHHBQDACENGWHNUXX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.13857476480884778);
    msg.setSource(1305U);
    msg.setSourceEntity(211U);
    msg.setDestination(46233U);
    msg.setDestinationEntity(168U);
    msg.duration = 4953U;
    msg.custom.assign("YPEVSNZSMKUQIOGADIUCELNGWGBJLSDROCDNACMEJIHHAPFODCYFHNAJTLBZVHQRMKORFIIDSMXIFHBOBPBQVGSNNDADMWQATWXNLZRIZRHOYZZKMNMYARYECCQPLXGEIBXPBGJWKJVSRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.16277503748136324);
    msg.setSource(20377U);
    msg.setSourceEntity(181U);
    msg.setDestination(28516U);
    msg.setDestinationEntity(195U);
    msg.duration = 42098U;
    msg.custom.assign("GCLYKQOYTEFTIQWANXIPFIGTAFWAHXDPLSSCUSOEJNSGEONADPULYVVBSCHPHZARTZIGGWAHLHTCZFDUVURCAZFBWSIAFDVBYZNLAQKNTPNQVUGQUWVKONBKDVYZUGBIXXTLMOJBQSBRYSZOXYSEMJRRIRHYHFEMTYJCMCZAHJH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.7628816857027841);
    msg.setSource(51189U);
    msg.setSourceEntity(150U);
    msg.setDestination(12554U);
    msg.setDestinationEntity(173U);
    IMC::DesiredThrottle tmp_msg_0;
    tmp_msg_0.value = 0.13451952767884934;
    msg.control.set(tmp_msg_0);
    msg.duration = 40004U;
    msg.custom.assign("FUHMPMXDPFDVGEZMGEYPKZXUVNOUSUARCRYOIKWBLZJOGYZMDUBSBEULLTRFRADKZWWLQHIKZDCWNJFMBAXJVNOWVGUOQHUXXGVQFMDVGEHIJAHMCTLFQBOZTWTKSDECZXASWHKOSRVXKONJIQQSHSJKKLIKJCTBOGRXAAMREXPNYGVQIJPXYSDHYPVULYIEDNTPTFGWLIEBPAOGFCAYEVBWFTPRNHQNZQNPFUZJYALHBDCIBLYMMSTQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.9744748382378514);
    msg.setSource(22082U);
    msg.setSourceEntity(5U);
    msg.setDestination(43816U);
    msg.setDestinationEntity(213U);
    IMC::DesiredRoll tmp_msg_0;
    tmp_msg_0.value = 0.6502804570999468;
    msg.control.set(tmp_msg_0);
    msg.duration = 34703U;
    msg.custom.assign("CRWZYCCRZQNSIRNUSSIYZQWXBGSYSYLKCQSZZNBUZWDJOEWKYGLTHVPODFHBJCDXCRMRVSQXVTBINUAKBRKJVTRHLLUMVPHYXNGFDZDFIHILYMCTSDYGEMVLMEENOQWPBGFZCUWKJAATRMXJOUDHLCONHGEKQQXWAFJIRDLKQUJWCJGH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.9767786184243176);
    msg.setSource(21963U);
    msg.setSourceEntity(88U);
    msg.setDestination(57731U);
    msg.setDestinationEntity(165U);
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.7917646055098643;
    tmp_msg_0.speed_units = 185U;
    msg.control.set(tmp_msg_0);
    msg.duration = 22430U;
    msg.custom.assign("MZOCLHGHSQKNXRWSCOIRGXMSZHWZTXKRPLJTULGSTXITWIQLJRQREDSLFEYYYJEDWPOOKBOPJREUSDILANJBICBXSCAPPAVBDBKBHYBCCDAGFKNWPCRUMEWHAQLUNAUVXVGYLVJVAUMEBNMAHVZLHFAMNGQIXRNCZUNWJJSNCIGKZGOZYIGYTQKFTPXPYUWYXQDO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.6976806699121566);
    msg.setSource(24433U);
    msg.setSourceEntity(223U);
    msg.setDestination(43816U);
    msg.setDestinationEntity(117U);
    msg.timeout = 19433U;
    msg.lat = 0.34712573898437216;
    msg.lon = 0.15142498499699975;
    msg.z = 0.6419782653964885;
    msg.z_units = 245U;
    msg.speed = 0.450027532547592;
    msg.speed_units = 18U;
    msg.bearing = 0.5269170911358176;
    msg.cross_angle = 0.7275789548321454;
    msg.width = 0.12193229845992992;
    msg.length = 0.01757465952526116;
    msg.hstep = 0.9363795741376362;
    msg.coff = 72U;
    msg.alternation = 49U;
    msg.flags = 251U;
    msg.custom.assign("HBPLCVKNOQBFDGWBEPYNO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.4538018766777955);
    msg.setSource(41801U);
    msg.setSourceEntity(90U);
    msg.setDestination(63918U);
    msg.setDestinationEntity(171U);
    msg.timeout = 47163U;
    msg.lat = 0.3900930588512951;
    msg.lon = 0.4684501615810903;
    msg.z = 0.1966373022121627;
    msg.z_units = 249U;
    msg.speed = 0.9142584110356862;
    msg.speed_units = 134U;
    msg.bearing = 0.6247009154074077;
    msg.cross_angle = 0.7202259114695736;
    msg.width = 0.20820052370744702;
    msg.length = 0.34546149082784916;
    msg.hstep = 0.5446208645212969;
    msg.coff = 141U;
    msg.alternation = 9U;
    msg.flags = 26U;
    msg.custom.assign("ZUYFWKJQOCTBMVZWEYNIJZTKFWAPTUGRNPFLOQSURHKPELMVCWEODFPUCKCUKRAYASASJGTUXVLMCFRZKGISIMMQYZVYNLTYEXMXPASXUGUTEXIDUBIVXNEQHHGHLLOPTJZHOGAIEJLXFFNVWDPTDSJAYQVKWNDJDBSRHWVSALJWBRGRBGEVEQKZSYEZPYKFTCRCXPZDMQFICOBJGOHWOHMNTNBAJHIUYKZOXLQALDNDHBNMPMBQDIRXRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.06548388164341157);
    msg.setSource(22847U);
    msg.setSourceEntity(207U);
    msg.setDestination(37627U);
    msg.setDestinationEntity(227U);
    msg.timeout = 6185U;
    msg.lat = 0.7312798076013078;
    msg.lon = 0.6564547614592704;
    msg.z = 0.22743243805104563;
    msg.z_units = 203U;
    msg.speed = 0.522179428427115;
    msg.speed_units = 112U;
    msg.bearing = 0.45085807146968127;
    msg.cross_angle = 0.4696534162469803;
    msg.width = 0.07941708423269966;
    msg.length = 0.44631949456952635;
    msg.hstep = 0.03451654232270618;
    msg.coff = 33U;
    msg.alternation = 202U;
    msg.flags = 106U;
    msg.custom.assign("FJTGNRCAARZEPBROXHWQFQEIENORHTUDRUFIMXIKFULHQUJAVCTLGMMUOVPGOXADYMPSORXYYCCUMXZBTZCSLZYABGBGCGKYNVMQKZAKTKNAXXKJTVGFTRIBHWQNODRUIOWVPNYCGHQEJVHDNRIYAPZXVHLBDILFXCYQKTDBWSIUMNZHPMUSKWS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.853268698125695);
    msg.setSource(24027U);
    msg.setSourceEntity(61U);
    msg.setDestination(4970U);
    msg.setDestinationEntity(242U);
    msg.timeout = 33280U;
    msg.lat = 0.7681180760093835;
    msg.lon = 0.4999822494081002;
    msg.z = 0.769902685243926;
    msg.z_units = 152U;
    msg.speed = 0.310601485560979;
    msg.speed_units = 252U;
    msg.custom.assign("CDCPKESPCZHLZDOZHUMXIAQPRNEENUUMWLTJSBJFACDLPHZHFYGAVBZGEBWEQDCHMOWCNSLIFZUQRDRIBFFMDHBBKYFEKYQNXCSLJZUMKNIYQBDHDVIRKXYYYWZXKQTKAJEGWHWQMVPBLGESKLGJOAVRFLXTPXJXLVVQOGXGMCMITOTFSMTIRAUFWGVZSJITYOOUXSWHDDFKECJBOUXYNHGNVNA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.14368861294093216);
    msg.setSource(63585U);
    msg.setSourceEntity(110U);
    msg.setDestination(58937U);
    msg.setDestinationEntity(23U);
    msg.timeout = 13540U;
    msg.lat = 0.16854453040234152;
    msg.lon = 0.7615517546194912;
    msg.z = 0.09532849318087355;
    msg.z_units = 80U;
    msg.speed = 0.13855229053158213;
    msg.speed_units = 130U;
    msg.custom.assign("UBGGELADFSVEBMHXVQOOCEVUSYVKXBYFKMNXAYZDIDZDFXQMLUINRRJYOJCRGUERCOMPGXROVXEVZMBGKRZQYOMUAJWHSRIITYXC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.9236944967211207);
    msg.setSource(45965U);
    msg.setSourceEntity(150U);
    msg.setDestination(1980U);
    msg.setDestinationEntity(47U);
    msg.timeout = 20209U;
    msg.lat = 0.4138846852593153;
    msg.lon = 0.6771196577191473;
    msg.z = 0.9357921421834005;
    msg.z_units = 8U;
    msg.speed = 0.5086404860523986;
    msg.speed_units = 176U;
    msg.custom.assign("YCJBVLENEO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.18952815359583164);
    msg.setSource(26498U);
    msg.setSourceEntity(81U);
    msg.setDestination(6821U);
    msg.setDestinationEntity(123U);
    msg.x = 0.06512312936906905;
    msg.y = 0.23574658028666318;
    msg.z = 0.17051724775188393;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.07186629055270188);
    msg.setSource(31908U);
    msg.setSourceEntity(10U);
    msg.setDestination(14148U);
    msg.setDestinationEntity(241U);
    msg.x = 0.09916438907065694;
    msg.y = 0.5289066150245361;
    msg.z = 0.45041805665943313;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.8668304639534405);
    msg.setSource(14718U);
    msg.setSourceEntity(146U);
    msg.setDestination(6702U);
    msg.setDestinationEntity(229U);
    msg.x = 0.22257268050840995;
    msg.y = 0.0029627741357673987;
    msg.z = 0.5711954478039574;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.3583445062469546);
    msg.setSource(37461U);
    msg.setSourceEntity(151U);
    msg.setDestination(41435U);
    msg.setDestinationEntity(225U);
    msg.timeout = 38194U;
    msg.lat = 0.7101432638950892;
    msg.lon = 0.5999766069690469;
    msg.z = 0.5652129270969589;
    msg.z_units = 2U;
    msg.amplitude = 0.9786199921496351;
    msg.pitch = 0.8655475941568568;
    msg.speed = 0.25455577998717416;
    msg.speed_units = 39U;
    msg.custom.assign("GWJBTIDXVOTJHYSNPBDNNATCBXHSZF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.972943587065193);
    msg.setSource(64185U);
    msg.setSourceEntity(25U);
    msg.setDestination(60962U);
    msg.setDestinationEntity(226U);
    msg.timeout = 6195U;
    msg.lat = 0.4228748774062916;
    msg.lon = 0.20374279255884054;
    msg.z = 0.6401479176640227;
    msg.z_units = 200U;
    msg.amplitude = 0.6667324025170329;
    msg.pitch = 0.5196820647902368;
    msg.speed = 0.44329479305339037;
    msg.speed_units = 86U;
    msg.custom.assign("DYMZOSEIWQCYNRZGPFWVHLBQHSTMXHPNMLMRBEPUGXGNOEWISGFQOZLKXANSKWRCLAABTZSWBYAKNJFRKQFSHQNXJYDUEWFOBQWYTXYBRTYKVKYMPEIIJKGWLXAVFPEYISTNXQZRVEXFMLCCBGBZZEKGPCFYULKHMTGOJAJUCUZBKRAHMLDUQCCZPHXURE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.5225843836801692);
    msg.setSource(45283U);
    msg.setSourceEntity(146U);
    msg.setDestination(880U);
    msg.setDestinationEntity(127U);
    msg.timeout = 60156U;
    msg.lat = 0.615498119226148;
    msg.lon = 0.3233060664761537;
    msg.z = 0.9370923329119143;
    msg.z_units = 170U;
    msg.amplitude = 0.3560440587564295;
    msg.pitch = 0.9097306982176814;
    msg.speed = 0.46559164201790937;
    msg.speed_units = 92U;
    msg.custom.assign("RNPQUNZAHCOEVJUJLQSKOWUNNCXPRXBOMDGLEAPQWPKFLVDFJNVROKKVDFCUONEDIFAYDLBEMMALGRIUHOBJRBJQELRBHHZDVFCTLNYTQWPXACHYRHIOTS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.021132196510915247);
    msg.setSource(44816U);
    msg.setSourceEntity(133U);
    msg.setDestination(45213U);
    msg.setDestinationEntity(50U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.8254940426690648);
    msg.setSource(49880U);
    msg.setSourceEntity(218U);
    msg.setDestination(49097U);
    msg.setDestinationEntity(144U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.1784419875705464);
    msg.setSource(44328U);
    msg.setSourceEntity(2U);
    msg.setDestination(24854U);
    msg.setDestinationEntity(171U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.7164668248207205);
    msg.setSource(12373U);
    msg.setSourceEntity(124U);
    msg.setDestination(9777U);
    msg.setDestinationEntity(132U);
    msg.lat = 0.23079317611868488;
    msg.lon = 0.16231891665540676;
    msg.z = 0.0928382577795428;
    msg.z_units = 196U;
    msg.radius = 0.05075023368378517;
    msg.duration = 50695U;
    msg.speed = 0.6489524915691897;
    msg.speed_units = 220U;
    msg.custom.assign("DSSDVPVHFMUCEMPXMBZRLBDLTVMYSGGNAUFTURJIFPEQLOEBGIKHVRXERIPQCHHLLQKGMTCHEYZNTCOJWVYSQTZNVTYUASKYTTW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.02473534399432309);
    msg.setSource(21012U);
    msg.setSourceEntity(95U);
    msg.setDestination(47323U);
    msg.setDestinationEntity(100U);
    msg.lat = 0.3691518861384051;
    msg.lon = 0.5555736851148723;
    msg.z = 0.31140411399579504;
    msg.z_units = 7U;
    msg.radius = 0.034888146896714045;
    msg.duration = 53438U;
    msg.speed = 0.5204688069258764;
    msg.speed_units = 104U;
    msg.custom.assign("DYXTISNOGEXOLREGSXUQIYTLHRWRPACOQRIHWOUECYJCHMZBIBLFZVNALMVVXHHVJTKEYMBDJUWFPZIEGMGFYPSNDXIXWKWXRKYTYRDSUFLWGQDNKQCWRUCQWEYUDZQSABTKBLJFLKNEIFMAOAURVZMVAORACLFVEH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.03628754960156855);
    msg.setSource(27728U);
    msg.setSourceEntity(240U);
    msg.setDestination(64926U);
    msg.setDestinationEntity(134U);
    msg.lat = 0.745057869778867;
    msg.lon = 0.13812444381087152;
    msg.z = 0.5532681452448874;
    msg.z_units = 146U;
    msg.radius = 0.9436634191716715;
    msg.duration = 58942U;
    msg.speed = 0.8126372103565294;
    msg.speed_units = 171U;
    msg.custom.assign("XYPDWJEYQGHRYPBUSRTMEURZKZVFQRRNTKDTCADSWBDHBNHJCVMXBEPQJALNLRMLAPGYIRUKFQWRZEXBCMLGTOWWMKONCJFOTCGGDXNUEH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.2581557185545479);
    msg.setSource(20761U);
    msg.setSourceEntity(186U);
    msg.setDestination(27329U);
    msg.setDestinationEntity(90U);
    msg.timeout = 33301U;
    msg.flags = 10U;
    msg.lat = 0.06436377428182427;
    msg.lon = 0.40336927915052057;
    msg.start_z = 0.3943377078688307;
    msg.start_z_units = 220U;
    msg.end_z = 0.4625752797205709;
    msg.end_z_units = 69U;
    msg.radius = 0.5034724279408743;
    msg.speed = 0.5605900358828442;
    msg.speed_units = 184U;
    msg.custom.assign("UUIVCYZEVULHSJPIMADFCMNMDVOLXETWTYVGIIEEABWHOKRCJWHFTZBZAFYSCRCTNVNXFCOFEPQFQTLCSQWROYBIPKGJGULPXRUWOAQNNDYYYVMXUQEOAGXJJGRNGCDAFIIWEZMRIBTSAXBZDVRQWVTLZSOMKXDDLJHRKOSKPUNLCKHFHUZGABHLJQUVPMMBQARFJDMUZVRSGCFSJNTEPZHK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.10186765128722008);
    msg.setSource(11728U);
    msg.setSourceEntity(0U);
    msg.setDestination(63659U);
    msg.setDestinationEntity(115U);
    msg.timeout = 12356U;
    msg.flags = 15U;
    msg.lat = 0.25343208211351165;
    msg.lon = 0.35675618512772356;
    msg.start_z = 0.8097426150901011;
    msg.start_z_units = 142U;
    msg.end_z = 0.6720356280621435;
    msg.end_z_units = 174U;
    msg.radius = 0.6346456688576778;
    msg.speed = 0.18146092524142055;
    msg.speed_units = 248U;
    msg.custom.assign("LMBCLXWGEYVFMHCMNUSVKWSJCXYKEJMRYKUPZNMUWOIVDORULODCQCXKNMFKBBFITVURTIGTYVYSLVRCXANBKZBWSYHGFQOQLPHGZYIPLMSRPZSHXPHAXUQNJGUQEOWJFAILGSWXJJTI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.6262727825744943);
    msg.setSource(51213U);
    msg.setSourceEntity(75U);
    msg.setDestination(38390U);
    msg.setDestinationEntity(165U);
    msg.timeout = 13160U;
    msg.flags = 224U;
    msg.lat = 0.3702000086301537;
    msg.lon = 0.7429094823042472;
    msg.start_z = 0.4164850940755206;
    msg.start_z_units = 250U;
    msg.end_z = 0.2883731401672489;
    msg.end_z_units = 61U;
    msg.radius = 0.08046649055109378;
    msg.speed = 0.8127476317174731;
    msg.speed_units = 248U;
    msg.custom.assign("VVHABPCMRALKDDIGGOBZKUVNHPILTQQNFPFHLQDGYRBRZQPJXRBBHWBSZZGMJCIRRAAWUDZZLAHBESWMMVFTDOTGDTNCTWMNPLKVQXSYUFJEDAFKLO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.7454009717704408);
    msg.setSource(65005U);
    msg.setSourceEntity(182U);
    msg.setDestination(15237U);
    msg.setDestinationEntity(104U);
    msg.timeout = 12518U;
    msg.lat = 0.5474208220296278;
    msg.lon = 0.5582410044355602;
    msg.z = 0.5818349406651998;
    msg.z_units = 107U;
    msg.speed = 0.6215054115160159;
    msg.speed_units = 74U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.45858105493932044;
    tmp_msg_0.y = 0.9564269769542154;
    tmp_msg_0.z = 0.6162798392476069;
    tmp_msg_0.t = 0.6927987872493907;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("IUCQBFNZOQQMPXHAFHLLMUYRWINDHXKXADZBCOQKFRDTYVRQJXSNAMYDDBSIJRWSBTDCPOMEHLDJUCKXIJEVWKRBYEGQLQAFFGELFMXLPLAANUVJTWBYRMNVGZELOJMOASNQVVIRUSTSCCJBNNDUMIKPZUFTZLKWWFYSFMTTESNIOZUAWWCQHRIKIHZWRPYGJFXIQOXVGYPPGMXSBGHZHWEVPCYEJGBKCLEJOHZOYGTVTKSVUUOTHP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.5877443363683503);
    msg.setSource(41229U);
    msg.setSourceEntity(197U);
    msg.setDestination(59639U);
    msg.setDestinationEntity(94U);
    msg.timeout = 28734U;
    msg.lat = 0.5968232563144945;
    msg.lon = 0.8619532432865207;
    msg.z = 0.12189997301253241;
    msg.z_units = 9U;
    msg.speed = 0.5335426505844086;
    msg.speed_units = 45U;
    msg.custom.assign("FHZBNPSESKKUNNTZGBUZWYVQZYWEPNKMRHQYQATHVBHFNWLCHEFTDVJUPKDBXACQCRPMNGA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.311918063337999);
    msg.setSource(17742U);
    msg.setSourceEntity(177U);
    msg.setDestination(28003U);
    msg.setDestinationEntity(246U);
    msg.timeout = 36657U;
    msg.lat = 0.1444677475316084;
    msg.lon = 0.6254692488437111;
    msg.z = 0.24733214777418988;
    msg.z_units = 214U;
    msg.speed = 0.0861837929146495;
    msg.speed_units = 246U;
    msg.custom.assign("VOJINFNOMVWHUJYSDGOBFCVFPHBNUGJKJMGGXDTJNFTHOAYQMCAOQTAKQPHWUMDFGYNEGXVPEIBCYZTNTRUPYJQLMYHGVKLSEAIWTZHVBUOAPWTPIQXKHIHCUXODAGAJBYUMQYWCPRRSMBRKJSBRCLDOPFMNM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.06735904461653763);
    msg.setSource(1720U);
    msg.setSourceEntity(223U);
    msg.setDestination(6336U);
    msg.setDestinationEntity(197U);
    msg.x = 0.6374595954543779;
    msg.y = 0.12987376197640388;
    msg.z = 0.5269410330004813;
    msg.t = 0.21011932320196836;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.40793778822209203);
    msg.setSource(2344U);
    msg.setSourceEntity(143U);
    msg.setDestination(59544U);
    msg.setDestinationEntity(106U);
    msg.x = 0.10436565423035271;
    msg.y = 0.6092060873854992;
    msg.z = 0.7707857912036182;
    msg.t = 0.6260875171751829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.1405518308897029);
    msg.setSource(54151U);
    msg.setSourceEntity(183U);
    msg.setDestination(23715U);
    msg.setDestinationEntity(17U);
    msg.x = 0.694216630111508;
    msg.y = 0.30569464907530997;
    msg.z = 0.16408828208230253;
    msg.t = 0.32123072666810293;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.1628253962124644);
    msg.setSource(32835U);
    msg.setSourceEntity(28U);
    msg.setDestination(5324U);
    msg.setDestinationEntity(92U);
    msg.timeout = 59138U;
    msg.name.assign("ACWIGAUTJVXNFWSGRZRUHQJJLRRRVNQNLTIQHORVENXQWEIOXJTFYHFEDPQGHBERSAG");
    msg.custom.assign("PJPKJHCAORDUFWDDQLTKYWNSBJZTMCGAQMRBPKCHLSTOGLZKZKRJVRBDPOTEISPLHDWUYFR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.7744851656892806);
    msg.setSource(27452U);
    msg.setSourceEntity(41U);
    msg.setDestination(46982U);
    msg.setDestinationEntity(222U);
    msg.timeout = 61540U;
    msg.name.assign("WIWWHEFBIDTRDVWFIZDDHDRJNXOQFKIMUOSVQGXFVPUESWBALYMZKYDJOFKTGCGCWXBBQUFUGPJHVAKLETHOEXLLARLAETUUKBOY");
    msg.custom.assign("ITVJRDNOWAPUPXOUCYLYDAQMQULPZJXVKNADVFBSYDXHTXYWLRJYSMBUNDLSSQAMWAEHBIZPMLJRQISGTPVBPFCHHGTZZKETEGZGJVDVMGRZCGLXDMSLFTOIORCOBJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.8654908077477292);
    msg.setSource(17445U);
    msg.setSourceEntity(191U);
    msg.setDestination(46836U);
    msg.setDestinationEntity(139U);
    msg.timeout = 36399U;
    msg.name.assign("WRAGPIYXAYXGUZZRMCMZNUBESDLLNCNYHTZLQTHBOLVJMJURXUKMXEIPQYVBMHLJHZHFDSVKZZXVNADKVHVFGIAVCHEKSNZXKTFRNIGILEYCTPWRNCCEBTDOGFJEKYKHXJTNLSCBDWXSPFWUWBMXFGSOZFEACMWUOAAMZTBGQEMDUIOYPWNCPVOQJTWBWVMYVDEDEOOLJQUIBQARUGIR");
    msg.custom.assign("QEWFJRLURAKIVGMCONSKNNEXSOQUHUIOVHPZVZDBWKTMMILFVMCTDRAGMAFCETTXJHFLUYZEMVKFOLJBEZFRKNFENIWEHWQPLASYKGWUAZSBFIPGZHNLNDDSHCXTHYIJVSXGYEKOGAUVITISYEPLJRTQPGPMWOGSCZNNSDJBYDYAKHCEFGRWNATDZBDFDLBBJBUJWXHXRPQZVUMOPRUPIDJOSXYCLQYKZWLMJKBY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.9696985768360099);
    msg.setSource(59228U);
    msg.setSourceEntity(171U);
    msg.setDestination(18354U);
    msg.setDestinationEntity(31U);
    msg.lat = 0.5990643347927288;
    msg.lon = 0.5377727663780549;
    msg.z = 0.3934490767082196;
    msg.z_units = 252U;
    msg.speed = 0.32328563450112136;
    msg.speed_units = 46U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 61677U;
    tmp_msg_0.off_x = 0.9591055922186129;
    tmp_msg_0.off_y = 0.3733559539482104;
    tmp_msg_0.off_z = 0.20907830557544982;
    msg.participants.push_back(tmp_msg_0);
    msg.start_time = 0.6427817164180896;
    msg.custom.assign("CDRIGDTBDTKQROIJRQSOKBHXPARUVTVYEAZMCQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.6151957268628466);
    msg.setSource(29005U);
    msg.setSourceEntity(56U);
    msg.setDestination(58490U);
    msg.setDestinationEntity(16U);
    msg.lat = 0.4420283777168371;
    msg.lon = 0.20500393306607667;
    msg.z = 0.539222211575791;
    msg.z_units = 62U;
    msg.speed = 0.3073126838258917;
    msg.speed_units = 157U;
    msg.start_time = 0.8176737109190687;
    msg.custom.assign("KVOICTJYFNRGWFQEDNWVAMKKJQYMCKVNNZMSXRHSDWBYZHBMQQTBJEFEZFPWVXATAKHUZGDTLPOMLTZGFJFYJOXDJSUIXUWVAASIRMRQHAXLVABWAOICHOXAOKKYYEDMDTNICNEIRUNBPQLHFEMRJCSNCIPTPCSCBOLZLWCMWTUPDTGBVHGRKQEGJBYSAFDEMLHHUODKNCJLZLRPKXWZGHXZEJIPGYNQXSSUIZUFSPILBGPEQFYV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.26843596350913124);
    msg.setSource(26529U);
    msg.setSourceEntity(164U);
    msg.setDestination(38788U);
    msg.setDestinationEntity(70U);
    msg.lat = 0.8150071683530635;
    msg.lon = 0.2831764313884956;
    msg.z = 0.25581838080555164;
    msg.z_units = 65U;
    msg.speed = 0.20606883885585203;
    msg.speed_units = 65U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 2919U;
    tmp_msg_0.off_x = 0.49807444372878173;
    tmp_msg_0.off_y = 0.9356072782212603;
    tmp_msg_0.off_z = 0.16615035583719706;
    msg.participants.push_back(tmp_msg_0);
    msg.start_time = 0.3137474974147134;
    msg.custom.assign("EOXBNQACLKFNKECBPRTOXVXHCLPQCKBIMMWRJHJXMYZTXLLNUAERKBZEVWZIKHGLZPHQMOAQJXTGGGPIDMJUZWRSIYLSUGKKTIWBYAQWNPMPBIOTAPNYYWMTZFFPHAYVNVJTRBSVMLXHUJXRRKDJKEHUNUNBCFTFWHRV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.09294258733811844);
    msg.setSource(25154U);
    msg.setSourceEntity(247U);
    msg.setDestination(33432U);
    msg.setDestinationEntity(183U);
    msg.vid = 39175U;
    msg.off_x = 0.10575487732212674;
    msg.off_y = 0.04211052628879208;
    msg.off_z = 0.49899039772715614;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.0313012629984567);
    msg.setSource(45890U);
    msg.setSourceEntity(82U);
    msg.setDestination(40639U);
    msg.setDestinationEntity(18U);
    msg.vid = 7777U;
    msg.off_x = 0.1876091492561539;
    msg.off_y = 0.44342386315198534;
    msg.off_z = 0.07271943749538579;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.23619660569594403);
    msg.setSource(19731U);
    msg.setSourceEntity(14U);
    msg.setDestination(50137U);
    msg.setDestinationEntity(141U);
    msg.vid = 37638U;
    msg.off_x = 0.015847921806870335;
    msg.off_y = 0.7794767237391091;
    msg.off_z = 0.6216910528549907;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.3014197467150932);
    msg.setSource(34313U);
    msg.setSourceEntity(86U);
    msg.setDestination(8847U);
    msg.setDestinationEntity(106U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.9999802618535357);
    msg.setSource(20028U);
    msg.setSourceEntity(165U);
    msg.setDestination(41814U);
    msg.setDestinationEntity(200U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.2558237686726331);
    msg.setSource(242U);
    msg.setSourceEntity(159U);
    msg.setDestination(43918U);
    msg.setDestinationEntity(250U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.6467155704496067);
    msg.setSource(58355U);
    msg.setSourceEntity(222U);
    msg.setDestination(6078U);
    msg.setDestinationEntity(24U);
    msg.mid = 8720U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.634864863045965);
    msg.setSource(60423U);
    msg.setSourceEntity(148U);
    msg.setDestination(43085U);
    msg.setDestinationEntity(253U);
    msg.mid = 22540U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.8486677187397808);
    msg.setSource(25463U);
    msg.setSourceEntity(117U);
    msg.setDestination(56593U);
    msg.setDestinationEntity(0U);
    msg.mid = 17142U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.5179082982306932);
    msg.setSource(6960U);
    msg.setSourceEntity(75U);
    msg.setDestination(65483U);
    msg.setDestinationEntity(208U);
    msg.state = 242U;
    msg.eta = 1087U;
    msg.info.assign("AMFMNRPSLXORDWJKSACESVLNTMDLFSYJBTEGJKQHQUYXLHBKUPGYDQEJKAJKPAWXPUYBPNZFPCFYSYMVZIVNCVGOICSWVWILXRRJRCBQRJZCOR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.0032584097156040936);
    msg.setSource(28152U);
    msg.setSourceEntity(212U);
    msg.setDestination(44782U);
    msg.setDestinationEntity(226U);
    msg.state = 136U;
    msg.eta = 29250U;
    msg.info.assign("KACELIMCHEDHJZSULYVMDPXMMBOUZSTGNZLOTMBGZUDANPTOGHCIKAJPCAAECJGIJVKAOYIXBIWLLLZUMYLEXMPXUJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.3846326381204068);
    msg.setSource(22650U);
    msg.setSourceEntity(132U);
    msg.setDestination(60371U);
    msg.setDestinationEntity(224U);
    msg.state = 254U;
    msg.eta = 4362U;
    msg.info.assign("VVGDCPRBLGJVYGTIBTJNAEURKQARLJPSOBJNAPFSTABPAVMEGOMCNONYEEWLADHQZUYLHFSYZQZDNORGMMKJTXDUXZUTMVAQYVAWDEYPQCBPTXREFXELOCDCUGYKGCJFHWRPVHKIXAXMSVGNFUSJYTBHWYBSVEHMRGJCYQWJLWWUKWOUKSNOPHCDISUBWZOICNBFZUZIZNVHTZMKX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.021892280200128456);
    msg.setSource(23427U);
    msg.setSourceEntity(105U);
    msg.setDestination(23500U);
    msg.setDestinationEntity(211U);
    msg.system = 24510U;
    msg.duration = 50374U;
    msg.speed = 0.9422753914669214;
    msg.speed_units = 4U;
    msg.x = 0.5932072009679322;
    msg.y = 0.20998326828942881;
    msg.z = 0.5850350904313507;
    msg.z_units = 215U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.011344525804216965);
    msg.setSource(62588U);
    msg.setSourceEntity(250U);
    msg.setDestination(48000U);
    msg.setDestinationEntity(90U);
    msg.system = 13139U;
    msg.duration = 15661U;
    msg.speed = 0.21621412844397392;
    msg.speed_units = 18U;
    msg.x = 0.3000508869156532;
    msg.y = 0.5605381746733483;
    msg.z = 0.7745585334356516;
    msg.z_units = 228U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.3513798040941646);
    msg.setSource(57425U);
    msg.setSourceEntity(251U);
    msg.setDestination(41184U);
    msg.setDestinationEntity(130U);
    msg.system = 5846U;
    msg.duration = 36096U;
    msg.speed = 0.5615409875369195;
    msg.speed_units = 240U;
    msg.x = 0.3781299679405623;
    msg.y = 0.9788402331494773;
    msg.z = 0.8473424593016758;
    msg.z_units = 163U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.531981158785385);
    msg.setSource(62429U);
    msg.setSourceEntity(65U);
    msg.setDestination(37408U);
    msg.setDestinationEntity(45U);
    msg.lat = 0.7146399406356805;
    msg.lon = 0.17345977979181904;
    msg.speed = 0.27940718194664904;
    msg.speed_units = 157U;
    msg.duration = 3727U;
    msg.sys_a = 24626U;
    msg.sys_b = 9887U;
    msg.move_threshold = 0.49014568531806446;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.6901829971619293);
    msg.setSource(8949U);
    msg.setSourceEntity(95U);
    msg.setDestination(7921U);
    msg.setDestinationEntity(244U);
    msg.lat = 0.3801511904211675;
    msg.lon = 0.021248222941743222;
    msg.speed = 0.34060258268593735;
    msg.speed_units = 82U;
    msg.duration = 49480U;
    msg.sys_a = 4249U;
    msg.sys_b = 60835U;
    msg.move_threshold = 0.8833668096955012;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.5031854792800909);
    msg.setSource(52766U);
    msg.setSourceEntity(130U);
    msg.setDestination(10284U);
    msg.setDestinationEntity(67U);
    msg.lat = 0.8830847196489564;
    msg.lon = 0.5627155193755865;
    msg.speed = 0.6055334891284722;
    msg.speed_units = 85U;
    msg.duration = 27622U;
    msg.sys_a = 51018U;
    msg.sys_b = 50607U;
    msg.move_threshold = 0.6793845849326349;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.9983966873376773);
    msg.setSource(45380U);
    msg.setSourceEntity(243U);
    msg.setDestination(23322U);
    msg.setDestinationEntity(62U);
    msg.lat = 0.7926558807079963;
    msg.lon = 0.3970672157939883;
    msg.z = 0.7513579066000364;
    msg.z_units = 249U;
    msg.speed = 0.9455633675774374;
    msg.speed_units = 201U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.8982423701450017;
    tmp_msg_0.lon = 0.6588307501764088;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("UFCVDCXFXHAJDTJIOCXIBOZCJYABQILKKFSKDIVQXXYKVBPHHIOSBYBTOQTWMRKNBKPUEKZMQAHSWUDSMEUMJCIQQOACOWAZGIVSSPTRCZXPUGRWHBRQFKMLTFCLPRFDXJPVWLQJETHAEUZCFTJEAVRWZVJDMGSNXBDGNSPOYLRENWJEVXQYSYORLGBGVIFNCOTRXDPNGPFIJNLGWLEHEBHMHWUNEKLAZMS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.591065118380974);
    msg.setSource(59756U);
    msg.setSourceEntity(113U);
    msg.setDestination(48366U);
    msg.setDestinationEntity(76U);
    msg.lat = 0.5005139954951423;
    msg.lon = 0.7914077969110642;
    msg.z = 0.23586963454641208;
    msg.z_units = 125U;
    msg.speed = 0.803799587761235;
    msg.speed_units = 7U;
    msg.custom.assign("JURHEYJUHIYEITUAOFATWKZFQUOVCRARQLPAQGBMJVAVKIQMGLLCYJQIWGCWAZKSJBXTMWENKDXRUUEHSMOBUULYBPMLQECLCAJECWOYRGMZLESPXEQXAYDLGSPIWVQGLBNPFQZFOTCZVXSWDHFKVUVPKSARZOFKK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.2747136170070045);
    msg.setSource(23766U);
    msg.setSourceEntity(82U);
    msg.setDestination(32579U);
    msg.setDestinationEntity(44U);
    msg.lat = 0.20367791371097133;
    msg.lon = 0.5218727377308287;
    msg.z = 0.12758362515274202;
    msg.z_units = 249U;
    msg.speed = 0.5094468878800883;
    msg.speed_units = 194U;
    msg.custom.assign("EMRETOWJRMQVINVTXEWYNAEIFQLSBSVSISMDEXFNLGPHURZCRVPVHPEPIKDUVRKANHDWJBNTUCWFSGUIQBIGLNCZDUGHJXBRTZTAPCZYSATOSJMGFLRMKYUZEXDXQYBBBACYSUNPKXGOIOMZJEMXVFAQCHXPOPOQPRGFLNXYDDAWPFNSZEWLXLTRMZSUHWQTKWOZJDBOIJOQHAKRG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.36890000687960744);
    msg.setSource(63101U);
    msg.setSourceEntity(147U);
    msg.setDestination(48115U);
    msg.setDestinationEntity(54U);
    msg.lat = 0.25019771290759096;
    msg.lon = 0.4942548109580147;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.7116927067631084);
    msg.setSource(7339U);
    msg.setSourceEntity(248U);
    msg.setDestination(11128U);
    msg.setDestinationEntity(102U);
    msg.lat = 0.8374175271989357;
    msg.lon = 0.8301306460204656;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.3294516780530482);
    msg.setSource(44990U);
    msg.setSourceEntity(88U);
    msg.setDestination(50392U);
    msg.setDestinationEntity(21U);
    msg.lat = 0.8098697782762471;
    msg.lon = 0.14491762957143373;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.5518647122251584);
    msg.setSource(62927U);
    msg.setSourceEntity(89U);
    msg.setDestination(58995U);
    msg.setDestinationEntity(34U);
    msg.timeout = 12055U;
    msg.lat = 0.3163331040527573;
    msg.lon = 0.2248808915930426;
    msg.z = 0.40213733225197446;
    msg.z_units = 175U;
    msg.pitch = 0.6771982824939848;
    msg.amplitude = 0.9474439069983928;
    msg.duration = 12592U;
    msg.speed = 0.2219960211985471;
    msg.speed_units = 221U;
    msg.radius = 0.9841287409937157;
    msg.direction = 11U;
    msg.custom.assign("HMPTOUDDQXGMYYBJOTWFCVKMCGNUYQTEDJTTPVXSNNIJBKEWZNYMSDAHFUJKUYCWYXCYGXHBELPFQXSEUJPIAESIWDYKZPESQITALABJSZEPHLZS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.7005780445479108);
    msg.setSource(42500U);
    msg.setSourceEntity(33U);
    msg.setDestination(14740U);
    msg.setDestinationEntity(230U);
    msg.timeout = 34035U;
    msg.lat = 0.5506040126929868;
    msg.lon = 0.7053604080304046;
    msg.z = 0.45934852084816047;
    msg.z_units = 46U;
    msg.pitch = 0.5240102227588945;
    msg.amplitude = 0.05235090550440957;
    msg.duration = 33003U;
    msg.speed = 0.5717054726345023;
    msg.speed_units = 61U;
    msg.radius = 0.02072497075053037;
    msg.direction = 20U;
    msg.custom.assign("JGXLVHNUKSHVAUZWYNDKHWWRLYXDHRALBTNNVQMLIHCFGRTXHFUJMLXIPOXZPPPBWZICAIVRKPFVJTJRNFRZZBUXOUAPHCIMFLMSZPARAGBOTGHYWMLOSQMAAJTOMDYEFTO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.020946702307767517);
    msg.setSource(15561U);
    msg.setSourceEntity(34U);
    msg.setDestination(61247U);
    msg.setDestinationEntity(114U);
    msg.timeout = 31343U;
    msg.lat = 0.08527749262995998;
    msg.lon = 0.16722912211810947;
    msg.z = 0.6741360602433031;
    msg.z_units = 193U;
    msg.pitch = 0.34623003645862904;
    msg.amplitude = 0.39433805569482006;
    msg.duration = 25533U;
    msg.speed = 0.6154863034186898;
    msg.speed_units = 88U;
    msg.radius = 0.772437491024951;
    msg.direction = 226U;
    msg.custom.assign("LLHTIBGOPQABGXYULZPSHUXNJKHOKMUCEJSIQKXFBWTHKENTCMAPPYMGQLKBBMLEEZLUWIBFJBMTJXRUCTVAFZGRGNWWXRQVYFONPUAXRXRQHDTDJFYQZIPXBPVYAHWVOLJCUGFTZZRBFWVCZJIVNKMDYWPKLDPDQRVIEUPWNBKMASYFIAYDSSSCYITRGKHMECJRSVMOOHVCQIUWUFDEICEVDHTHKMXXDZQOSANLRWZEADAOLGGFSNGZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.9646632997922715);
    msg.setSource(2198U);
    msg.setSourceEntity(198U);
    msg.setDestination(46868U);
    msg.setDestinationEntity(9U);
    msg.formation_name.assign("WIRTGVNKJLIFEQDYFCTZBQYJIXZKSORDDWGWVSUGAOQVYUNUUFKWPVPJRQIQZQICSYMXXAMQPDJSCGURZWWTFTQINYWALYBOMOENBLPWLBDGZOXCELFJLYAXNDTFPSMVGIVHZHDHRNHFOCDYKKAKLCNGXXWHASASOHOOAVBQAJHASUUBKZMPFOBDPEGTLJJMKIMPZCGKSNNSRHRRMTEXFULYTWEHTMBCGEIDRJJVPTEP");
    msg.reference_frame = 120U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 52999U;
    tmp_msg_0.off_x = 0.9905750127416655;
    tmp_msg_0.off_y = 0.7361143788326088;
    tmp_msg_0.off_z = 0.5958916106574672;
    msg.participants.push_back(tmp_msg_0);
    msg.custom.assign("HACWDFLZYYQKQHSIKRDAN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.6347659779448968);
    msg.setSource(9976U);
    msg.setSourceEntity(66U);
    msg.setDestination(11565U);
    msg.setDestinationEntity(165U);
    msg.formation_name.assign("VBOTWBRNPYCYNENRGABSQWLLGAJLGDJVSVYHZBZKCTGEIWORFILPRVKWDCPBCIMEJXVAMJSXIKAXNCBRNQORTMYWBZJOHOKAQFKQQHOOEZDBFPWSESZJIGCYFMAGOVAUCQMLHHUPUXMDJHZUETX");
    msg.reference_frame = 77U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 33196U;
    tmp_msg_0.off_x = 0.6302960488795268;
    tmp_msg_0.off_y = 0.3720603087140173;
    tmp_msg_0.off_z = 0.47120755320607444;
    msg.participants.push_back(tmp_msg_0);
    msg.custom.assign("SIQXHOMHJJASWZIOACABNUDGNCIOPUCHUCPYASVPTEUUKJHXRUYFNOWICQTVPSVNJVSTCWRQT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.440572955084532);
    msg.setSource(54721U);
    msg.setSourceEntity(73U);
    msg.setDestination(18907U);
    msg.setDestinationEntity(130U);
    msg.formation_name.assign("YEIMQIWPGKCVAYZLFJHWCSXM");
    msg.reference_frame = 173U;
    msg.custom.assign("FXJEASFYPMDYUWDJHXYVRRBAHSGTDBLNISBRLEKVGGHTIAMSNPWTBOFFKVZILDQKOAAQCMGDTXRLDCPMHSRYYVXJKHFHZQONFWPPJZI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.6103517116074172);
    msg.setSource(50429U);
    msg.setSourceEntity(60U);
    msg.setDestination(133U);
    msg.setDestinationEntity(23U);
    msg.group_name.assign("QOQSCEGKDHYSIRVQINWKYAHSWKXNFMLHNSSTAJXABONVEFROLFDJOBIRAVIGFUZTYVYLBSLHKQUTTFWZCZDTNLR");
    msg.formation_name.assign("KFROIBNPRHQQYZVNXDSASVDJLWQQBJLJDZZULGMFICHLJEYUCEAW");
    msg.plan_id.assign("FPVXQJUTDCHPDQXIAKXOZTBZBHUFNCXFSCMQUHQDZTJONMRDUCHVLAPSU");
    msg.description.assign("RRMGSVPFUVMUEJZWTPHUCIOUFDHNCDUYKTNHMFZJKMBWPFRNLOBAYQBCVQZXGGDTAISJGREYJJQZJSYXFKGAX");
    msg.leader_speed = 0.3491351190301748;
    msg.leader_bank_lim = 0.3574319603301881;
    msg.pos_sim_err_lim = 0.2437253643900904;
    msg.pos_sim_err_wrn = 0.8441127298226293;
    msg.pos_sim_err_timeout = 959U;
    msg.converg_max = 0.33845204871361234;
    msg.converg_timeout = 51278U;
    msg.comms_timeout = 47520U;
    msg.turb_lim = 0.602002164316834;
    msg.custom.assign("BZONBNYAQDGGYBCNDKESBFHKQUMFZYEBTOIDMSKGHMTWUATXCLOMANZWCXQESJENXZUILQHLBCVIHXPHRCWJKVNXYXDFPWOHJPCWHEVVQDOMUSTVXCXVBZMJGJY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.5738565005642525);
    msg.setSource(41898U);
    msg.setSourceEntity(88U);
    msg.setDestination(61306U);
    msg.setDestinationEntity(155U);
    msg.group_name.assign("YUROKETPFVOVFGDPEUDTVCWIZHNZLIRNPQAYQYGVUSBRELMIUMOLEOZKSHYVMGUBOOQUPYOPJAQLUWFWRXMICWQLXJDJAGXIWTBNEQDITUBZBAKILNSMNYRKFLPCVPGKFMOTBGWQHSSZCWREZERZRZJV");
    msg.formation_name.assign("BTEBCIBZQFMIDKIOTBMUKMNCW");
    msg.plan_id.assign("HVUASLNAWHYTPBVDPKSAYTKZLVZYNSCWPOHFJFDXIGYXZZPBKUJFTINWYGDUUJVHFYVOUVZMDTZLXIMTJNQLPDEWCUCXWKGCXSRAAMBQCIUDNJIUDGQMJPGLPFHATIUGFBEYSHBNJCAKSFSESEIOROHCWCXPKBQBBYRNITWBSAJXLUOXQPKOQWPZZQANFQBEZFMEDEDOQKNFVRLDVEYAREKCMEQOOOVTI");
    msg.description.assign("LAOEUKPRQXPMVLOETPAVGFAGGNTUQSKQJNATDKFBRDDXBTEHUAHBKIIUINGFWCCEYWWPQEUDVDJLDAHGESSLIEFGOSKLOUAOZHJCRZRPOSEIWIFJURWMXLPGCBTBSBBKPBXCSMVCIFLQJVVRMNNOJDSCQTDLEJWQZYQJCXRRYKFYOONHXXFKJYKSATLNGHUPPKIGHGYIUWZZMMHYHTNWVOBZQBLXPTNE");
    msg.leader_speed = 0.6045437260383715;
    msg.leader_bank_lim = 0.49455628113477146;
    msg.pos_sim_err_lim = 0.5425532641628225;
    msg.pos_sim_err_wrn = 0.24737755410523754;
    msg.pos_sim_err_timeout = 1411U;
    msg.converg_max = 0.7528053470122622;
    msg.converg_timeout = 31178U;
    msg.comms_timeout = 24948U;
    msg.turb_lim = 0.21219865937268745;
    msg.custom.assign("RNATTXMBAXTWVNASJBODQQFUGFLJWXXMWPFUESZRKQRGBIFPLKRLCCYLJFEUZXOZCCXIHDAMWVWBDPPCNYQZUMRRGSEVDREOAOXEKICPBDZIDVUFYZHZUBOUFXRRAMUIZMBOQPLWEHMHYEKOZWKDXSNSSDNGCWFQACILGJOFPGWOPZUAHQMVCYTBHQMLVHJYANGJSTMSYT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.2683785753669634);
    msg.setSource(39503U);
    msg.setSourceEntity(227U);
    msg.setDestination(64945U);
    msg.setDestinationEntity(206U);
    msg.group_name.assign("HZZWFZRJUALGMPKFPJQXUOURVCDLUQEJRVTNOZGBZQEBUAFCGUIJIBEYBDSHYJYQLBIDTKPETZQHAKFTHTOWMSDJVCVLFTYEZOCVJXLHKGQWWPIQGSLRLXVMJVZTNSODKPKGJOTPFIFJELRDKYYYBGFXIXYNYHCLINMINASWQYXTWARKRCDSNMKPGUBNSARELCHOHARUMXDUNDIGHVWPAKUTAFWOBMCGABBOEECDPFNXSSXZEMPXMCQVN");
    msg.formation_name.assign("RDMYNCMLJWQIOYABJQKSOLTUDRXRSCGHJRBOHYELRPNULGYZJCZISGGVKMZUGRMUBSKWKMFQQWAHJUNYVFWODZZGSXOPXEVSEFFZSOLOQFNKKDVKIAUIXUACXJMMGVPDEL");
    msg.plan_id.assign("YGSJNGSLAEDECNSTCIWCFUGQCPFBIXZOZHKJNOUFRLCIUMWXKOHQPEIIIOVXTRNERAMYFMWKLHXSIYGSEQVPUDOVGYLDFZKZZJYZFFEZVATJLEUQNQLBMWGPMJNHPDWUATCDDXRJIQWGMLXSXHYYVTVBOVHJRSOBHARKUXB");
    msg.description.assign("EZWMEAUOWTSKGZRTCXRGSBLHBHWVSZXINLHNDPTZUHNALLOFTQJBOXOCYYCMCOPFJIJAQYLVQWBDFXGBKCTAQEVFFVUUXNYYWAE");
    msg.leader_speed = 0.5491110692436286;
    msg.leader_bank_lim = 0.08756209523066716;
    msg.pos_sim_err_lim = 0.2821712941412352;
    msg.pos_sim_err_wrn = 0.946508932189437;
    msg.pos_sim_err_timeout = 43524U;
    msg.converg_max = 0.4296982128823238;
    msg.converg_timeout = 44080U;
    msg.comms_timeout = 16294U;
    msg.turb_lim = 0.8260529767507194;
    msg.custom.assign("DUHIWJVJGLIWXZCURKEOEEPIVIFYZLNKTPQBBBFFIDLJYWXLYNGWTMUHMSLDECJOKTPFGIRWMODDALXHSLSAAGQSVCSQGQNOJYPKKMANKNCNUFIQLHCXIIKEVRAXYUVCUJOBRTZNWSSZXYQIKUXPMTJRGOQBPORZU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.6358525594746177);
    msg.setSource(11946U);
    msg.setSourceEntity(134U);
    msg.setDestination(63534U);
    msg.setDestinationEntity(73U);
    msg.control_src = 18993U;
    msg.control_ent = 44U;
    msg.timeout = 0.5371605103934498;
    msg.loiter_radius = 0.8570737028740918;
    msg.altitude_interval = 0.029073719245363838;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.16290234220064304);
    msg.setSource(56789U);
    msg.setSourceEntity(224U);
    msg.setDestination(44131U);
    msg.setDestinationEntity(114U);
    msg.control_src = 13024U;
    msg.control_ent = 11U;
    msg.timeout = 0.7607173527958536;
    msg.loiter_radius = 0.7677187841347335;
    msg.altitude_interval = 0.11377183233263144;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.6563338441345982);
    msg.setSource(2433U);
    msg.setSourceEntity(132U);
    msg.setDestination(44625U);
    msg.setDestinationEntity(122U);
    msg.control_src = 37641U;
    msg.control_ent = 66U;
    msg.timeout = 0.14061985609650962;
    msg.loiter_radius = 0.9579309776751468;
    msg.altitude_interval = 0.4676930545662965;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.753699783818665);
    msg.setSource(6413U);
    msg.setSourceEntity(95U);
    msg.setDestination(370U);
    msg.setDestinationEntity(227U);
    msg.flags = 239U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.6088178590721444;
    tmp_msg_0.speed_units = 197U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.6577030973784669;
    tmp_msg_1.z_units = 180U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.010972704741128547;
    msg.lon = 0.8966180421815364;
    msg.radius = 0.03861610028757412;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.5646425666607992);
    msg.setSource(11748U);
    msg.setSourceEntity(207U);
    msg.setDestination(11178U);
    msg.setDestinationEntity(130U);
    msg.flags = 230U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.5457726907446797;
    tmp_msg_0.speed_units = 211U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.8554253130461311;
    tmp_msg_1.z_units = 167U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.559437289163764;
    msg.lon = 0.11328290263292617;
    msg.radius = 0.7638331346903282;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.1022841259478332);
    msg.setSource(52963U);
    msg.setSourceEntity(58U);
    msg.setDestination(5248U);
    msg.setDestinationEntity(205U);
    msg.flags = 241U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.5672991045671325;
    tmp_msg_0.speed_units = 123U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.6903923264065679;
    tmp_msg_1.z_units = 154U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.55625804722787;
    msg.lon = 0.7186616433158076;
    msg.radius = 0.48146222154810014;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.6340988150376102);
    msg.setSource(44325U);
    msg.setSourceEntity(112U);
    msg.setDestination(21449U);
    msg.setDestinationEntity(211U);
    msg.control_src = 43561U;
    msg.control_ent = 166U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 229U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.6264711698216715;
    tmp_tmp_msg_0_0.speed_units = 36U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.6006741597153888;
    tmp_tmp_msg_0_1.z_units = 57U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.3013887451894316;
    tmp_msg_0.lon = 0.9971625121797212;
    tmp_msg_0.radius = 0.6073876389192224;
    msg.reference.set(tmp_msg_0);
    msg.state = 195U;
    msg.proximity = 50U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.4249400282311373);
    msg.setSource(33705U);
    msg.setSourceEntity(201U);
    msg.setDestination(39539U);
    msg.setDestinationEntity(135U);
    msg.control_src = 22740U;
    msg.control_ent = 42U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 157U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.7356916147511985;
    tmp_tmp_msg_0_0.speed_units = 242U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.5943058928208221;
    tmp_tmp_msg_0_1.z_units = 95U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.6740604251708479;
    tmp_msg_0.lon = 0.3568794257289205;
    tmp_msg_0.radius = 0.583323831279457;
    msg.reference.set(tmp_msg_0);
    msg.state = 45U;
    msg.proximity = 103U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.3928832213333363);
    msg.setSource(30836U);
    msg.setSourceEntity(234U);
    msg.setDestination(61860U);
    msg.setDestinationEntity(168U);
    msg.control_src = 41677U;
    msg.control_ent = 196U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 161U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.012668440021823768;
    tmp_tmp_msg_0_0.speed_units = 16U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.6307213560560256;
    tmp_tmp_msg_0_1.z_units = 84U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.010548539690193204;
    tmp_msg_0.lon = 0.5525760356711841;
    tmp_msg_0.radius = 0.6772139685556754;
    msg.reference.set(tmp_msg_0);
    msg.state = 163U;
    msg.proximity = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.27752314213270635);
    msg.setSource(64864U);
    msg.setSourceEntity(0U);
    msg.setDestination(9000U);
    msg.setDestinationEntity(111U);
    msg.ax_cmd = 0.4850156805388771;
    msg.ay_cmd = 0.5383002867299718;
    msg.az_cmd = 0.8265087317291961;
    msg.ax_des = 0.03597246679104682;
    msg.ay_des = 0.1590972216228166;
    msg.az_des = 0.5734978523354227;
    msg.virt_err_x = 0.10781019010449477;
    msg.virt_err_y = 0.6924885685212666;
    msg.virt_err_z = 0.42308427806393534;
    msg.surf_fdbk_x = 0.021177410826199172;
    msg.surf_fdbk_y = 0.6343310368032345;
    msg.surf_fdbk_z = 0.016725523174470958;
    msg.surf_unkn_x = 0.05068443906206421;
    msg.surf_unkn_y = 0.4336489931155245;
    msg.surf_unkn_z = 0.933823025452567;
    msg.ss_x = 0.8823127490964668;
    msg.ss_y = 0.5232343230632897;
    msg.ss_z = 0.7878143504892123;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.04891257229626189);
    msg.setSource(36642U);
    msg.setSourceEntity(229U);
    msg.setDestination(62806U);
    msg.setDestinationEntity(143U);
    msg.ax_cmd = 0.49478363413999626;
    msg.ay_cmd = 0.04855923620229041;
    msg.az_cmd = 0.0009659521283532646;
    msg.ax_des = 0.8622896517236988;
    msg.ay_des = 0.3633093605966632;
    msg.az_des = 0.8644431116639221;
    msg.virt_err_x = 0.7843942327448665;
    msg.virt_err_y = 0.23850914504076348;
    msg.virt_err_z = 0.9483992427997386;
    msg.surf_fdbk_x = 0.8090979279534578;
    msg.surf_fdbk_y = 0.14177223122258786;
    msg.surf_fdbk_z = 0.07560542615838384;
    msg.surf_unkn_x = 0.0992140440066106;
    msg.surf_unkn_y = 0.6390414322705372;
    msg.surf_unkn_z = 0.7953303560319661;
    msg.ss_x = 0.14710110272556853;
    msg.ss_y = 0.40042342897751915;
    msg.ss_z = 0.8865339461247974;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.08656198729084752);
    msg.setSource(64650U);
    msg.setSourceEntity(98U);
    msg.setDestination(31656U);
    msg.setDestinationEntity(223U);
    msg.ax_cmd = 0.40192588483575964;
    msg.ay_cmd = 0.7469342854239179;
    msg.az_cmd = 0.0305157602748114;
    msg.ax_des = 0.3645427651706534;
    msg.ay_des = 0.41580359338500883;
    msg.az_des = 0.20236564064074447;
    msg.virt_err_x = 0.08720151737032589;
    msg.virt_err_y = 0.05550808169439447;
    msg.virt_err_z = 0.659027333210074;
    msg.surf_fdbk_x = 0.4354199606870378;
    msg.surf_fdbk_y = 0.6953206877961687;
    msg.surf_fdbk_z = 0.6019092990625345;
    msg.surf_unkn_x = 0.036168677948527406;
    msg.surf_unkn_y = 0.6914605416566802;
    msg.surf_unkn_z = 0.4576077416385409;
    msg.ss_x = 0.21016339599440903;
    msg.ss_y = 0.66394707238077;
    msg.ss_z = 0.9723895804132077;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("VVQUHYKLFCBERCBLHEKCQZRXXXYSMMUDBRURSJJIYTVBHJVP");
    tmp_msg_0.dist = 0.3924710610712496;
    tmp_msg_0.err = 0.13619125163294965;
    tmp_msg_0.ctrl_imp = 0.15768649046087724;
    tmp_msg_0.rel_dir_x = 0.3344632525705279;
    tmp_msg_0.rel_dir_y = 0.1144541751690129;
    tmp_msg_0.rel_dir_z = 0.5516544454756762;
    tmp_msg_0.err_x = 0.28639039502512087;
    tmp_msg_0.err_y = 0.6047457351857476;
    tmp_msg_0.err_z = 0.5315876265901426;
    tmp_msg_0.rf_err_x = 0.6469987065698041;
    tmp_msg_0.rf_err_y = 0.9567024455703116;
    tmp_msg_0.rf_err_z = 0.3219357841728594;
    tmp_msg_0.rf_err_vx = 0.24995344538332065;
    tmp_msg_0.rf_err_vy = 0.944837250849565;
    tmp_msg_0.rf_err_vz = 0.4501876541359756;
    tmp_msg_0.ss_x = 0.7154857820906256;
    tmp_msg_0.ss_y = 0.7016884121533297;
    tmp_msg_0.ss_z = 0.3734117821524633;
    tmp_msg_0.virt_err_x = 0.8552069057675014;
    tmp_msg_0.virt_err_y = 0.0669618510903095;
    tmp_msg_0.virt_err_z = 0.9424978008190622;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.7188369835616071);
    msg.setSource(51748U);
    msg.setSourceEntity(27U);
    msg.setDestination(39011U);
    msg.setDestinationEntity(244U);
    msg.s_id.assign("YVBNCWOYLLXYLKOAHWDSVRDKYGBBUOBOUXEFTINJVTIYDEEZIGYENGMQYUTHHJ");
    msg.dist = 0.8913958950940062;
    msg.err = 0.3453810844661621;
    msg.ctrl_imp = 0.6918460508755478;
    msg.rel_dir_x = 0.8574629471571626;
    msg.rel_dir_y = 0.940818673561984;
    msg.rel_dir_z = 0.834198832332717;
    msg.err_x = 0.19360820362408881;
    msg.err_y = 0.58103305528938;
    msg.err_z = 0.42784663052575367;
    msg.rf_err_x = 0.23896847393786536;
    msg.rf_err_y = 0.3163766019015469;
    msg.rf_err_z = 0.7695453194021062;
    msg.rf_err_vx = 0.024099981388809533;
    msg.rf_err_vy = 0.09623143853178795;
    msg.rf_err_vz = 0.6800617113964526;
    msg.ss_x = 0.04173944492471282;
    msg.ss_y = 0.8741585088840137;
    msg.ss_z = 0.8757227702421115;
    msg.virt_err_x = 0.7064658791268023;
    msg.virt_err_y = 0.4273619132489225;
    msg.virt_err_z = 0.39415724496335436;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.9263270723875628);
    msg.setSource(60204U);
    msg.setSourceEntity(142U);
    msg.setDestination(50995U);
    msg.setDestinationEntity(81U);
    msg.s_id.assign("DCZWBEADLGCKIYTGJKKDPFZQMGICFLXYUYLXDOVSJEJLZRIMRBTZRXATVWDQGFZBPDMOEWQSZDAHEWHDLIIBTDU");
    msg.dist = 0.3849492722707928;
    msg.err = 0.3974305444795184;
    msg.ctrl_imp = 0.15258981699587937;
    msg.rel_dir_x = 0.6884468334018411;
    msg.rel_dir_y = 0.32970715655667515;
    msg.rel_dir_z = 0.7710086159282402;
    msg.err_x = 0.842221089011053;
    msg.err_y = 0.7011437763511427;
    msg.err_z = 0.6376140131836008;
    msg.rf_err_x = 0.8891760509035928;
    msg.rf_err_y = 0.8260469691030684;
    msg.rf_err_z = 0.3546925305119776;
    msg.rf_err_vx = 0.9348171227802661;
    msg.rf_err_vy = 0.8702744862211093;
    msg.rf_err_vz = 0.39291413325422997;
    msg.ss_x = 0.6936695740598761;
    msg.ss_y = 0.1306759937235129;
    msg.ss_z = 0.09064862642473381;
    msg.virt_err_x = 0.3031692869721955;
    msg.virt_err_y = 0.21539720550495212;
    msg.virt_err_z = 0.9265798203537364;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.4406762661906386);
    msg.setSource(3301U);
    msg.setSourceEntity(19U);
    msg.setDestination(33436U);
    msg.setDestinationEntity(157U);
    msg.s_id.assign("FULRIMEDTSVTKWIUNAVYLZBUVCTKPJEQGVYDHJNBBHFSCDIUXZPMDHEZCBTTWRXKFPIAKDOBYFOJGQPKAGXCIQHZINQGRQZMRANUCUJ");
    msg.dist = 0.1916087127270395;
    msg.err = 0.7448711992808056;
    msg.ctrl_imp = 0.5953576815265967;
    msg.rel_dir_x = 0.026125642165771623;
    msg.rel_dir_y = 0.5006970966186066;
    msg.rel_dir_z = 0.7183918055207164;
    msg.err_x = 0.46823041426362977;
    msg.err_y = 0.7095489204654634;
    msg.err_z = 0.8950198281459302;
    msg.rf_err_x = 0.9581411091188275;
    msg.rf_err_y = 0.4819834959807814;
    msg.rf_err_z = 0.21169201013747507;
    msg.rf_err_vx = 0.7945134144766962;
    msg.rf_err_vy = 0.9132123041418;
    msg.rf_err_vz = 0.7038653292576581;
    msg.ss_x = 0.6056126624476531;
    msg.ss_y = 0.7314004909598066;
    msg.ss_z = 0.5990973427606413;
    msg.virt_err_x = 0.6443876358887877;
    msg.virt_err_y = 0.6004155700054951;
    msg.virt_err_z = 0.655039960472998;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.05693855886807264);
    msg.setSource(21736U);
    msg.setSourceEntity(88U);
    msg.setDestination(32518U);
    msg.setDestinationEntity(36U);
    msg.timeout = 30515U;
    msg.rpm = 0.9457643620499127;
    msg.direction = 19U;
    msg.custom.assign("SAFYWBQIPEHTKUQEWBPOTXUSSXYLOANGHYJSRDDSAZQJRZPZMLMPQFNSWBKTYJMKUCJODWEUXZTMWHCLWKMED");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.7850264350340791);
    msg.setSource(12495U);
    msg.setSourceEntity(248U);
    msg.setDestination(48788U);
    msg.setDestinationEntity(197U);
    msg.timeout = 41947U;
    msg.rpm = 0.7034555027318514;
    msg.direction = 152U;
    msg.custom.assign("UAONFGASXRVUDMHGVUZAOOFKFFQTEYYFHXZLBNWUCSEJVGWNIYRZOQBTDZDXHVELOKTPTTOFGHYCJEQZCAHFCYDWSWEYXRTLTTGQLIBJRPVKIRKBBIPYPWDYOGEWPCD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.10706612437509144);
    msg.setSource(32177U);
    msg.setSourceEntity(73U);
    msg.setDestination(47249U);
    msg.setDestinationEntity(13U);
    msg.timeout = 9776U;
    msg.rpm = 0.9824249074376616;
    msg.direction = 176U;
    msg.custom.assign("THJAZTPMXGMZYOEUCUFWICQAOBBXSFSSWNAQUDKLAOGGTULQBMAWDWDMYXZNBBXICIPTLUVGXRJDYOMYNDGUECVAXJXSSMFETRPCVVWWDPYTGFUARZJFVQULYVDRBZCNRFOZFJDNRAORMREKHRVJHW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.7944946037312232);
    msg.setSource(21292U);
    msg.setSourceEntity(134U);
    msg.setDestination(15101U);
    msg.setDestinationEntity(244U);
    msg.formation_name.assign("DOFFRCMZYUHADCHLBTQQSHIWLUVRXPBGLNDXVJBMJAMEIVNWIRIHZYFTWPMLZOEZEKMGOBBFDDYKGTREOMJTXZQCSEGVJYLGZKWPPHETQWMIUHSUHTFCZKPUEDKAGUBUVPTYPNQOSSRLAFALRGPDWOTRAJXLNZUSYOTROSWONCLBVJNCUNVSYHKWX");
    msg.type = 174U;
    msg.op = 192U;
    msg.group_name.assign("OXNGGMJKEHLMCPFHKZTLVWIR");
    msg.plan_id.assign("XKBHNMGUJMWQTNOSADCFSKOTDXYNAVSNETAJLDXTIMJFNLLBBWNPCAUXOOIZFRPYQTWIKUDMCXWTCRWCGQREJMAIBOULEZOGLFXHREFJPQFIZLCDPEUBLRTGJRHISOKMJRXXBRAUMQGJFXKDGOPDVJFIQVRYHBNKDLUY");
    msg.description.assign("OEGVMNSQMGVMJZKOSDEQESDGEQDBCHLNRRHLQRGHZLKCNUWWLSRJZUFPAMCVIMGDLXWHVMXNBMPGFWXZYFCRZYHAPAPAYJOYSTIYDQNVJFFXVRGPETEXKRXOASTIVJCUZZBIDAYUELPJMAQOJPWBMNTQYSIKIZWQCUIXDOWKVPCOAUORTWEBLHBUWHKGYDCBIAHDXTLBOSXTQXOWJQITDCHIBKVFSHZSNKBFNNREYP");
    msg.reference_frame = 221U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 19234U;
    tmp_msg_0.off_x = 0.5379818411073166;
    tmp_msg_0.off_y = 0.5872964398341147;
    tmp_msg_0.off_z = 0.6545134371341086;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.5801993117712259;
    msg.leader_speed_min = 0.8073744800213289;
    msg.leader_speed_max = 0.5778986536001677;
    msg.leader_alt_min = 0.4068600340986066;
    msg.leader_alt_max = 0.6723570872573285;
    msg.pos_sim_err_lim = 0.6900299782924085;
    msg.pos_sim_err_wrn = 0.8179094983893743;
    msg.pos_sim_err_timeout = 22951U;
    msg.converg_max = 0.9131060683968585;
    msg.converg_timeout = 45465U;
    msg.comms_timeout = 34247U;
    msg.turb_lim = 0.45130722819645974;
    msg.custom.assign("JOTRSGUKNXJBMNLCTDXAXWULEGVTCYGTNIFTAI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.05727107773324558);
    msg.setSource(48937U);
    msg.setSourceEntity(128U);
    msg.setDestination(48177U);
    msg.setDestinationEntity(52U);
    msg.formation_name.assign("DENXHBKPLKRSCNLRTOCFNAJGAHTJGYEBVUFOGKBZRWZQHNMBYUUJHTGVIICXHDGUVZQWEZPTBFMUHOJNQLHNVZKKOIRTDUMMWCGWZTFWFXPVAKDV");
    msg.type = 244U;
    msg.op = 184U;
    msg.group_name.assign("GRRYKAATEWCBIZHTAMLQICNUBISFQOULMPFHCVFIDRGCJGJSQKEFVTBYXQVOQAAXTCVMEVYOSCYKSKUFZMTMDZBKKNNYKBALFKXPOOWRNSWOJYGHMXELPXZZORLERCBXROEWEZGCJUPDNETCDMGIMUZLAIPBJEODYWLSYGGIIUJSTRDZUZQFJRHPLVLJQVDH");
    msg.plan_id.assign("NDRHPVECJQPZWNYPSUTMHSCTWOAGWOYRABZFMICLQBUQSBFKCKQOINKNPWEISXMBYBCMHFIWODVVBVAUOSTELGNKRMBGJRIFYOJ");
    msg.description.assign("ZBGTRHLPCHJJMDGHYSPFCSQGDJUPILNIERTHFRSJAZDFERZEFWYPWYSWLBMNZBRAXQUTKUIIETATUCSLHUIMWQ");
    msg.reference_frame = 126U;
    msg.leader_bank_lim = 0.41596521803036546;
    msg.leader_speed_min = 0.7036523011477467;
    msg.leader_speed_max = 0.1770915335624521;
    msg.leader_alt_min = 0.9871648577379211;
    msg.leader_alt_max = 0.05553994848256927;
    msg.pos_sim_err_lim = 0.3113241639400631;
    msg.pos_sim_err_wrn = 0.9448707240578484;
    msg.pos_sim_err_timeout = 5606U;
    msg.converg_max = 0.5892165517982554;
    msg.converg_timeout = 56236U;
    msg.comms_timeout = 53653U;
    msg.turb_lim = 0.0673988021149472;
    msg.custom.assign("BWOJMTBRVUHIYTTHOXXZVLZYEBLTXVKMIMCYGUOFQSVHZNCKHQTTMWSVKSLADRLKZSQKQHTAWGPCJPREJTHDDFUGRKEPWVUUTUJSFLLVPNWJGZFZSYRJHSAOLUXGQQYBNDCYCNQRIFKJRUIAJSXMXXUNMMGXOKDDWGEJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.5670234858669896);
    msg.setSource(47364U);
    msg.setSourceEntity(228U);
    msg.setDestination(810U);
    msg.setDestinationEntity(44U);
    msg.formation_name.assign("VOCMSWYIHLVJRETBEXIAAXJVIOSNUPVYHZVFHLERHKGUDVGQMNIJWPGKFSNDNQFGTRKYNDYTJLSEZHWUCRWOCYAUDTIXOXSYLXYRMZEADPRKQDMJADBOIXPKEBIMAWCALBZZRPBLNKMKOJXWGLKDGJDUHXLRMSNPMMVUSQQWZAIZWTBKYRCQFMZHCQTPFUAJPNZZWRL");
    msg.type = 170U;
    msg.op = 174U;
    msg.group_name.assign("IXZQYMESQUTHBBSNAHPTMDRKYVPNLRATGCILYZHBYZERDZKWCRUCOINWCZVKXWPMXVEVOFFOTDYWRFLSAVHDNULFKGIMKGFYKPVBBKEDMNLAMJUHCMSXEDQZAXQESFSKISTOIJFXAAPYXQNU");
    msg.plan_id.assign("VLIGLALNCJDDYNTMXMLKRPSQLMWJCBRVXCREHWKGWNXDSXZDEPJTZGYIXJSRZARAWNKMCPSQETMWQJPHPQOYSJIVUBZBRDDBQUXJBHPDTECICOWINEFUIEOMITOFZFGJHPXLVKCEYZGOKTDYKICGLUAUSEAYBCTPUMHNPHVORKNRWNTUDBZSOVUYGWGXWAQVJFFCOLQJHZESMAHBVFEKBXLVLYFBAMDRWSFHAHSYOIFYGFVURMK");
    msg.description.assign("UYQMYOELRYVMYLWSPUZFKAZXJVEYAJIIMHKCTJJWCCOVLTHFTYWGVZDPZDVDHIEOTZZLVBGAAOFWWYYGKKKPUQZGMMXBGTBWXPDGNWMXXDJRIPQQIFZIQASMPQRRURUSDCDOWKLHVBSCSEEBCWSSTDZPSJQLUONMKNONMARNCPNWEHTOFRQENINHFKJLJBFFEADNEQUHKUIMT");
    msg.reference_frame = 76U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 55843U;
    tmp_msg_0.off_x = 0.655506204430916;
    tmp_msg_0.off_y = 0.7004354413597357;
    tmp_msg_0.off_z = 0.0014847810116657145;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.5641972841792477;
    msg.leader_speed_min = 0.9821749914394448;
    msg.leader_speed_max = 0.43001430596001655;
    msg.leader_alt_min = 0.04534715956359847;
    msg.leader_alt_max = 0.4321303620410968;
    msg.pos_sim_err_lim = 0.6925260434053918;
    msg.pos_sim_err_wrn = 0.7489862495059664;
    msg.pos_sim_err_timeout = 30741U;
    msg.converg_max = 0.13073174136953325;
    msg.converg_timeout = 55638U;
    msg.comms_timeout = 40563U;
    msg.turb_lim = 0.2686711253015083;
    msg.custom.assign("JBFWGXOZTQBJZJXPFLTBWBKTJZYDLHAESDDDVYQFFGXYCUCQARJZDAWGZSHUOLNKBVJEQOIOCHNWSRQPYZQTCVHNEJWERGCPFYSAVKOGMNWQUJQTMPYLGNMGHPIMIBARPEURCMOHMXVRWRUXNAKFXWLUIGPINEAFLBSVBASCVHLPRWURMNRXOINFVOXYIDUGVESKBKZSQYDOMGYLEVBLIYZDINJUKKHWDTCIDMMCSFOECATQAPXXFLTEHH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.1979154439221934);
    msg.setSource(4351U);
    msg.setSourceEntity(196U);
    msg.setDestination(25991U);
    msg.setDestinationEntity(141U);
    msg.timeout = 7083U;
    msg.lat = 0.3279864088231893;
    msg.lon = 0.8441505567984127;
    msg.z = 0.40055366174656915;
    msg.z_units = 245U;
    msg.speed = 0.9997366828734864;
    msg.speed_units = 136U;
    msg.custom.assign("ISWBIJYXUKUXZYXLVQIREJVVSOGJJVADZDSLEVTYZPKJNGOAYMKMZIEQKVOBRHBSXPFQWTFTTWCWMVTSLNHCLALEPCDRDVDYMGLUMWYKYWUIAQEYXUEBKOYXUCAEAQIBJRGQLWMXNBGCHEVPOCPSSZWOZNWZHRHBPOPZERJMZTHMCFSCNJIFABUNDWUDGLNTRYXIZTBKJQXAQEMLHRIOAHGTXKHLDRFOIGJFDVDPFSGCPOHTBGKRUKF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.5202246932430815);
    msg.setSource(63387U);
    msg.setSourceEntity(232U);
    msg.setDestination(63763U);
    msg.setDestinationEntity(15U);
    msg.timeout = 1588U;
    msg.lat = 0.49354316669343823;
    msg.lon = 0.5596676399599855;
    msg.z = 0.6488015298208304;
    msg.z_units = 43U;
    msg.speed = 0.5040046101326405;
    msg.speed_units = 101U;
    msg.custom.assign("XYASVZTLBJSMAOWCQSLUFAFMMUIUHGSTHBHEHBIDKZGMMUDSXKWPNFXPNIPBGHPGERNRCTYLYNVPWRAVAYHQCGPILCPBEKLFWWFEEWETS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.9146690264971876);
    msg.setSource(64888U);
    msg.setSourceEntity(60U);
    msg.setDestination(38216U);
    msg.setDestinationEntity(151U);
    msg.timeout = 56829U;
    msg.lat = 0.8184463703819964;
    msg.lon = 0.11450057616347542;
    msg.z = 0.1667350230996434;
    msg.z_units = 28U;
    msg.speed = 0.4968577908743368;
    msg.speed_units = 81U;
    msg.custom.assign("USMVDFBFMJDYNLLQWUVHZYRTUQUOJRAMWCNTYNRGOMJOGIYLPSEQYIAJMLPIABWKPUEGHDCADBDZGPIBVVSITTEDQCXSLCPFOZPKFRMIVWCEBMDNOONLCZKFENBUJHASKDUAXFYAVTGYUNNMITGVUZZXGQLPJERZRESKHWQXTWRVZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.5600028744054197);
    msg.setSource(10072U);
    msg.setSourceEntity(65U);
    msg.setDestination(37811U);
    msg.setDestinationEntity(187U);
    msg.timeout = 3098U;
    msg.lat = 0.8930031497059173;
    msg.lon = 0.31592888811531794;
    msg.z = 0.9779925648390226;
    msg.z_units = 57U;
    msg.speed = 0.7045802351340446;
    msg.speed_units = 30U;
    msg.custom.assign("AYUKCZERQSBIYIARAUUBWZSRICZPFBEQQDXLGMXMIMQKPVEXPTCTIBRNAFNMAERUVYJZXJTLQOHAGLNZFNGRVOOTFWSLCHHXPJDVLEFTCGHRSOWYBHMTGSEATPFPOZXKILHWESJHPJPPAUJFIWWVWKAMCYWN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.17846602241123644);
    msg.setSource(36769U);
    msg.setSourceEntity(158U);
    msg.setDestination(26732U);
    msg.setDestinationEntity(233U);
    msg.timeout = 50727U;
    msg.lat = 0.9195646808598501;
    msg.lon = 0.8888065982862094;
    msg.z = 0.2962183679754997;
    msg.z_units = 218U;
    msg.speed = 0.14282722365067346;
    msg.speed_units = 42U;
    msg.custom.assign("FBEMQSUIBCIZAHWKUPKLVTDAWLKQZOBCKJKRTBTAOLKUFWHPGQMFOBSNSYVMOPKXSEONSZJJPOAPOHIQMQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.46872667792086387);
    msg.setSource(65468U);
    msg.setSourceEntity(191U);
    msg.setDestination(49507U);
    msg.setDestinationEntity(244U);
    msg.timeout = 13441U;
    msg.lat = 0.890447068099784;
    msg.lon = 0.9403844296122877;
    msg.z = 0.5370583658094231;
    msg.z_units = 253U;
    msg.speed = 0.9620032854642595;
    msg.speed_units = 124U;
    msg.custom.assign("RPLSALRDAOHAKTHOWFEXDEQDQVFUJZXWTXJPHKCNRNHMLZBQRCUQSXGPYEHOPIUTFGKKVTQKSAGHWAKODAZSCPWFXLVHIPJEYXPJSVPBYWJCCLVFMQGMDBLHGDFBFGBIADCCLIOKIZIYORRGHVLGEUNJMAEJDSMV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.6539586926898213);
    msg.setSource(30829U);
    msg.setSourceEntity(129U);
    msg.setDestination(44938U);
    msg.setDestinationEntity(63U);
    msg.arrival_time = 0.17871977111005022;
    msg.lat = 0.037874960718774386;
    msg.lon = 0.1605005370146425;
    msg.z = 0.035291981367601144;
    msg.z_units = 223U;
    msg.travel_z = 0.9997239578887996;
    msg.travel_z_units = 168U;
    msg.delayed = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.24448030486359618);
    msg.setSource(31150U);
    msg.setSourceEntity(51U);
    msg.setDestination(46406U);
    msg.setDestinationEntity(91U);
    msg.arrival_time = 0.20899069148014215;
    msg.lat = 0.8595004070090517;
    msg.lon = 0.4751358068838806;
    msg.z = 0.7366564592060795;
    msg.z_units = 53U;
    msg.travel_z = 0.9193985415122913;
    msg.travel_z_units = 177U;
    msg.delayed = 140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.1680755113025526);
    msg.setSource(39193U);
    msg.setSourceEntity(209U);
    msg.setDestination(49096U);
    msg.setDestinationEntity(228U);
    msg.arrival_time = 0.5218208423597774;
    msg.lat = 0.9678674766553341;
    msg.lon = 0.010861404742474434;
    msg.z = 0.8452151320910894;
    msg.z_units = 39U;
    msg.travel_z = 0.3729057084269025;
    msg.travel_z_units = 106U;
    msg.delayed = 72U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.058995441436525686);
    msg.setSource(14962U);
    msg.setSourceEntity(158U);
    msg.setDestination(10160U);
    msg.setDestinationEntity(79U);
    msg.lat = 0.2620524288997058;
    msg.lon = 0.10215924049949521;
    msg.z = 0.18701173135850258;
    msg.z_units = 156U;
    msg.speed = 0.5393703215044336;
    msg.speed_units = 70U;
    msg.bearing = 0.5289878879551826;
    msg.cross_angle = 0.9287786138159755;
    msg.width = 0.6514646166547968;
    msg.length = 0.45583415312014486;
    msg.coff = 29U;
    msg.angaperture = 0.20560227803967934;
    msg.range = 23863U;
    msg.overlap = 128U;
    msg.flags = 20U;
    msg.custom.assign("GZYHCSGIHBNSTFFWNJXBXARSYMTVSCSMOVOBKTPBLFJUTSOORRUVJEPZOLRABFPIWQAYJYJTBLUKQIDCKPIHPWDOWNMJUVEQXZCRDIAGMFEHNBHOTKRDUCHYQRS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.39152330269924684);
    msg.setSource(63876U);
    msg.setSourceEntity(146U);
    msg.setDestination(43135U);
    msg.setDestinationEntity(148U);
    msg.lat = 0.06131607825539653;
    msg.lon = 0.174572578055883;
    msg.z = 0.8058593870166896;
    msg.z_units = 248U;
    msg.speed = 0.9942431035278498;
    msg.speed_units = 233U;
    msg.bearing = 0.24824752151985885;
    msg.cross_angle = 0.35423524065597944;
    msg.width = 0.636849691483981;
    msg.length = 0.15307628575603482;
    msg.coff = 125U;
    msg.angaperture = 0.2859849267771355;
    msg.range = 49353U;
    msg.overlap = 45U;
    msg.flags = 160U;
    msg.custom.assign("PDPZPESUXUMLBVCKIXTWALZHRCYDAUQCCZZPCWNEVLBBKZCRXIRAEXSGPRDLDDBAUVMRWQKKVHGMOGTHVLQEBOCVH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.8119738865824699);
    msg.setSource(15457U);
    msg.setSourceEntity(154U);
    msg.setDestination(44375U);
    msg.setDestinationEntity(220U);
    msg.lat = 0.10065807900127233;
    msg.lon = 0.8468766196219081;
    msg.z = 0.22536667942458533;
    msg.z_units = 179U;
    msg.speed = 0.2788230316221867;
    msg.speed_units = 196U;
    msg.bearing = 0.8138449859422955;
    msg.cross_angle = 0.11489130468652886;
    msg.width = 0.42864004702875846;
    msg.length = 0.003426644385860933;
    msg.coff = 72U;
    msg.angaperture = 0.39620103510425286;
    msg.range = 32133U;
    msg.overlap = 59U;
    msg.flags = 37U;
    msg.custom.assign("AKWDJITCXUOOTCWBRHCWZCHZVLMSEHEKXBCVAUVJEENKNLTIQJHCPWTGPZARKEIPP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.6817034047787246);
    msg.setSource(18717U);
    msg.setSourceEntity(183U);
    msg.setDestination(62115U);
    msg.setDestinationEntity(230U);
    msg.timeout = 21209U;
    msg.lat = 0.1844211803291509;
    msg.lon = 0.36499770576161394;
    msg.z = 0.557323973296635;
    msg.z_units = 34U;
    msg.speed = 0.70920433033275;
    msg.speed_units = 18U;
    msg.syringe0 = 228U;
    msg.syringe1 = 88U;
    msg.syringe2 = 191U;
    msg.custom.assign("TMUMLRXTAIHMFUYPNVUOOIDFZWFEXTBHWOBQQXUHJISPEPAKNNVDJBNQSEXJIAWHGSROVELUJVRLLWHLQOHEGFJLAXDSYDLRKVPETEEPVILHHYCGIXXTQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.5524794398718352);
    msg.setSource(30879U);
    msg.setSourceEntity(186U);
    msg.setDestination(36926U);
    msg.setDestinationEntity(195U);
    msg.timeout = 4571U;
    msg.lat = 0.2065381841631464;
    msg.lon = 0.853492689152081;
    msg.z = 0.12292826013778102;
    msg.z_units = 121U;
    msg.speed = 0.5666318363775276;
    msg.speed_units = 207U;
    msg.syringe0 = 116U;
    msg.syringe1 = 190U;
    msg.syringe2 = 40U;
    msg.custom.assign("TWIKPUHYIHJPWLYOVTLTCUAYXBTKRBGJCNDVRHCVUSBAXEYQDKZGSGZNMISCFOWAUDLFMVOKCNUSWXSFDVOMTUQQEBOARAMLTOZEHPISZMLINJLGWLFRUASVTPRHMIUVNWMMTEYJXHPJCSLDAUPFRMQAZQKIVXHJPCYEZFEDELWMPOHC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.030525386181202374);
    msg.setSource(50990U);
    msg.setSourceEntity(189U);
    msg.setDestination(26074U);
    msg.setDestinationEntity(125U);
    msg.timeout = 11624U;
    msg.lat = 0.423857455924012;
    msg.lon = 0.49349727519652864;
    msg.z = 0.40135805376626754;
    msg.z_units = 220U;
    msg.speed = 0.2329341962920054;
    msg.speed_units = 147U;
    msg.syringe0 = 54U;
    msg.syringe1 = 176U;
    msg.syringe2 = 36U;
    msg.custom.assign("UWHUQKNGMTZSOYXHDOUCXSVTCBPACGUBTONALKFIUQHWUDPOCQFOKIYWGBDSBEKZGVVBEMPADZDOZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.45346038035542136);
    msg.setSource(23690U);
    msg.setSourceEntity(54U);
    msg.setDestination(8380U);
    msg.setDestinationEntity(138U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.5864961338323142);
    msg.setSource(29806U);
    msg.setSourceEntity(89U);
    msg.setDestination(13889U);
    msg.setDestinationEntity(49U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.20003913517296223);
    msg.setSource(44921U);
    msg.setSourceEntity(119U);
    msg.setDestination(44053U);
    msg.setDestinationEntity(239U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.8582386071520712);
    msg.setSource(8721U);
    msg.setSourceEntity(0U);
    msg.setDestination(29802U);
    msg.setDestinationEntity(216U);
    msg.lat = 0.7126532318737321;
    msg.lon = 0.0991051832858797;
    msg.z = 0.5345975014848338;
    msg.z_units = 249U;
    msg.speed = 0.568032796288454;
    msg.speed_units = 24U;
    msg.takeoff_pitch = 0.34791706866258143;
    msg.custom.assign("SLTEDCXOBTILWNMBEWKQKJLYQXKAQAVVWRFJTUHIBCZKFMUZZCRIQDYZMUWOTUCEUQGFOJYOMNICHCFNSBTVVWPGXQDSYLLQHFRUMSOXOBABHOCAPIGYSFRDBZBDDXLDBZAETKFRGNKQREDSNGTDJIUXGWMWOVMPWPWPHPCKPQEYYSMONPSUNVJXXRXL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.9192578928003211);
    msg.setSource(52231U);
    msg.setSourceEntity(179U);
    msg.setDestination(20427U);
    msg.setDestinationEntity(169U);
    msg.lat = 0.009300363727080874;
    msg.lon = 0.08866135626104221;
    msg.z = 0.4434015345850575;
    msg.z_units = 121U;
    msg.speed = 0.5429179094488364;
    msg.speed_units = 84U;
    msg.takeoff_pitch = 0.9771700905935801;
    msg.custom.assign("DZFKIAZKJQVANFHGUNJFOUIJOWFUOARNKMRUOWXYKXANDPQBBELNECPGQYFOYTGGVZVUZQHJLSGRRTWOMEEPVNNHZOVKFYOCUZVRTNPEFSVPQICXJLJMCBTCSIWYTIXCSKTHGWUBTDIQMEIJAQHYSHQYLPZVUMQLASSRBBZECJAQBYHZEAYIIKBDAPURWGBT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.8618725641480751);
    msg.setSource(14604U);
    msg.setSourceEntity(224U);
    msg.setDestination(17U);
    msg.setDestinationEntity(45U);
    msg.lat = 0.2128916130001518;
    msg.lon = 0.7597097968520242;
    msg.z = 0.5873291075660136;
    msg.z_units = 249U;
    msg.speed = 0.12412722013441269;
    msg.speed_units = 183U;
    msg.takeoff_pitch = 0.051517287065827255;
    msg.custom.assign("EVMZIUCJEOZCYPJZISJLBVYNVRZOWHFQBRAEGIBQAFCWMSPOXGTXUNQRUAZPEKOG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.37766766987513056);
    msg.setSource(24713U);
    msg.setSourceEntity(222U);
    msg.setDestination(64387U);
    msg.setDestinationEntity(247U);
    msg.lat = 0.3847802005025922;
    msg.lon = 0.309740288487689;
    msg.z = 0.9254796150421202;
    msg.z_units = 71U;
    msg.speed = 0.7160145780249503;
    msg.speed_units = 133U;
    msg.abort_z = 0.8827924681790612;
    msg.bearing = 0.11312061120687333;
    msg.glide_slope = 241U;
    msg.glide_slope_alt = 0.7374258852195308;
    msg.custom.assign("FJGXQMDHRFQMATXZDMBHWHZLYBUVWPCIKKZURJCNNVQTCEEDHTBBFGEEFPHKPQAHFIYPYQKIDLJDSGRZWRVTYKATNSQPUSAAJZZMOKMIQOVNCEUZAYLCTVNLYWIZFXNTKKJMLDPNYNPEERUZGGOYVGOVQWBDYSBOWFSJWUEQNHWIUQXRRRUHDISSXIOBTVUJHAEXRJXGUALDLSRPCCXCMPOFGGCTEXWAMVWMALOBMHJYIKTIFBCONGJSLVPS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.03870243151086217);
    msg.setSource(34928U);
    msg.setSourceEntity(69U);
    msg.setDestination(27628U);
    msg.setDestinationEntity(248U);
    msg.lat = 0.6888303534764735;
    msg.lon = 0.769925380738405;
    msg.z = 0.39692248326957047;
    msg.z_units = 91U;
    msg.speed = 0.9086644054721528;
    msg.speed_units = 86U;
    msg.abort_z = 0.3732290479127891;
    msg.bearing = 0.9367019310790127;
    msg.glide_slope = 38U;
    msg.glide_slope_alt = 0.25267269244964796;
    msg.custom.assign("BGUUTVGWNPLPBFJKSUWAYMTVMXMYSJBABDWEIWJHCYFLASRGPBMRZODTKBMHKHCMYOGRFJONZOMARANOVBTHEADNMEJXXDAQIOEMGUILKFYGZISAPFWBSAFKLIHLDLRYMTQCZWEZVQNQZQCSDIHVQDDVQXJJEPVBQUHNXYCZWOCKZINFTOTGKYWURWEGF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.5874556593699503);
    msg.setSource(13695U);
    msg.setSourceEntity(179U);
    msg.setDestination(4432U);
    msg.setDestinationEntity(74U);
    msg.lat = 0.8016805484287947;
    msg.lon = 0.843230455361518;
    msg.z = 0.7473635150891637;
    msg.z_units = 197U;
    msg.speed = 0.043910048593093554;
    msg.speed_units = 247U;
    msg.abort_z = 0.09418101856887018;
    msg.bearing = 0.5805105547374133;
    msg.glide_slope = 185U;
    msg.glide_slope_alt = 0.9825467420041466;
    msg.custom.assign("KCFASCVTIBANYIFVXGCNWZYQQWGOLJQUZSLYJNMQPKEFNIDXYPAPSZSBFJDXYWSUHGDQCREWHDHGPVZSFRCCBMTTKBIENQSZIOUOWIHKDFASXPAIYQVIYSOGBJBFOLVLQZFSDARFUKUMDGTLPOALMNRUJUHXUGPEMLZTWJMCGXDOOBROEDQLDHYRCLMNMUPHUHYTRVABEKPB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.21538330985911813);
    msg.setSource(24151U);
    msg.setSourceEntity(81U);
    msg.setDestination(8043U);
    msg.setDestinationEntity(242U);
    msg.lat = 0.3690108938704213;
    msg.lon = 0.32981221787563;
    msg.speed = 0.9182243031311065;
    msg.speed_units = 102U;
    msg.limits = 110U;
    msg.max_depth = 0.3756568765827355;
    msg.min_alt = 0.8648855523848904;
    msg.time_limit = 0.9432799809279556;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.6538174612854204;
    tmp_msg_0.lon = 0.5075374690724419;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("IGAKCJUBOJLGFCCAGWHYNQPMGTIPLDPWQRMKVZRJDJFMLWBWMKYOGQKHTRFKNBNPMTEVDZHLQSNXSFUAQDXEBDHSLIBVSMNROEUUMELNGFIJVBWVULFITTSSYKRHFAOZAWWDXLQWZTYFVIYFKLUPHIUPKCCUZEPTHBRUMKHJCVJOMGSCRJIOJQOVECNEQPNDIAWOBEXRFXRVPWXJPLCMSTDAZBTIZXXGHUYGXBOYZGYKSOVZZEHAQ");
    msg.custom.assign("VWGTBURCLMXUEALOQVVBJTAJIZNGPJNEKBYVUKUNCYIXMDOEATDFWZMHOWANYJTJIQLFHIIJRRKXLLFEVQCPLOZFPLJEOAZSXIPCQGVBZOOISPGIAURKBTUBDSX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.1405467533604957);
    msg.setSource(15283U);
    msg.setSourceEntity(131U);
    msg.setDestination(3309U);
    msg.setDestinationEntity(142U);
    msg.lat = 0.03872282266162752;
    msg.lon = 0.5704924176775849;
    msg.speed = 0.80487184764916;
    msg.speed_units = 28U;
    msg.limits = 214U;
    msg.max_depth = 0.49706516811535806;
    msg.min_alt = 0.33802144438427373;
    msg.time_limit = 0.7593051118871285;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.0925485179513913;
    tmp_msg_0.lon = 0.04537333871359317;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("MLLCILJYPQDWYRBWFJETYHCRWGMWKJCZGEOFLDZTQXETNSTHYVYATFKXYYGEQVKMGKKEUFKPJZTPJLVHRBYDQSQIUBPDFVVZPUHJSOQYBABSYNJFIXGMHIGQACBZVZPOAMAKARVATIVWRSXCRZNMPVMIIJGXGNKIESHOFUCORSWDTFWDKURUGLUXBXCNMNQODDNVWTWB");
    msg.custom.assign("GUOUNFEWFXCPMXRRFOXKUPSLPYFZHLCGZIBREQLCLFJLKLGCWATVSN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.7900983538924717);
    msg.setSource(22925U);
    msg.setSourceEntity(171U);
    msg.setDestination(20805U);
    msg.setDestinationEntity(56U);
    msg.lat = 0.03498992097387488;
    msg.lon = 0.595906948417387;
    msg.speed = 0.6057139659142831;
    msg.speed_units = 150U;
    msg.limits = 118U;
    msg.max_depth = 0.1695529858025817;
    msg.min_alt = 0.874557411445554;
    msg.time_limit = 0.6909165933329523;
    msg.controller.assign("ATICCYGUZQZNAMHGXITJBHFEXTINFBXIJUVVYFPXFZKUTJNNZWLANUMDGHSHLSEPGBJMXBYIKPRRNWHLEAOZDLDWTSRJBWXOUKKMPGJLWFBKSXAEI");
    msg.custom.assign("IZZPXTICYVAYCPDXPWMRXRPYPZZGSQYLWYVKRIGVTSJVFVASIVTKKKKJFOYXJEPYLDMHLJQSHXWHUQEFGJDIFSTVQBTOIFHJLQKMZRMLACAGMUONEWTSZBZGWEFRJGHEPBECDVUGBEUSOVHYHBRUDQBOYJJD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.20780098912499556);
    msg.setSource(49962U);
    msg.setSourceEntity(22U);
    msg.setDestination(39125U);
    msg.setDestinationEntity(84U);
    msg.target.assign("IQTGJFJVXTUPUETOVLXZUILWCRGWCIQNISDBLCJHWPDWJVRYCXYDJGONMMPX");
    msg.max_speed = 0.5914775448773312;
    msg.speed_units = 187U;
    msg.lat = 0.3575710318541656;
    msg.lon = 0.7215300190201682;
    msg.z = 0.03954751007317303;
    msg.z_units = 55U;
    msg.custom.assign("RKESMGAIINNSAWHLOYCYSYCATHFQAGKWQLQWGQJDTXBNRUVXDUCOWEXUMITNOFGMHDSTSQYAXTVEYRSELIGWLPMKLPFDOVZIBDXQYM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.4601697852191713);
    msg.setSource(10044U);
    msg.setSourceEntity(223U);
    msg.setDestination(34555U);
    msg.setDestinationEntity(18U);
    msg.target.assign("ORDIPNXHHWYJIHEEIXDZIYJJLNFBFCVADRRKPLQQKJMXFSZBUZWHGOPVWUQTQMQRPTZQIDZKYNPIVBNWLROULGLMYEOMRIRABKYENME");
    msg.max_speed = 0.4250400616454658;
    msg.speed_units = 169U;
    msg.lat = 0.903636029211067;
    msg.lon = 0.3631344101506684;
    msg.z = 0.10731642073428682;
    msg.z_units = 171U;
    msg.custom.assign("UEGGSXETQBHYGTRUKWLPYWXUKPGXOPPMRUKFNGZZMOSXGJHMIMYMKKMLAHCQIENIJQNYQNJPVSIKTO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.3159404037384641);
    msg.setSource(38107U);
    msg.setSourceEntity(156U);
    msg.setDestination(6460U);
    msg.setDestinationEntity(192U);
    msg.target.assign("LVANMPJBZZYHOOMCVBQNRNEMQPUYIOKEYPRASGFXJ");
    msg.max_speed = 0.50933200552596;
    msg.speed_units = 202U;
    msg.lat = 0.020747093831047336;
    msg.lon = 0.2435354407817223;
    msg.z = 0.990893225284862;
    msg.z_units = 226U;
    msg.custom.assign("UPJGCUTTQMFEKBCQOGCNKHZLEZJSSOHYRZWERMDSTHIRBQBFYPDDWJYKSOZDPWNFPQHYDBUDRLPYYMOGRBHXLEUYBVELQMMAKYORSNEO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.8371895055138955);
    msg.setSource(874U);
    msg.setSourceEntity(180U);
    msg.setDestination(4493U);
    msg.setDestinationEntity(126U);
    msg.timeout = 17299U;
    msg.lat = 0.34577528112517686;
    msg.lon = 0.6870015058802134;
    msg.speed = 0.5887152818113993;
    msg.speed_units = 230U;
    msg.custom.assign("MASLRWBVARKSCTYAAVHCNFTFJOSNFEPMMTBPPMBEUADILGDHATDLMBFPKQKQUYJITBUDLMJRRGSUIVTFOBXAIUVKIJLWZUAINRYEGSZZOCAXJGSZCY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.48390794149732785);
    msg.setSource(23999U);
    msg.setSourceEntity(137U);
    msg.setDestination(43321U);
    msg.setDestinationEntity(126U);
    msg.timeout = 25523U;
    msg.lat = 0.41309067492277785;
    msg.lon = 0.8700904233957762;
    msg.speed = 0.2390625604300144;
    msg.speed_units = 106U;
    msg.custom.assign("TLHDFJBYFVMOMCWJIAOZCBBWJDXRHZKSRAPMXTNNJCPUEXTJEPISRZCQRMDCYTXOMULRMBNVYPCNIDDJGUQQGWEIMSEZCKYBFFTHMFSPBZNPKZLSZBLUOYHJGQLMREVVEHRGAZOAQIKWKTBUYLXSGJQWAQLUIHEWXRIMGXTRQADFETHHLYNHIPZOANYXGFKCJPVTFOSVKACFLDXKQGCUYQEAOHSKYEIWDNVVSUXVWJFOVTGKNPAG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.45268222233603783);
    msg.setSource(30287U);
    msg.setSourceEntity(84U);
    msg.setDestination(50902U);
    msg.setDestinationEntity(187U);
    msg.timeout = 243U;
    msg.lat = 0.229749872996732;
    msg.lon = 0.6891972864705408;
    msg.speed = 0.08770251641270643;
    msg.speed_units = 213U;
    msg.custom.assign("OZYURYHQLZCLJJDMGACIJVQXMNWCAKSKSCRTYIDSLIGWYZHKXVOPMKTFCKIOZBBWGMYFAMRWXFJYXWRLTHI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.8967145859402641);
    msg.setSource(52566U);
    msg.setSourceEntity(37U);
    msg.setDestination(22927U);
    msg.setDestinationEntity(14U);
    msg.lat = 0.062112209730282086;
    msg.lon = 0.9431701389036332;
    msg.z = 0.5627482099314052;
    msg.z_units = 7U;
    msg.radius = 0.8724390958171159;
    msg.duration = 18233U;
    msg.speed = 0.8705237592331151;
    msg.speed_units = 230U;
    msg.popup_period = 52168U;
    msg.popup_duration = 6136U;
    msg.flags = 82U;
    msg.custom.assign("AFWUZBRABONDEDDFISNOHXGVERJHBIVUIXKGMBLEWBIAM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.3819004200201561);
    msg.setSource(45260U);
    msg.setSourceEntity(193U);
    msg.setDestination(18139U);
    msg.setDestinationEntity(159U);
    msg.lat = 0.29509615143258106;
    msg.lon = 0.993983385719107;
    msg.z = 0.9762359489234161;
    msg.z_units = 144U;
    msg.radius = 0.35820680240894354;
    msg.duration = 2114U;
    msg.speed = 0.15466566382028513;
    msg.speed_units = 30U;
    msg.popup_period = 63140U;
    msg.popup_duration = 34080U;
    msg.flags = 22U;
    msg.custom.assign("JNFHEZRLPOXEQXNDDRHLXRNHHRUVAEZYYBTHGSGFYBNWSYMISYOYIKGZVKHASQWNXHMDURDTUGLBLSMMNRFUZKFOJTEWIMJSBCCPGUPOMDIKWUYHWRLIAMZWBPGEWFMNLXQTAZPKQCVWQHEJCODXFZFCNPFFPKQFYKVJTBOARMDXESGPZJHOOQCVAGBBIVQYXBIJRVCLOUEESLACNCTGXAIPVWGSUUXTT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.6913314130520656);
    msg.setSource(63401U);
    msg.setSourceEntity(54U);
    msg.setDestination(57868U);
    msg.setDestinationEntity(68U);
    msg.lat = 0.6806209823665486;
    msg.lon = 0.2618076751555791;
    msg.z = 0.6711884843743922;
    msg.z_units = 244U;
    msg.radius = 0.4133554555954;
    msg.duration = 945U;
    msg.speed = 0.035611641654035964;
    msg.speed_units = 208U;
    msg.popup_period = 43678U;
    msg.popup_duration = 2103U;
    msg.flags = 62U;
    msg.custom.assign("EXGNAUWOCTCTJVKWLXRWWDLFXRYUCMDVAAGPLWEVKDYFVEZFUYTALLPQJBCPZSSXIUMHSCNLVOBIOKSWCTYFSJXHQPSHLJSFQKTJVTPOZW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.7151446353041045);
    msg.setSource(65430U);
    msg.setSourceEntity(33U);
    msg.setDestination(36529U);
    msg.setDestinationEntity(146U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.8279886480078001);
    msg.setSource(10021U);
    msg.setSourceEntity(105U);
    msg.setDestination(60555U);
    msg.setDestinationEntity(6U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.572710210064827);
    msg.setSource(30910U);
    msg.setSourceEntity(209U);
    msg.setDestination(13004U);
    msg.setDestinationEntity(181U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.38027722806223196);
    msg.setSource(12451U);
    msg.setSourceEntity(249U);
    msg.setDestination(1632U);
    msg.setDestinationEntity(65U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("BPBRIQLSQEPZYGHNQAJSUFKZLFTUFRKAPIDAJLBLPXLWLIRXJDHOMKBCDBTXAEXDEBTKMUFVLIANGWVOEJQFJAYOWOZJPDMJDFTVYJOFPHIJUWSXTUONZNWRXSWTCMHTAGS");
    IMC::ScheduledGoto tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.arrival_time = 0.061739673555561425;
    tmp_tmp_msg_0_0.lat = 0.5260021678685606;
    tmp_tmp_msg_0_0.lon = 0.8879812182505444;
    tmp_tmp_msg_0_0.z = 0.5480349686987206;
    tmp_tmp_msg_0_0.z_units = 13U;
    tmp_tmp_msg_0_0.travel_z = 0.1867090190790257;
    tmp_tmp_msg_0_0.travel_z_units = 197U;
    tmp_tmp_msg_0_0.delayed = 203U;
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::Pulse tmp_tmp_msg_0_1;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.8480071377436013);
    msg.setSource(21868U);
    msg.setSourceEntity(69U);
    msg.setDestination(25877U);
    msg.setDestinationEntity(227U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("SYAOMXTPHXBBQMVMKFDQXOOZRMJOSGXWRKVHEPZTMJXWJJZLOLBAESZDONYWEUCNIPYXVAFKRPJGUZSGNRZISTBYXKBFUYCENNGOLKFVKSPNMIHFRGMTIIVNUAFOPFWCVIQULYJWGMHQJSXLINZPLHQRGPSQEJBXGOHWDWQTQHUPHDUUYAWXCROUIASBYVRTNGCVFBDPEALDYZLA");
    IMC::Teleoperation tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.custom.assign("QNERAVYIYPENMBYNRDJUEIGKWDXSGRKWOJDOQYPFPFRCZPLKGROKNYOBJABACJQHJLFCHUDYSWHWBSPPLBGOHMTOFQSFIQXFKVUPVAVHNSMTMZLYXXHBUMMJPIOZWTIEUMLAQXPBFVVCUUBLLT");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::GetOperationalLimits tmp_tmp_msg_0_1;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.5740639787311537);
    msg.setSource(51371U);
    msg.setSourceEntity(19U);
    msg.setDestination(803U);
    msg.setDestinationEntity(67U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("QUPSRDQKLRBVAUMBCVTYNGUNJAFOYVESDECTBDJABYBXHUXFMBWAMTBFNDQIQMWRWAGIIZKVTLJORJEKNXXMXLJHIWDHWZGYMORCHLAJLNGOONUFQTBVPPPUMSRHPMZGWCRDWKSWVSVILRPKHWBXPQPTCCFOZYUAUIOJVWXAFEOMNLIYABYZSEEKXYLNFJUQMXIDTRILHOZCZCKZCSHDGEPDR");
    IMC::Loiter tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 61134U;
    tmp_tmp_msg_0_0.lat = 0.8939674939635311;
    tmp_tmp_msg_0_0.lon = 0.9172226550237288;
    tmp_tmp_msg_0_0.z = 0.04223007024266556;
    tmp_tmp_msg_0_0.z_units = 55U;
    tmp_tmp_msg_0_0.duration = 23245U;
    tmp_tmp_msg_0_0.speed = 0.7358056990411473;
    tmp_tmp_msg_0_0.speed_units = 59U;
    tmp_tmp_msg_0_0.type = 215U;
    tmp_tmp_msg_0_0.radius = 0.5436071802385247;
    tmp_tmp_msg_0_0.length = 0.5491467248263618;
    tmp_tmp_msg_0_0.bearing = 0.6836385869837465;
    tmp_tmp_msg_0_0.direction = 193U;
    tmp_tmp_msg_0_0.custom.assign("UHJQRGPUIJOPVSBVSYPWKAEMDWHTUKVULCNAEILJTFBDDGQKEPNQGROCAJOSVJDJYKHVDEBJXFNMJIYZASDUZHIWIYTDNYWLEQVSNFXTWFNXXUEZWMOFLOCLRXSTBPLEWBGGZFFDCKIBEEKCQVIMRVNACHVCOQRZHXZYGDMCTSHZMMRGUJOZAFVHNKMUOFYRAPBGNQBHISZIGHZPMPTTNXCTFCULDYSQIUALXYRJRM");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::PlanManeuver tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.maneuver_id.assign("QVGYYMRJSXMBKGBSAHJECCBQECYIARXBDTEYPGNZXSMPEZDWXEXPSITOHLMLLCVKTTCRE");
    IMC::Rows tmp_tmp_tmp_msg_0_1_0;
    tmp_tmp_tmp_msg_0_1_0.timeout = 37522U;
    tmp_tmp_tmp_msg_0_1_0.lat = 0.45966259196562265;
    tmp_tmp_tmp_msg_0_1_0.lon = 0.5619386230371206;
    tmp_tmp_tmp_msg_0_1_0.z = 0.9959533092502952;
    tmp_tmp_tmp_msg_0_1_0.z_units = 198U;
    tmp_tmp_tmp_msg_0_1_0.speed = 0.2536889961601122;
    tmp_tmp_tmp_msg_0_1_0.speed_units = 69U;
    tmp_tmp_tmp_msg_0_1_0.bearing = 0.5343177910052997;
    tmp_tmp_tmp_msg_0_1_0.cross_angle = 0.9319226156202373;
    tmp_tmp_tmp_msg_0_1_0.width = 0.4087623192301031;
    tmp_tmp_tmp_msg_0_1_0.length = 0.8895388454423737;
    tmp_tmp_tmp_msg_0_1_0.hstep = 0.06534711344625521;
    tmp_tmp_tmp_msg_0_1_0.coff = 235U;
    tmp_tmp_tmp_msg_0_1_0.alternation = 125U;
    tmp_tmp_tmp_msg_0_1_0.flags = 163U;
    tmp_tmp_tmp_msg_0_1_0.custom.assign("WTYYKTDBYXUMLMZQKHHROKEAPCAPFCZOSUTVZJF");
    tmp_tmp_msg_0_1.data.set(tmp_tmp_tmp_msg_0_1_0);
    IMC::VehicleState tmp_tmp_tmp_msg_0_1_1;
    tmp_tmp_tmp_msg_0_1_1.op_mode = 50U;
    tmp_tmp_tmp_msg_0_1_1.error_count = 193U;
    tmp_tmp_tmp_msg_0_1_1.error_ents.assign("CDODLYBNUVMQKOTMTZNMIXEALPBHQOTKPXPRKFJSGECTYHXUFZLXBVCGHDPRPSDOTOHBLWNQFXIQIA");
    tmp_tmp_tmp_msg_0_1_1.maneuver_type = 24831U;
    tmp_tmp_tmp_msg_0_1_1.maneuver_stime = 0.8586753933518944;
    tmp_tmp_tmp_msg_0_1_1.maneuver_eta = 16173U;
    tmp_tmp_tmp_msg_0_1_1.control_loops = 3736747179U;
    tmp_tmp_tmp_msg_0_1_1.flags = 118U;
    tmp_tmp_tmp_msg_0_1_1.last_error.assign("EJWGXUFCIGVXFFIJZMDVKUSWAAOARSGPTMBJOYLSSJRQKJIIYQZPSZXMEDAZWOAEGVDQDTSFWHMUQFLMLTJXIXNGCCTPIXEGBRPYVEWZZDRWYYNEBKDMVAWWDINDXRVBRTYZVQZYLTHABK");
    tmp_tmp_tmp_msg_0_1_1.last_error_time = 0.8563046055939448;
    tmp_tmp_msg_0_1.start_actions.push_back(tmp_tmp_tmp_msg_0_1_1);
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.32730534002176337);
    msg.setSource(11865U);
    msg.setSourceEntity(98U);
    msg.setDestination(28452U);
    msg.setDestinationEntity(207U);
    msg.timeout = 34593U;
    msg.lat = 0.6639585034924211;
    msg.lon = 0.8863098831617119;
    msg.z = 0.005946592664292094;
    msg.z_units = 164U;
    msg.speed = 0.5712966032325203;
    msg.speed_units = 195U;
    msg.bearing = 0.7934921482917638;
    msg.width = 0.5969306649610646;
    msg.direction = 107U;
    msg.custom.assign("CKEICCSKDFGBUAEEKPKDTBFVDSSZHLGZKKPYVSCVECMMDLPDRLANUTIQKSEHZFMWZLIXJYPFBQMTXVRNGSZXTUKBRGWECKCQMUNEOOIHNGUSEGRJBNIZIRNMVRWXDJPMAQXYQXAQOPOQFBWAMSLRWLJFOBHLGOHDUVTAYTYFQVVPLKQTFRAUFUGQACJXSHWFYINYNHDCMUWZNHOIPATIJJBJLLVWVHYWTBZSOEGGMRTHNZBJOUW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.7726254772099453);
    msg.setSource(36667U);
    msg.setSourceEntity(166U);
    msg.setDestination(60338U);
    msg.setDestinationEntity(238U);
    msg.timeout = 45602U;
    msg.lat = 0.04259122935306148;
    msg.lon = 0.27282775105744606;
    msg.z = 0.8554446551013315;
    msg.z_units = 11U;
    msg.speed = 0.8382639180039513;
    msg.speed_units = 42U;
    msg.bearing = 0.40796691831671816;
    msg.width = 0.9702385250628719;
    msg.direction = 214U;
    msg.custom.assign("TXRAWCOZACVCPPSOTASGEOKAXZUBSPFNBMLQIGRHKSOLJDVBGQTYJWRXIVNUFLQHYWBMBTMXDEFWAFCFLXTUKSNVSHKIHOPHWXQQUVNBXIFZMSAJYJTREREANCUCEXKIJSJGKLOZMWOMSFRGHJQLOEILBMVATDPGERD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.8170092907651496);
    msg.setSource(44724U);
    msg.setSourceEntity(215U);
    msg.setDestination(21348U);
    msg.setDestinationEntity(243U);
    msg.timeout = 15447U;
    msg.lat = 0.1412397510041753;
    msg.lon = 0.6221900996279786;
    msg.z = 0.44506756828663374;
    msg.z_units = 103U;
    msg.speed = 0.4236685535292831;
    msg.speed_units = 20U;
    msg.bearing = 0.640250871607906;
    msg.width = 0.8859442326539781;
    msg.direction = 233U;
    msg.custom.assign("WAWDTZJSDPTFUKRQSMYONXPGNBEVHPVMSYRCAUUDTJTJZLERIBTJIQXVANXFIGGHVNRXVEXKAFHWRMGPZDVABARZLPQNYSCPJTEZOIOMGXHUGCGLSNALUXSZMJJBYFHHKBIYRLJOQRFEVHUTWRLPWMKLEAVKFPYFEDN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.09738250064524667);
    msg.setSource(64015U);
    msg.setSourceEntity(19U);
    msg.setDestination(44531U);
    msg.setDestinationEntity(93U);
    msg.op_mode = 19U;
    msg.error_count = 17U;
    msg.error_ents.assign("WOMZQLDTBSWIDVOXZ");
    msg.maneuver_type = 9034U;
    msg.maneuver_stime = 0.09133210312089735;
    msg.maneuver_eta = 36486U;
    msg.control_loops = 2804937856U;
    msg.flags = 83U;
    msg.last_error.assign("MRBEDLRBMTPMHAKSLMUPNPIXRLMIUUZFOVPTVWBVIZQDXYEPWLBZUQFYQKHSFOKLLSRIDEEUHCPACADKDVGODRGEAIQDNTBJMJTYWXNLWZIASTQVNEOTCODWWWFVMGNAUGTXFYSJZSPTVEFTHHYROVCQMEXUIJAZGOYFJYZGVNBDOJVOCYFQWHXRMMYCGRECKPXUBOE");
    msg.last_error_time = 0.11449676280725407;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.39492790438212855);
    msg.setSource(39558U);
    msg.setSourceEntity(205U);
    msg.setDestination(32312U);
    msg.setDestinationEntity(127U);
    msg.op_mode = 237U;
    msg.error_count = 96U;
    msg.error_ents.assign("AFZTCHPQBNEGFJSDODCYYTMHEOAGNAARKYFTFAPFUHDFYBPVTBOISUWALSRDTWHMVAHDDMNKOASKWKQCEMBOGJXYSXYENNTKUBOUYLSXNPJKDHBNZYLJBZXRLQKVHWQPBOLELIIJTXJFIIMTDJXXKORWDIZQTLPGRCQUMGWBWZOJMZCCWVSNJRQILEUSZVRILDMBUENYGRKFPPIHXMVWECSHTVVHCGVEUFZKC");
    msg.maneuver_type = 9833U;
    msg.maneuver_stime = 0.5542860473084853;
    msg.maneuver_eta = 28350U;
    msg.control_loops = 825045078U;
    msg.flags = 95U;
    msg.last_error.assign("CTOUFFEWXIQFXTQVDLMZMEWJVJGTJHYRXFICATTQKYPLDKBCGOWKBEUJKZPGWBVRYISUYNAYEMPNCHFZSMTQUGJKSLCIMXKOVZQLCQPPJSNGIONRACVYCKVTVORBQDIASFSJ");
    msg.last_error_time = 0.00557593557960212;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.5116350426492297);
    msg.setSource(23102U);
    msg.setSourceEntity(118U);
    msg.setDestination(34523U);
    msg.setDestinationEntity(189U);
    msg.op_mode = 117U;
    msg.error_count = 94U;
    msg.error_ents.assign("FXLFXHQSJZOKOSZBXHDNVEMEUXZLUDPPZZEKAYEMSLXKQLMMSVOMZBOACCQKRHKJWSUYTPQSZPZVQXDJHCRJJWAWPRNUNNVTLYOMCNIPYRYPWOSZGRWWYRIAHRAXMXCLOYBQIIGPIDTVNCEBBPPGHDNQXCFCTFEMDTDGYAZWOTGHYEFLEVVARECWQOJVIFDXWHKVLUKBMUJNHNBSFWJUUJCIVMGFUGAAUEOKIYADFITKNBBGLGKTFQ");
    msg.maneuver_type = 47478U;
    msg.maneuver_stime = 0.8488253917813474;
    msg.maneuver_eta = 3557U;
    msg.control_loops = 3809455177U;
    msg.flags = 61U;
    msg.last_error.assign("LVVXTHUYEVFQRTMULQVHFWRXLHTDYICXAGFDBIDECTRAZDVKPDBNHJPUFXWMSQWVPSGNWZBKREDCEJUWQGTSFHTCIOGIRIGZPVKQUEYLUEMGMWMJNWNZMOEKIDPDNFERLURXEPKACBPUJZQVJIRBYFUUDVZZNCHXYQSIWPWJYOAKMCKFBWLOSTGJKRYAXGAJLTIHFZCNXNRQMAYBKJOSYOXXLPOAENCLQYMGMB");
    msg.last_error_time = 0.12695017810404485;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.6428364335062777);
    msg.setSource(30613U);
    msg.setSourceEntity(159U);
    msg.setDestination(32007U);
    msg.setDestinationEntity(251U);
    msg.type = 135U;
    msg.request_id = 57788U;
    msg.command = 43U;
    IMC::StationKeepingExtended tmp_msg_0;
    tmp_msg_0.lat = 0.18027510614471676;
    tmp_msg_0.lon = 0.7613231298022425;
    tmp_msg_0.z = 0.36814683039152873;
    tmp_msg_0.z_units = 167U;
    tmp_msg_0.radius = 0.023780162876243294;
    tmp_msg_0.duration = 1720U;
    tmp_msg_0.speed = 0.5645974664531601;
    tmp_msg_0.speed_units = 170U;
    tmp_msg_0.popup_period = 61268U;
    tmp_msg_0.popup_duration = 31263U;
    tmp_msg_0.flags = 240U;
    tmp_msg_0.custom.assign("VMRXFLJRVQWZWTDPTILIXVZBDDASULOVNUKHEDOTNTLISUADOOIYOEYMJQCRXSMKSVKJPSCCEBVTGVJSG");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 22710U;
    msg.info.assign("IEZQIYWTWIPBLHJUEONBCIGHBEGMYVYHJAXDLIFKHKJUSUNHUVLDCZCDFXEABYKVKSQGYXSKPNIOWWAHQOWMLUTLOCEEHUMNUXWFNIYGUUBS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.5066085467513693);
    msg.setSource(37182U);
    msg.setSourceEntity(107U);
    msg.setDestination(3152U);
    msg.setDestinationEntity(170U);
    msg.type = 151U;
    msg.request_id = 27604U;
    msg.command = 104U;
    IMC::YoYo tmp_msg_0;
    tmp_msg_0.timeout = 54740U;
    tmp_msg_0.lat = 0.47864880805368704;
    tmp_msg_0.lon = 0.1095964024538777;
    tmp_msg_0.z = 0.9855491156018211;
    tmp_msg_0.z_units = 151U;
    tmp_msg_0.amplitude = 0.16455229328966914;
    tmp_msg_0.pitch = 0.6498493564914407;
    tmp_msg_0.speed = 0.5620360018352871;
    tmp_msg_0.speed_units = 105U;
    tmp_msg_0.custom.assign("MNLPQYPCSWHJNWFRBOQBYLHIJWEFYNHYSRSHSTPBSPPVQGZRHNYMJFVAGSJIUGONCDQHCGZZDFLLQUBCZNKTTCECOUAMXOMRVKJHTFGAGEKHXDWNWIGXLMKOWEBEBZBQPFQTLSVORRUJDVWGOPDKABMYJUZZVOPLTXASBXDQTSYVCIASVAMGDEDEWXECXWFRAIL");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 46082U;
    msg.info.assign("ZVZJGWTMGURVWMKMRWRAMLTPCUHSUVHHIGLBQNFTSXQDVVENULGIHKRQEMIIFRYGQPOBYOFNTDKBTAIQPEYIKPLXPENXSAXOJHQPALJJAXMJOYRILHWZOAVHXGYCKGFUIHYVDHNMCLZQESJLCNBPQBHWGLBDDWDUYOSPFCNVDYBXJKXKVKKGOXCFZAUAUSCTPTUQMJZBEQXELERJNRGWCFRWCESTDSABYMBAZMOWFI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.037246551314147114);
    msg.setSource(37377U);
    msg.setSourceEntity(142U);
    msg.setDestination(4018U);
    msg.setDestinationEntity(96U);
    msg.type = 24U;
    msg.request_id = 6294U;
    msg.command = 71U;
    IMC::Launch tmp_msg_0;
    tmp_msg_0.timeout = 20506U;
    tmp_msg_0.lat = 0.731821858130284;
    tmp_msg_0.lon = 0.4141131423960749;
    tmp_msg_0.z = 0.023534850133759666;
    tmp_msg_0.z_units = 37U;
    tmp_msg_0.speed = 0.6824695549178862;
    tmp_msg_0.speed_units = 20U;
    tmp_msg_0.custom.assign("ZSEZDFEBOCGACOTMFQJBTYZYDXLDWCXNSTVMPWZQQBMHNWYGPDNRJKUOLDDNJISSDLIWABSUHQBBJAJYTPQHRFCBTTSEHHVHUWYXDLEJTVEFAHUNXRAFBNRVTWYGYRKZKFOXLAZFKMIUKTZQVJCCGBIHROPREXMQKHTOMCIGEPZPGMSLJKVPRWRAUZVSVIRUOXJXXNPFLGFOEVMBQGGWNIWONZQIYLKUIOYDAPCFAXKUSAVLYPDISLUHMECJGN");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 3366U;
    msg.info.assign("GWSLCWVLEUKRMPBRZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.39299201515354054);
    msg.setSource(48742U);
    msg.setSourceEntity(209U);
    msg.setDestination(37628U);
    msg.setDestinationEntity(218U);
    msg.command = 155U;
    msg.entities.assign("IVBOLDIDAAHHMQSCSBBBIOJTJDMINEVNDEOKZE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.9569235626275197);
    msg.setSource(39085U);
    msg.setSourceEntity(134U);
    msg.setDestination(31775U);
    msg.setDestinationEntity(238U);
    msg.command = 208U;
    msg.entities.assign("QYRJTBBJRDWWRCBLRCMMJKQZZFXPHOHLLYXOGZARASLJOFGCALRVQQJISAAREIHMINCMHYCGAGPVMGZWGUUXPVTKIUGIYMIKEKTXIGPNQFBODFMNDPFBEFHBHXUEUBNNUETEFSZTTAGEOXKKBUJWVXRUDHWKVYXRQCLNHZCKXHIVSIDKDNDWJVZBW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.25837643010992384);
    msg.setSource(60911U);
    msg.setSourceEntity(156U);
    msg.setDestination(64534U);
    msg.setDestinationEntity(165U);
    msg.command = 42U;
    msg.entities.assign("KZNIQYVGOXJGTINKPIKVOXONELCZDSOLUHMLDVMBFYTMXPJIBXMYLXWZISYYXOCQYKQJXHKJPUETTMUJTDWHAREAHCAFTACITSTKJBPAOPRVJOLHKRHGDNBEZRUGWFUFNIALIFWTMETFEXKWHPMSMAVBLC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.7124668394221193);
    msg.setSource(43537U);
    msg.setSourceEntity(131U);
    msg.setDestination(14608U);
    msg.setDestinationEntity(212U);
    msg.mcount = 209U;
    msg.mnames.assign("FOQRLGOOGGZWIEALIJQLWSTATFSBWNYGNMFTRUJUGARPAHJVLRGCMEHEKNOHCXESZZQPTGTEYWBPTQSDRFCEOKGXDNWPUWW");
    msg.ecount = 160U;
    msg.enames.assign("VABJJTGDRGCABYCEWVZMHYINQJKPFLPHLRXDTVDMNGZFDNHMUKYOJAGSVIAGPPMLFSAZFOFXYQKEBQEBXHLFDVOXGVKRISHESZVBYVBXTEYYPOMDWQRKWLRBIOSMKHWRHQYAAPTSVFLEAZQOJSSTZMUWDNPSUUKTOXUGPNUTRJFXLQYJWOMIISRTQACL");
    msg.ccount = 200U;
    msg.cnames.assign("WBYIIDZDHSNWYZEHHAOMSWFKDINREHAUJASBVZECCNAIQRTORLHBDHUARIBUWOSJUFMKXCKWENBTPBLCTVCXYCAYDIHGVBJESUTJWVJQOEJCVSONMEDLOMLYZABSGEPSWBCZIV");
    msg.last_error.assign("GMSNWBVWMBZVEIYKFDZHBPAQJBAZZUUVJIXMHCLNQXDUJKGZEUALAMWAIJQUYUORKEXGLXFCGCEECINMRKNBBOVKTYONWGCLOMRPOJXAXHLGIOFCPUSOSGVDSFEMWRHPPSPYBUVVYKEENWTDXAFDLRZSMTRPRSZTKQ");
    msg.last_error_time = 0.8010993231672248;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.509790504426719);
    msg.setSource(48949U);
    msg.setSourceEntity(171U);
    msg.setDestination(18231U);
    msg.setDestinationEntity(41U);
    msg.mcount = 108U;
    msg.mnames.assign("QIJBXZKJRZFGZGVUPOCBIDPKXZYUMHUHPOAEWIUMOMETRPCAXWUBINIXJDFWQSMLKHOSXLKGNDCTSSNHXVPPQJFNYGCVWZIQKKQL");
    msg.ecount = 71U;
    msg.enames.assign("HOVXDHXRWTFPEZHLLMZFLKANFGNIWCTRJZRIMOVNDVZGTCTZ");
    msg.ccount = 43U;
    msg.cnames.assign("OIVSZMJKWNQHVKSLVJLNWBO");
    msg.last_error.assign("TWLXPXQTKIWTEIHARNQRLIUCGOFXVYVDWBTEGIXIHNCHGQPVBSPDFXIKVWMRHTTEDLDFZ");
    msg.last_error_time = 0.16675288411355527;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.5661163814853464);
    msg.setSource(22949U);
    msg.setSourceEntity(134U);
    msg.setDestination(15019U);
    msg.setDestinationEntity(60U);
    msg.mcount = 209U;
    msg.mnames.assign("GXCPDIEOVLJXERUUJYFNXQBOKKNVXIJRXHRQPHUYHNSHZIIRFGGRQKTIPOSXXLEWVMBZMWWFKDYZT");
    msg.ecount = 183U;
    msg.enames.assign("LMPZXZRPFJPZAGOORABTSNQRDEJDSGRIKAWUHDVXDIYSPFTSCONIBNMZWBPMSLDKKENWGIWHSMUXFWJJAJMTNJFUQDVYVTODIOZANNNJCEBGLRHXTUXUBLELFPEJKXZTXACKORFQAMTKSMQFKCTUFBJLSRQZWMBQDYKWVHQPFQGCPOVZBIRHCACOALECHEDGY");
    msg.ccount = 199U;
    msg.cnames.assign("LBYSEVNXNRMZXVGWJSFRRGLDCJNAIIOAEFBT");
    msg.last_error.assign("NZVXJPKLYAKYJIIWQGOPAXMEDUHLUFXILSNPDYPIRHARTMKTEGSIRLCDZAIKUUNR");
    msg.last_error_time = 0.7164300593792574;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.7612494268525982);
    msg.setSource(61322U);
    msg.setSourceEntity(105U);
    msg.setDestination(19768U);
    msg.setDestinationEntity(88U);
    msg.mask = 101U;
    msg.max_depth = 0.2137330047192808;
    msg.min_altitude = 0.11151279038150408;
    msg.max_altitude = 0.7081852191459379;
    msg.min_speed = 0.3163558662207002;
    msg.max_speed = 0.9093442744352022;
    msg.max_vrate = 0.9405064186913243;
    msg.lat = 0.33059294614877777;
    msg.lon = 0.750695458299596;
    msg.orientation = 0.9386251408713144;
    msg.width = 0.908429399322754;
    msg.length = 0.45698139114415137;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.5873930213247427;
    tmp_msg_0.lon = 0.2977418022022199;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.5897941410658847);
    msg.setSource(11734U);
    msg.setSourceEntity(73U);
    msg.setDestination(60609U);
    msg.setDestinationEntity(125U);
    msg.mask = 39U;
    msg.max_depth = 0.6351230051936251;
    msg.min_altitude = 0.31573736948670506;
    msg.max_altitude = 0.08891302543665935;
    msg.min_speed = 0.8630849906371186;
    msg.max_speed = 0.9952849211525725;
    msg.max_vrate = 0.5990158632042499;
    msg.lat = 0.2446863043762103;
    msg.lon = 0.2869397332320839;
    msg.orientation = 0.3436228675687637;
    msg.width = 0.40176542525965664;
    msg.length = 0.8088709610968248;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.5235863179144512;
    tmp_msg_0.lon = 0.5657863716139292;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.07789150980683257);
    msg.setSource(17569U);
    msg.setSourceEntity(236U);
    msg.setDestination(32565U);
    msg.setDestinationEntity(93U);
    msg.mask = 4U;
    msg.max_depth = 0.5351545757389016;
    msg.min_altitude = 0.3548659212432107;
    msg.max_altitude = 0.9435132848681351;
    msg.min_speed = 0.0029144276230314015;
    msg.max_speed = 0.3276741104054496;
    msg.max_vrate = 0.6343114287996958;
    msg.lat = 0.6736728999374516;
    msg.lon = 0.4635777797668589;
    msg.orientation = 0.680681972939565;
    msg.width = 0.9668291753177852;
    msg.length = 0.575959901726171;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.857437441699134);
    msg.setSource(56018U);
    msg.setSourceEntity(103U);
    msg.setDestination(38442U);
    msg.setDestinationEntity(223U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.8577143304607611);
    msg.setSource(39453U);
    msg.setSourceEntity(179U);
    msg.setDestination(60119U);
    msg.setDestinationEntity(49U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.0048306478088665505);
    msg.setSource(47007U);
    msg.setSourceEntity(178U);
    msg.setDestination(65085U);
    msg.setDestinationEntity(166U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.4848964581201288);
    msg.setSource(44864U);
    msg.setSourceEntity(86U);
    msg.setDestination(51193U);
    msg.setDestinationEntity(213U);
    msg.duration = 12202U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.9199806662965612);
    msg.setSource(10860U);
    msg.setSourceEntity(40U);
    msg.setDestination(16454U);
    msg.setDestinationEntity(200U);
    msg.duration = 62954U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.3978234428751366);
    msg.setSource(46560U);
    msg.setSourceEntity(218U);
    msg.setDestination(22300U);
    msg.setDestinationEntity(10U);
    msg.duration = 62627U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.26136170121137836);
    msg.setSource(18682U);
    msg.setSourceEntity(183U);
    msg.setDestination(11898U);
    msg.setDestinationEntity(183U);
    msg.enable = 38U;
    msg.mask = 3880940886U;
    msg.scope_ref = 1759473236U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.17462461207941626);
    msg.setSource(47252U);
    msg.setSourceEntity(54U);
    msg.setDestination(13585U);
    msg.setDestinationEntity(206U);
    msg.enable = 165U;
    msg.mask = 2753677680U;
    msg.scope_ref = 2473932250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.29215955402839255);
    msg.setSource(53188U);
    msg.setSourceEntity(143U);
    msg.setDestination(29937U);
    msg.setDestinationEntity(85U);
    msg.enable = 246U;
    msg.mask = 3297257497U;
    msg.scope_ref = 2794281981U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.7561085687538489);
    msg.setSource(40912U);
    msg.setSourceEntity(210U);
    msg.setDestination(40777U);
    msg.setDestinationEntity(206U);
    msg.medium = 120U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.8749848664858383);
    msg.setSource(51555U);
    msg.setSourceEntity(97U);
    msg.setDestination(88U);
    msg.setDestinationEntity(100U);
    msg.medium = 164U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.8517967137518441);
    msg.setSource(50669U);
    msg.setSourceEntity(137U);
    msg.setDestination(34274U);
    msg.setDestinationEntity(238U);
    msg.medium = 204U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.8330645848026338);
    msg.setSource(386U);
    msg.setSourceEntity(120U);
    msg.setDestination(46958U);
    msg.setDestinationEntity(63U);
    msg.value = 0.9985607510969983;
    msg.type = 102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.536113072973671);
    msg.setSource(33091U);
    msg.setSourceEntity(146U);
    msg.setDestination(52810U);
    msg.setDestinationEntity(67U);
    msg.value = 0.9776211763347842;
    msg.type = 102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.4993554172141219);
    msg.setSource(11182U);
    msg.setSourceEntity(233U);
    msg.setDestination(63580U);
    msg.setDestinationEntity(232U);
    msg.value = 0.7644458046355015;
    msg.type = 128U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.9856055617383183);
    msg.setSource(21102U);
    msg.setSourceEntity(152U);
    msg.setDestination(1298U);
    msg.setDestinationEntity(216U);
    msg.possimerr = 0.8233986914725231;
    msg.converg = 0.5385469090485158;
    msg.turbulence = 0.0026788049070747277;
    msg.possimmon = 48U;
    msg.commmon = 230U;
    msg.convergmon = 148U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.3367998136693243);
    msg.setSource(4739U);
    msg.setSourceEntity(3U);
    msg.setDestination(1733U);
    msg.setDestinationEntity(8U);
    msg.possimerr = 0.26379569254881463;
    msg.converg = 0.09181698924744053;
    msg.turbulence = 0.7952933133761282;
    msg.possimmon = 104U;
    msg.commmon = 241U;
    msg.convergmon = 147U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.23689150008151072);
    msg.setSource(10877U);
    msg.setSourceEntity(118U);
    msg.setDestination(63878U);
    msg.setDestinationEntity(182U);
    msg.possimerr = 0.2615983459183435;
    msg.converg = 0.6417125899005703;
    msg.turbulence = 0.7528960425802922;
    msg.possimmon = 187U;
    msg.commmon = 210U;
    msg.convergmon = 84U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.46983418740506266);
    msg.setSource(23400U);
    msg.setSourceEntity(178U);
    msg.setDestination(45810U);
    msg.setDestinationEntity(254U);
    msg.autonomy = 46U;
    msg.mode.assign("NTMZBTEYEAROAKEYI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.5232597213155535);
    msg.setSource(58357U);
    msg.setSourceEntity(208U);
    msg.setDestination(51897U);
    msg.setDestinationEntity(134U);
    msg.autonomy = 222U;
    msg.mode.assign("VYCYISBJHMAURPQDLHKYSDQTBFJBUZBWJRDOOHWYFTEYLJMPULVNZSIDGTHJRGNEJCSHKKCBTYZOOUAOAFSALWCIWENZDAKBIXCBTVHQTLMXGJPSLKIFWQECGHGCBLLFSTDXYURPWUMZDKSIFIXCKOUFNGEFYMGWNMKBEGVGVUJDEPVKPAMNJHNBVRAOUXIPSVVFLHQVEDYXOAXGTQPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.11650072247067345);
    msg.setSource(28320U);
    msg.setSourceEntity(15U);
    msg.setDestination(19951U);
    msg.setDestinationEntity(149U);
    msg.autonomy = 64U;
    msg.mode.assign("OVXYRQQSTIJFLLVNLFAKSCAUDPOP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.0677937041239578);
    msg.setSource(17134U);
    msg.setSourceEntity(141U);
    msg.setDestination(63684U);
    msg.setDestinationEntity(171U);
    msg.type = 245U;
    msg.op = 204U;
    msg.possimerr = 0.6463223349593351;
    msg.converg = 0.36818668716336145;
    msg.turbulence = 0.06299097837072931;
    msg.possimmon = 168U;
    msg.commmon = 117U;
    msg.convergmon = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.1907752973503457);
    msg.setSource(36634U);
    msg.setSourceEntity(161U);
    msg.setDestination(62788U);
    msg.setDestinationEntity(199U);
    msg.type = 91U;
    msg.op = 2U;
    msg.possimerr = 0.6615002490049957;
    msg.converg = 0.5375394156233565;
    msg.turbulence = 0.5475665176501013;
    msg.possimmon = 169U;
    msg.commmon = 162U;
    msg.convergmon = 210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.52902169469534);
    msg.setSource(52044U);
    msg.setSourceEntity(29U);
    msg.setDestination(6421U);
    msg.setDestinationEntity(93U);
    msg.type = 97U;
    msg.op = 120U;
    msg.possimerr = 0.21439930052323164;
    msg.converg = 0.7734099164629806;
    msg.turbulence = 0.44410502653897244;
    msg.possimmon = 71U;
    msg.commmon = 142U;
    msg.convergmon = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.3255080980054774);
    msg.setSource(6421U);
    msg.setSourceEntity(38U);
    msg.setDestination(53942U);
    msg.setDestinationEntity(54U);
    msg.op = 147U;
    msg.comm_interface = 97U;
    msg.period = 30797U;
    msg.sys_dst.assign("EJFGPYLMTVTNRZMDUBDKPPFXJPSLWLJCGERQXZASDYTMSMHHQMFDFAXHBNAJUEICPFBUULADOHUWKUNEVMKAGGZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.8881112277415045);
    msg.setSource(32649U);
    msg.setSourceEntity(195U);
    msg.setDestination(47718U);
    msg.setDestinationEntity(6U);
    msg.op = 105U;
    msg.comm_interface = 134U;
    msg.period = 16699U;
    msg.sys_dst.assign("UQCEJCHTHAIKEVISNGTRSWRRYWPGRTXMSXMZDOZJAXLAOTNRDDSGHP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.9362959931868402);
    msg.setSource(53349U);
    msg.setSourceEntity(178U);
    msg.setDestination(57790U);
    msg.setDestinationEntity(44U);
    msg.op = 123U;
    msg.comm_interface = 163U;
    msg.period = 11776U;
    msg.sys_dst.assign("VPEVBYYYZVCPUPQCNYSLOORYRRNHOOCARIAQAPBBFHJWKJQSPVHOXJXWFGENSPGZNDBFYJTITNHXRWHYQITIRIMMUYOHEVWBYZCRKYEQVNPGWKDQMBRSQKJKKKMZDEGMJWCZOTTPKGDDELLESACHFVKMMUIIXTZBXIOQDVJLSUUQTQHXBGOGNFAAJTBLFSUWPSUTILJSFRMDL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.10009889099621727);
    msg.setSource(58807U);
    msg.setSourceEntity(68U);
    msg.setDestination(17527U);
    msg.setDestinationEntity(79U);
    msg.stime = 1100337505U;
    msg.latitude = 0.6697564273942082;
    msg.longitude = 0.9010703231807159;
    msg.altitude = 52380U;
    msg.depth = 41956U;
    msg.heading = 63164U;
    msg.speed = 14683;
    msg.fuel = -15;
    msg.exec_state = 18;
    msg.plan_checksum = 9759U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.4081287426034038);
    msg.setSource(26231U);
    msg.setSourceEntity(207U);
    msg.setDestination(22419U);
    msg.setDestinationEntity(74U);
    msg.stime = 3917433901U;
    msg.latitude = 0.3463713115362089;
    msg.longitude = 0.4361610261798542;
    msg.altitude = 65124U;
    msg.depth = 18703U;
    msg.heading = 52834U;
    msg.speed = 29792;
    msg.fuel = 21;
    msg.exec_state = 63;
    msg.plan_checksum = 61534U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.15105426236496544);
    msg.setSource(60351U);
    msg.setSourceEntity(139U);
    msg.setDestination(1332U);
    msg.setDestinationEntity(240U);
    msg.stime = 3615288664U;
    msg.latitude = 0.5051905677585182;
    msg.longitude = 0.625661710281172;
    msg.altitude = 29168U;
    msg.depth = 44281U;
    msg.heading = 32268U;
    msg.speed = -26796;
    msg.fuel = 115;
    msg.exec_state = 15;
    msg.plan_checksum = 1341U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.5368637639198183);
    msg.setSource(16541U);
    msg.setSourceEntity(0U);
    msg.setDestination(13750U);
    msg.setDestinationEntity(201U);
    msg.req_id = 21429U;
    msg.comm_mean = 87U;
    msg.destination.assign("JUDIWIYWBHHF");
    msg.deadline = 0.6629755254954627;
    msg.range = 0.05615438428825703;
    msg.data_mode = 139U;
    IMC::DesiredRoll tmp_msg_0;
    tmp_msg_0.value = 0.731796236352454;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("GCFIWCUUNNDDHFTOMXMUVWEBXOASTGKWYAWFUAZZPBLRPPAJPNFIBRVGAZMXROKYKQTDCFFLNSMCHNDVCVEEPNQNYRRSYPYHECMZBGWYLERNSHLTDWJUIZPZLHUKKRUOMMWDLTAHRASOJJRVTAPDLOETDVGJXORHIVJSSCZYGQFSBHPCQHAGZFEZLYIDWX");
    const signed char tmp_msg_1[] = {82, -56, 103, -4, -38, 50, -89, 45, -35, 41, -63, -68, 17, 88, 96, 95, 31, -87, 121, -28, -119, -97, 31, -53, 66, -122, 17, -24, -63, 37, -15, 30, 70, 125, 115, 50, 33};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.22285088126684205);
    msg.setSource(36151U);
    msg.setSourceEntity(35U);
    msg.setDestination(27084U);
    msg.setDestinationEntity(151U);
    msg.req_id = 48688U;
    msg.comm_mean = 48U;
    msg.destination.assign("CVNANZWPGWFOSGTXLLOAXTFOXTATPQAHQYGOMGQIVUQCQDTKPESXWCKNPIPLFDDJUCOPYAGVSHXDEDPFMXHRXZLYELKQYFMKYWOKWBFEUNHRSIQMJTVBDRDAZGUROENFMUTFLKNTKMYZRBWIMUIVEZMSALPUJIKFELMKDCIEVCSWLBBRJGHTQHJSVOSNJYNQYAOCSBEFZXEBIDVRHC");
    msg.deadline = 0.4497661446310054;
    msg.range = 0.8355736534326628;
    msg.data_mode = 100U;
    IMC::IndicatedSpeed tmp_msg_0;
    tmp_msg_0.value = 0.9695002200753968;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("OTNBZWKMWICPPHVWXCYAWCIHSMWUXRXZNKWCAMMHDQLLVWKSONJOIJPPEBUBGJRTJQLYRHDXTSSVVXDASXGVXBGZENKIFFRDUHIWOYAFEMJNATEOFHFEYZPZLSZZVKGIDBTWLGNLNVRJUAHUTQDIOCNPVNZRMQQEGWPFCTCOEPHPLRMXYQCFDRGUKKIKTBIYXOSZGRFCDQKQ");
    const signed char tmp_msg_1[] = {11, -124, -73, -64, 115, 117, 17, -91, 18, 34, -24, -37, -73, 99, 69, 111, 84, -32, -123, 63, 60, -57, 54, -39, 107, -104, 21, 6, -52, -92, 102, -62, 103, -65, 37, -55, -67, 124, 14, 7, -121, -57, 10, 22, -113, 102, -61, 2, 85, -108, 99, 24, -100, -74, -56, -32, 117, 60, -43, -95, -60, -112, 57, 3, 58, -99, 6, 47, -118, 91, -54, -35, -93, 53, -86, -49, 1, -48, 36, -122, 12, 44, -21, 47, -45, 111, 75, -7, 87, 81, 7, -29, 102, -109, 2, -8, 25, 78, -1, -47, 116, -47, -46, -96, -97, 21, -48, 22, -6, -95, 66, 106, 11, -40, -55, -76, -74, -127, -105, 70, 8, -66, 28, -43, 107, -104, 55, 23, 50, 10, 43, -81, -6, 100, 70, -3, 70, 47, -33, -50, 100, 104, -81, -71, -105, 14, 84, -26, 93, -9, 16, -21, -6, -81, -39, 46, 65, 31, 92, 87, 18, -85, 112, -79, 89, 99, -94, 118, 69, -57};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.0749454168219752);
    msg.setSource(30605U);
    msg.setSourceEntity(253U);
    msg.setDestination(48659U);
    msg.setDestinationEntity(81U);
    msg.req_id = 9201U;
    msg.comm_mean = 43U;
    msg.destination.assign("MNEEDKYJDHOOHUEGFQYFQAFSTVXYQPGDVKAAVDZYMTROHDPCSMIXRTWJXZLBNZHKXRZQCOJPSSALLVYBMPCJSSQPHONLDVIMFAEIWTTYHNOGKVCNTCAAWDYPBZCZENIAWIOXLTXWHWBJIHFYVPGRKLLTBLVALKEHGPRMUFXMNGWFTBKVKIURCZEUSGDQBQPSWZXMMJYNEJC");
    msg.deadline = 0.7947564233432975;
    msg.range = 0.43180328677309;
    msg.data_mode = 115U;
    IMC::CurrentVelocity tmp_msg_0;
    tmp_msg_0.x = 0.5299941695247089;
    tmp_msg_0.y = 0.12254086405120002;
    tmp_msg_0.z1 = 0.6383733637148215;
    tmp_msg_0.z2 = 0.6538360794174134;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("FQLIMGDEPOKMOMKAJLPUYMCKCRMPTGZLCLKJYWVYSUJNYFHOFNFDBNKVYDINHWSXGXPWNVIIGFHQFVRCKZTEWAAUQHTDJOUPTJDPHZAUBWVBQZOAEHXRTJLSSQGFESOCZVXPAOTCUQBXAYKWYSHFVNDWMNHSRXRUHGIZXRCLYNBPGUZDZCXSQMMITRFZBSSGAGMEXEZ");
    const signed char tmp_msg_1[] = {-73, 5, -21, 97, -56, 2, -61, 64, -30, -35, -95, 117, 92, 91, 10, 59, -96, -116, -70, -29, -10, 112, -112, -37, 65, -77, 82, -85, -56, 66, -30, 55, 75, 113, -94, -51, 58, -74, 58, 117, -11, -57, -58, 20, 97, -9, 7, 84, 7, 37, 28, 50, -57, 50, 34, 43, 75, -46, -13, 47, 71, -73, -70, 76, -120, 55, 7, 44, -18, 86, 57, -78, 106, -105, 119, -106, 3, 8, 126, 112, -13, -82, -70, 23, -61, 32, -61, -53, -29, 74, 15, 95, 45, 53, 9, 90, 34, -55, -57, -45, -82, 38, 109, 30, -21, -3, -3, 74, -7, -26, 58, 108, -68, -103, -105, 12, 77, 90, 99, -63, 44, -47, -40, 36, 113, -10, -38, -106, -100, -17, -28, -13, -21, 32, -39, -79, 59, 45, 79, 59, -55, 43, -108, 102, 124, 114, -14, 11, -32, 26, -95, 65, 72, -82, 22, 56, 99, -92, 72, 94, 29, 7, 85, 98, -3, -7, 82, -99, 62, 98, -91, -31, -39, -98, 94, 86, -27, 14, -14, -43, -15, -12, -69, -30, -3, -113, 85, -45, -109, -31, -96, -88, -115, -77, -99, -97, 13, -5, -25, 119, 38, 125, -110, -33, 96, -81, 21, 96, 46, 103, -14, -15, 61, -37, 125, -104, -26, 5, 68, -106, -41, 103, -43, -120, -9, -55, 15, -94, -110, 96, -105, -76, -60};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.15092905174827165);
    msg.setSource(36637U);
    msg.setSourceEntity(45U);
    msg.setDestination(50957U);
    msg.setDestinationEntity(145U);
    msg.req_id = 35673U;
    msg.status = 232U;
    msg.range = 0.3132266023794614;
    msg.info.assign("BENUCPIXLLNLLALNHKWFRUUXJMPTKNLJOWXYPZTBYCSDRZCINEBGXEAEYQCUDQVCFROLCNKFRAEEVRMXWYZCJAJKYBMHIDNILFBUOQAHSHHZMYGQSVQBTUJTXTXVZTZGHOMBTFMQGXBEGZVWGWATSSVVOQOPANUKSMGKPKOUIYKMDDQFWZESPGHOUJPTMHYWRXHFQPWVVTOD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.6780051744659048);
    msg.setSource(28915U);
    msg.setSourceEntity(69U);
    msg.setDestination(31360U);
    msg.setDestinationEntity(172U);
    msg.req_id = 27746U;
    msg.status = 123U;
    msg.range = 0.874942968349942;
    msg.info.assign("KBFBDEAOUTHVRNSZDIFSOPUZBSEIYEEQXYORKZWXWYANWDRJUVLOJUFNGAJPRQQGOMVBMDRYVYLUMLVDMHATAWEGQTHXKAKDCSREC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.9488300227636508);
    msg.setSource(64742U);
    msg.setSourceEntity(182U);
    msg.setDestination(62588U);
    msg.setDestinationEntity(205U);
    msg.req_id = 31669U;
    msg.status = 240U;
    msg.range = 0.5809836601057795;
    msg.info.assign("ZPRAKMDPBNSKQTKUGUVIUMGSYPDMORKKYIBUJDXMYEVYQTQWDISCGZLZUBBAGHRXDNFKXATHTHNTKGWEJQIFTADPEXDOLCMEFBJKQIWZGMOUHCXJELVCRNFPBGHZPIWJEYCSLMJSPUONPOZAGXFFLYUYLIELZABHHVQXCNUMXVXDOVYJVKBNHZSCVROLYVWORNMZNRBJNFTAQQIOQWCELHJPDSRECWWQOIUBEXW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.101709581091051);
    msg.setSource(6701U);
    msg.setSourceEntity(42U);
    msg.setDestination(60836U);
    msg.setDestinationEntity(42U);
    msg.req_id = 40090U;
    msg.destination.assign("RACMEJVQYNGHOYGIO");
    msg.timeout = 0.9042158316594151;
    msg.sms_text.assign("VKWYRMMWOLRUDACIDBUXCIHJUVWSQIBLSSRGDHXUENKCWTBJULTMSBCCVFBZGYKOVH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.9580846242133431);
    msg.setSource(62111U);
    msg.setSourceEntity(204U);
    msg.setDestination(47899U);
    msg.setDestinationEntity(110U);
    msg.req_id = 17972U;
    msg.destination.assign("IVRSUNHPKLZSBHFJCKPADCGGIADOYFVTBPQBGSVYGDIBETLJHMKHBFVWHTEEZEKVIUBLYREOQIXMUFZXIWQWAWEQYTHPKQOCEGAVNNGTZQJLOTXGFPDQNSLCVWEABZMFYLJSRUZFXHJJHMXUTRUVRNXAHRUBDPDGXQOMYVSUMNLJULMECACMYRDXOHSTSWVMOZWXKSNACOCYUGKQBJFSEMBCAIZDTAPIFPRKDPQWLRY");
    msg.timeout = 0.529179179756612;
    msg.sms_text.assign("TXNRBSHEZFNCCBIXHJDOXCDAAPEJLMZQKZOOHUBVEBGVKSMLZONQNJQUSONNOEJYZPTRXJVVDACBDYSAYISEHEFOIPBFLCGGFFNILBWLTMKPRVSOKEZRRSQYCUUXATJYHTDIWPPJZWBGHXIEUWRPOHUUFAXQQVVQXCCKKDSCLTWYZSMDRVJMLDAMNNMWKWQAGXAUYWKGLFFWVTLW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.6127046637904503);
    msg.setSource(3526U);
    msg.setSourceEntity(197U);
    msg.setDestination(46584U);
    msg.setDestinationEntity(134U);
    msg.req_id = 60154U;
    msg.destination.assign("FDAQYNXRYCOVRNNXBSTPBZDYCTXDYGYBKPKRMFEJLV");
    msg.timeout = 0.6780682909231266;
    msg.sms_text.assign("YBCVYJTALKKPVUPBLQFGUWPCALPULDRNOKEADARNBGZCAYCZJXGXSWWFVNVURSJQROOSHSNJUMYCWQQJDFOZORFAQEBRSTITPZBFDLVNIQWCEWKXOSEMNLGTEIWVHSYXO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.5717270424527694);
    msg.setSource(15801U);
    msg.setSourceEntity(112U);
    msg.setDestination(9853U);
    msg.setDestinationEntity(20U);
    msg.req_id = 4122U;
    msg.status = 77U;
    msg.info.assign("PZVZKGTVRVAZXMFEAVYRBLRSBKBEWQYFRTIXAPKTHCDSOFYXJEMOHFOZIMXYUCNKLJHKJFGJDDGEOCRSFOHBWZVTMKTQPNFSKNIZMPKQCXDABJHHNUSFXEWPNBGCVWUTQBNOUUMQSSPKYLLAGMMNMEOWHSWGDZEAQPJTYWMNXEW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.694542159256196);
    msg.setSource(12484U);
    msg.setSourceEntity(210U);
    msg.setDestination(33093U);
    msg.setDestinationEntity(129U);
    msg.req_id = 56451U;
    msg.status = 88U;
    msg.info.assign("ZEXZNTPYEOFZFGMKAXBMDAEQXVAAQTSBJZOMYFTZQRGZJYUFSIQJJHODSSELTWRTVHGTSBNQRIUCUUKBVFNCZRWNZLHDRXIDCJIBHLPBSFXWLNNGXRWLVPOEIJLYFOZJJZECOBMYGOPGKYF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.948060005648505);
    msg.setSource(40185U);
    msg.setSourceEntity(100U);
    msg.setDestination(58520U);
    msg.setDestinationEntity(199U);
    msg.req_id = 31747U;
    msg.status = 248U;
    msg.info.assign("GJUAKVSSHEUUGBSBVNRSQQMLTLLWUIUPXXEJDOESSJZGSGAWCFYVZIFJKTAWWIHTIHGKEEYAEDMHTTHQHVLYNQOANGBZDXCLGQOKZSIESYFVBPEUCOFPQCBNMPXVCBFOAKJURXDXPNGTCYVYBHDDRCKZZIZFFNCMDNRMORPJOXDLXVYNTLB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.2850004561498918);
    msg.setSource(15908U);
    msg.setSourceEntity(196U);
    msg.setDestination(29360U);
    msg.setDestinationEntity(227U);
    msg.state = 169U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.43995378533070795);
    msg.setSource(59977U);
    msg.setSourceEntity(88U);
    msg.setDestination(49021U);
    msg.setDestinationEntity(150U);
    msg.state = 82U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.8895633653105216);
    msg.setSource(393U);
    msg.setSourceEntity(126U);
    msg.setDestination(61640U);
    msg.setDestinationEntity(210U);
    msg.state = 2U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.395508906565066);
    msg.setSource(26799U);
    msg.setSourceEntity(116U);
    msg.setDestination(20438U);
    msg.setDestinationEntity(72U);
    msg.state = 92U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.8296677927074074);
    msg.setSource(30079U);
    msg.setSourceEntity(133U);
    msg.setDestination(22206U);
    msg.setDestinationEntity(41U);
    msg.state = 39U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.05637232141776882);
    msg.setSource(6365U);
    msg.setSourceEntity(165U);
    msg.setDestination(31052U);
    msg.setDestinationEntity(142U);
    msg.state = 107U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.30819475510746797);
    msg.setSource(31134U);
    msg.setSourceEntity(173U);
    msg.setDestination(24535U);
    msg.setDestinationEntity(1U);
    msg.req_id = 53919U;
    msg.destination.assign("DJUXSCBYNMZUJKRZDCEVPFNPNDBKODIJTUPHRVXQKNMWZCUDPHIWVGQYIQUSNQBGTVAPWRDFF");
    msg.timeout = 0.23936761292821018;
    IMC::RSSI tmp_msg_0;
    tmp_msg_0.value = 0.2230527451791514;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.6358013003084113);
    msg.setSource(61649U);
    msg.setSourceEntity(132U);
    msg.setDestination(8646U);
    msg.setDestinationEntity(133U);
    msg.req_id = 63303U;
    msg.destination.assign("CECDZFPGAIAIIZDWNILACGRUHXSQTMCHFPSMEDGCZIWVAKHENK");
    msg.timeout = 0.4972451228329331;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 42U;
    tmp_msg_0.svid = 176U;
    tmp_msg_0.elev = 0.22771499687255525;
    tmp_msg_0.azim = 0.294850502904635;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.45403114205777184);
    msg.setSource(46936U);
    msg.setSourceEntity(252U);
    msg.setDestination(1170U);
    msg.setDestinationEntity(76U);
    msg.req_id = 16085U;
    msg.destination.assign("ZEBJCRCDDIRNKIYKUQFJV");
    msg.timeout = 0.18022332192860036;
    IMC::LblConfig tmp_msg_0;
    tmp_msg_0.op = 122U;
    IMC::LblBeacon tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.beacon.assign("LZAWPYGQECPGJCUQVUDISLXFXAQPDDQYJGGRFWIFRFSVTU");
    tmp_tmp_msg_0_0.lat = 0.6701380013388021;
    tmp_tmp_msg_0_0.lon = 0.28125228169133243;
    tmp_tmp_msg_0_0.depth = 0.42968753486248923;
    tmp_tmp_msg_0_0.query_channel = 127U;
    tmp_tmp_msg_0_0.reply_channel = 24U;
    tmp_tmp_msg_0_0.transponder_delay = 30U;
    tmp_msg_0.beacons.push_back(tmp_tmp_msg_0_0);
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.9512604473345023);
    msg.setSource(61133U);
    msg.setSourceEntity(29U);
    msg.setDestination(25667U);
    msg.setDestinationEntity(197U);
    msg.req_id = 2094U;
    msg.status = 183U;
    msg.info.assign("LFCSLYMBENJHIMTKSWNOVODAHXMMTKYQZLZVKXWXNSKFSDLHCFQDWRDXTOIBHTQJDJCYFWOZUGQETYMPLFVVELCRQYTPJYIMZKIYWHFDURWM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.9486019737884896);
    msg.setSource(12048U);
    msg.setSourceEntity(102U);
    msg.setDestination(24307U);
    msg.setDestinationEntity(3U);
    msg.req_id = 31342U;
    msg.status = 127U;
    msg.info.assign("ZJMDMCXYASUQIYUDSFNKQXGPHYEVBAPXTZSRWJPPQGHWWKLCCVMUVLIHFGVWRUZVFXKITREMFRQKPTJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.289513744755003);
    msg.setSource(43976U);
    msg.setSourceEntity(12U);
    msg.setDestination(34087U);
    msg.setDestinationEntity(95U);
    msg.req_id = 11055U;
    msg.status = 99U;
    msg.info.assign("HSKTDSIWTBHTIBQRSBKVWALBQGNGKHNTYNRXADIYEZVOFLMWFIBPGPYXZNQVGEIJIJNBOOOQUORZMMYFTWEZHWOCLSAUCRGCJKJUOMUUEXVWHAEMMAHVDYCEQRALNRPJFEZKVKXFGXQFLPARVIWRUSGMIBYMQHPDAWOXICDZOBEZZVHDRFLYKJGLUXBWQFNSAYZQYA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.6924394263937353);
    msg.setSource(39756U);
    msg.setSourceEntity(244U);
    msg.setDestination(39994U);
    msg.setDestinationEntity(190U);
    msg.name.assign("HIKKICYKWAJWTZBHSUECQEDJTCNSYEIDNDLHEVTHEKHYFTRHQTBOUUGDOPVJSOFIWPMSFZMVJZSLJIXBKUHALVSOAIGKYQLXVGDMNSASXRQBOVIZAWTJABRAFYUZPHLACRAGKFFEFBOCJWKXNJIWEZHLQQKGNFQIRVHMYZZNWGWJTMOMPEPLXEQVOXXJCQ");
    msg.report_time = 0.7204409813564394;
    msg.medium = 91U;
    msg.lat = 0.33142765649287564;
    msg.lon = 0.04446764126687974;
    msg.depth = 0.05545737971400733;
    msg.alt = 0.3304077743921944;
    msg.sog = 0.002374724926993532;
    msg.cog = 0.4205576103215508;
    IMC::CompressedHistory tmp_msg_0;
    tmp_msg_0.base_lat = 0.8463481065825864;
    tmp_msg_0.base_lon = 0.4209218288125349;
    tmp_msg_0.base_time = 0.6068368509325779;
    const signed char tmp_tmp_msg_0_0[] = {11, -114, 71, 98, 59, 27, 23, 93, -45, -98, -95, -117, 1, -21, 45, 24, -96, 81, 67, -125, 3, 46, 123, 19, 37, -61, -30, -15, 21, -70, -20, 29, 27, -108, 80, -63, -104, 27, -126, 116, 8, 53, -10, -109, 37, 73, 9, 49, -126, -113, 45, 32, 31, 40, 0, -62, -127, 118, 26, 31, -79, 66, 32, -47, 56, 10, 98, -64, -75, -14, -40, -99, -79, 107, -22, -29, 84, -39, 23, -22, -74, -98, 97, -110, 56, 88, 51, 37, -103, -36, -110, 112, 55, 74, 64, 74, 36, -22, 65, -65, 83, -97, 36, -101, 121, -89, 34, 58, -65, -80, -78, 108, -34, 39, -93, 81, 23, 95, -97, 114, 49, -63, 108, -106, 77, -79, 126, -98, -112, -24, 83, -85, -75, 93, -54, 4, 102, 92, -25, -95, 29, 94, 40, -69, 85, -103, 109, 102, 0, -16, -104, 2, -45, 113, 22, 126, -23, -17, -47, 74, -44, 35, 16, -122, -42, -95, 113, 29, 94, -63, 53, 103, -70, 36, 83, 80, -87, -22, -16, 108, -39, 3, 17, -87, 103, -99, 39, 50, -67, 24, 20, 26, 121, -107, 22, 74, 90, -52, 77, -94, 98, 101, 21, -98, 112, 62, -45, -12, 113, -27, -77, -32, -52, 113, -97, -22, -120, 60, -71, 51, 83, 86, 11, 101, -78, -46, -70, 53, 61, -12, -33, -81, -7, 8, -11};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.4839841151100468);
    msg.setSource(41547U);
    msg.setSourceEntity(245U);
    msg.setDestination(37002U);
    msg.setDestinationEntity(205U);
    msg.name.assign("SUHYNQPQTTBKPUZPJNYBVFT");
    msg.report_time = 0.31991010803476627;
    msg.medium = 131U;
    msg.lat = 0.7322745299855866;
    msg.lon = 0.649452265968618;
    msg.depth = 0.6922679148743911;
    msg.alt = 0.27783542831096275;
    msg.sog = 0.7766332073552125;
    msg.cog = 0.7589479275553422;
    IMC::AssetReport tmp_msg_0;
    tmp_msg_0.name.assign("XDLWRITUPJGRVLPKXEZZFUHKPMKFSBXXIEOEHSXRHFQRMDBKCYVOTPOZMRKCJKBGGURFWJEDCIHZBXBQYGWKFWMYARDJTIJZMBOWYSNKBNJCGQQUXJFVVEQTLBQRCLUYCHEMADVCBIKIVMLXDMPQBNTDIXAPSTGFEFUAWDPGSN");
    tmp_msg_0.report_time = 0.9237565969443937;
    tmp_msg_0.medium = 156U;
    tmp_msg_0.lat = 0.7293961246200934;
    tmp_msg_0.lon = 0.06000480019226884;
    tmp_msg_0.depth = 0.7211673592333748;
    tmp_msg_0.alt = 0.7107687700434588;
    tmp_msg_0.sog = 0.7570953308456676;
    tmp_msg_0.cog = 0.41754232345220876;
    IMC::PlanGeneration tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.cmd = 204U;
    tmp_tmp_msg_0_0.op = 192U;
    tmp_tmp_msg_0_0.plan_id.assign("DOTNOPNHEXYOROUPRVKCMSMA");
    tmp_tmp_msg_0_0.params.assign("GHBJYXBPXIJHVKEJUCXCENECTQIDCQAJOSSRLLQ");
    tmp_msg_0.msgs.push_back(tmp_tmp_msg_0_0);
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.6099248624525695);
    msg.setSource(7200U);
    msg.setSourceEntity(81U);
    msg.setDestination(63664U);
    msg.setDestinationEntity(241U);
    msg.name.assign("LBIJRCEOWHPXPEAKGONZGOWWONBRPXGUSCKHHNJEYVZJQGF");
    msg.report_time = 0.9082431572352392;
    msg.medium = 17U;
    msg.lat = 0.9237847079348221;
    msg.lon = 0.43532024410948866;
    msg.depth = 0.7265752351584575;
    msg.alt = 0.6661176086971974;
    msg.sog = 0.17566917958292871;
    msg.cog = 0.02053785840641187;
    IMC::RemoteCommand tmp_msg_0;
    tmp_msg_0.original_source = 44388U;
    tmp_msg_0.destination = 6667U;
    tmp_msg_0.timeout = 0.5144476115221362;
    IMC::FollowPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.target.assign("MBVDGMUYFTDUAZRPGLITCYNEXFNWVSEYCQZEQSOJX");
    tmp_tmp_msg_0_0.max_speed = 0.2381802807629113;
    tmp_tmp_msg_0_0.speed_units = 52U;
    tmp_tmp_msg_0_0.lat = 0.7211887554767483;
    tmp_tmp_msg_0_0.lon = 0.7172102905667168;
    tmp_tmp_msg_0_0.z = 0.7608902311121434;
    tmp_tmp_msg_0_0.z_units = 29U;
    tmp_tmp_msg_0_0.custom.assign("CVBAWRCVZGSHDCNZTUJTVOMDCKINGXAEJBCUA");
    tmp_msg_0.cmd.set(tmp_tmp_msg_0_0);
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.3222165303932606);
    msg.setSource(23750U);
    msg.setSourceEntity(82U);
    msg.setDestination(35078U);
    msg.setDestinationEntity(226U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.7858817020009938);
    msg.setSource(56858U);
    msg.setSourceEntity(134U);
    msg.setDestination(19920U);
    msg.setDestinationEntity(51U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.8726667351857073);
    msg.setSource(7165U);
    msg.setSourceEntity(200U);
    msg.setDestination(39140U);
    msg.setDestinationEntity(146U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.638003535115748);
    msg.setSource(52392U);
    msg.setSourceEntity(92U);
    msg.setDestination(55726U);
    msg.setDestinationEntity(166U);
    msg.plan_id.assign("IGSSQZJHKANQBBDJWGOVCRIEXNWIIYUQRJDFNBTOWVRTPVKPWTGQEBKDOPMULHVKJUFSO");
    msg.description.assign("JNPNRWFUIMQQORXRAFHHHBCOSCDK");
    msg.vnamespace.assign("XDEHMLHXZTBGXGQOYCSNSJMTFTWAJKBBCCXVTHZQMODNITKDVYRGOFOZQQQSRKYBHIXCUJLMFWRPPSZLBLKWNQCSVITKCNHXWHIIEWVVVTOYJQSJPKPJURIIJDGMRUXBYRUPTSEDJLHFZLETWLCFCIUFNZGYFIODSUVDJWHADLAF");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("AXHDXKUILCTRPRDZXJQCGVSRZQEOJSPXOEKIGPMMEJGTWQBGLLVMVOELJHTQZRAYUSCIUEIMZDNVRHSHNXRQWDAFUJHTLTWHYUCONFBJRZVWKZLAOFMTWPTMLVBWYFFXOBYXDNAPXAHFMGORSQGYEIUZECHEHPJCWYPGDWLTHCFIBKTZSNIRFLNRTGBFYSFAQQYBMVEJMN");
    tmp_msg_0.value.assign("FLAPZFECFETHYVGHBODCVYKICDXRXCKTMARVCZXRLEWZGKGVHQZJQXTGEUQQLRWMRSVCCMYTOWEJMRTSGOMMNLFWGYINUHWLVWYCKNZXELWYHAGBISOIHLIHUYZDFLZVMRPPLIIAZZUOQWVDTUAIQJPKROUJOKTJXYBFBCDEJASWKGUQYRKVXFXNTFDIEBNHRZXOSJUBWEAUTQPHBV");
    tmp_msg_0.type = 210U;
    tmp_msg_0.access = 149U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("JMRYSLDDXPZTTMNSWYTMAXEOCSXPFSKODVAEUCNWOERXYLCOYADXKACQSIHNKFGCIKZRYDXYOWKBERBJRDYTRMGBBXGPVLPPSDLFZMXMQQVWQYBZONSKMVLJLRBJDAAATDVBVMWFKCAUZERZTUUFCTWGRGQQHSNJEQZQNVYLZBHF");
    IMC::PlanManeuver tmp_msg_1;
    tmp_msg_1.maneuver_id.assign("QAZYNFNHVEBPNFGQPOBZEITPKESWBJYDZITVCJTMCURCNSVLJROWAUVDJPGYKMVWTBLAHQEMYQDKRRHUSCBKMSCRIIKUFXOUSVIKYPQXIAHYILQJWGGKATOVPQSGMIQKMRYOCCEWAATV");
    IMC::Rows tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.timeout = 54193U;
    tmp_tmp_msg_1_0.lat = 0.17943032024825178;
    tmp_tmp_msg_1_0.lon = 0.015471361399265415;
    tmp_tmp_msg_1_0.z = 0.8269997810697818;
    tmp_tmp_msg_1_0.z_units = 234U;
    tmp_tmp_msg_1_0.speed = 0.047976815583495314;
    tmp_tmp_msg_1_0.speed_units = 28U;
    tmp_tmp_msg_1_0.bearing = 0.29562765004904956;
    tmp_tmp_msg_1_0.cross_angle = 0.5232770071832722;
    tmp_tmp_msg_1_0.width = 0.5717802029456448;
    tmp_tmp_msg_1_0.length = 0.1569044184391868;
    tmp_tmp_msg_1_0.hstep = 0.8954033226145687;
    tmp_tmp_msg_1_0.coff = 23U;
    tmp_tmp_msg_1_0.alternation = 64U;
    tmp_tmp_msg_1_0.flags = 141U;
    tmp_tmp_msg_1_0.custom.assign("IWZKJPTLNMQTLYVJQQIBHWBBYGVKFMAZERXSSLDAPVYRNDOTDMLRZRNEYSGOUHAWXAQZICBOCFHVJOXMCDQBEJVWWDTIMNIYHYUUPTFOPZSGNJCNSHBSJEXRPUEZLGRPXAPXQHMIETCZBRKAZFTKQGGEWLCKEMBNBYAOLRHQFKQAGXAOUMDZGPMYN");
    tmp_msg_1.data.set(tmp_tmp_msg_1_0);
    IMC::DmsDetection tmp_tmp_msg_1_1;
    tmp_tmp_msg_1_1.ch01 = 0.15337632688690084;
    tmp_tmp_msg_1_1.ch02 = 0.42059100426364227;
    tmp_tmp_msg_1_1.ch03 = 0.5917574277351383;
    tmp_tmp_msg_1_1.ch04 = 0.24044400208054473;
    tmp_tmp_msg_1_1.ch05 = 0.7387288567044535;
    tmp_tmp_msg_1_1.ch06 = 0.7978375586076064;
    tmp_tmp_msg_1_1.ch07 = 0.2265283023499982;
    tmp_tmp_msg_1_1.ch08 = 0.0949170758535337;
    tmp_tmp_msg_1_1.ch09 = 0.33434648173934345;
    tmp_tmp_msg_1_1.ch10 = 0.6308713197289979;
    tmp_tmp_msg_1_1.ch11 = 0.6668664575739852;
    tmp_tmp_msg_1_1.ch12 = 0.1734304780427811;
    tmp_tmp_msg_1_1.ch13 = 0.06580226585090021;
    tmp_tmp_msg_1_1.ch14 = 0.6365585296141194;
    tmp_tmp_msg_1_1.ch15 = 0.2846000402756783;
    tmp_tmp_msg_1_1.ch16 = 0.05138718047288093;
    tmp_msg_1.end_actions.push_back(tmp_tmp_msg_1_1);
    msg.maneuvers.push_back(tmp_msg_1);
    IMC::SetEntityParameters tmp_msg_2;
    tmp_msg_2.name.assign("QQIRRYCGPLPREDSMEAYFV");
    IMC::EntityParameter tmp_tmp_msg_2_0;
    tmp_tmp_msg_2_0.name.assign("XXWRUWKMCRCOTNHBBLDLDOPPSTTWECCZVNMETJRINOUYDWOAZJHRKYOYDLGKIXBMMKNQRXLBKGLTLWNIUPFVYKFEIHBMZBYNKJQXXDCZSAZFPYOIPADQBQNWBLCSMPDIRAJSVARDCVESQUQVOKFICXGGJJUFD");
    tmp_tmp_msg_2_0.value.assign("ILHQAGEDCPOVCDXBTDADQIHNZYEHKBQECJYSDXTFBRLITFVXPULVPRTNNFQQGVJUKISROOVILMJOAMKGFBOMCRZPVLDUKJEGNYUGMBNRSNAUXPUCQTYJDRZQMKEMJELRDJLTXFJUHBWUEMTKUVZRFIYQLDZAZA");
    tmp_msg_2.params.push_back(tmp_tmp_msg_2_0);
    msg.start_actions.push_back(tmp_msg_2);
    IMC::AnnounceService tmp_msg_3;
    tmp_msg_3.service.assign("MDPOWCLUEOKJVWBMGIFOPCDSHQNUARAGRODSMDNPTFKKHFPQRAGVBOJLYUZAVRADGEEBWIHCNQFMHL");
    tmp_msg_3.service_type = 190U;
    msg.end_actions.push_back(tmp_msg_3);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.8690741945417967);
    msg.setSource(33160U);
    msg.setSourceEntity(152U);
    msg.setDestination(47534U);
    msg.setDestinationEntity(112U);
    msg.plan_id.assign("WKMONKDWGCMQCHPIJGBRJORAEGCIXSBSYEYSUVPTVQRIZYOZBXWMZYRKUTJARZOAOLKFWURHSFWPJZADOEYHVXYWDGGLXZYULXMGPKVQNXNEQTSJHVRILFBHAKVQOZPFWDLGICUYIBBTHFTPEMSVMUWUGBMWQBKD");
    msg.description.assign("UHMEQHGHDDHYYMCICNMRTBYBBDVUEMWBPPFRIKSGZOEOPVSZVJSBBMWTNNOGWLDHALFKJVCAHKTTKXZLZTQGRNLQXVIXJTLHINEXEJGWWY");
    msg.vnamespace.assign("WVQYPCTIFGCJMBNWJTAHXOSCN");
    msg.start_man_id.assign("ZHVGZNDKNAMLAMIHQYPKEWVOEUHTMCCBQONHCZZDMFCXILGVDJEVYDMSWKUJROLYUQTDVCCNCQUCRUAAFEVTNSGSEBWKAYCXMIPKOHPQGFWSYWSJDINRFJIKKQTKGVHTEMXBTKLVLROFGLWZHVFXKD");
    IMC::LblRange tmp_msg_0;
    tmp_msg_0.id = 175U;
    tmp_msg_0.range = 0.8650706909524426;
    msg.start_actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.21886311605655862);
    msg.setSource(59537U);
    msg.setSourceEntity(121U);
    msg.setDestination(62555U);
    msg.setDestinationEntity(135U);
    msg.plan_id.assign("ISGDZEPQLBIYXOWCDQXZWJZANKFSVQUIXYBVYIZPYGONUAIUCRMDJRVTXUNSHZSCWLFBWFENMMGLNAEKNYSLRAWQEEOQGVUDUBNJFGCTRGXMPKBUBQPUEXPYKQNWESDVGJFLROKMJBTGCTHOPXZHMSRJFJKELHDVQOP");
    msg.description.assign("SGLWJROSAAAFQJHDCJMQGJYYXSJTEYFHYOPCPMHFLQVUXMVRHHNUTDAYWHIUFXFCGUYQFUFMMSJBHPLNGYLEEREPXDNWINIZVJBATQBLXW");
    msg.vnamespace.assign("DFLGHGZLCIHTTGEGADJPUVYCWNPARMOAKLWBCNAHCYTQZMWAULEVASIYHRKIQMBCJAVFYYBCQNONNJFNOQUFSEPLSXIOYLTXHPIGXQOOBHKMEUUMIKHVGPRNDKTMCIXLPWFTDZIZWNVDOMWZJVMXHQRLBYNBGQWJORUZSSTGRUJVCPDXYKTAPLAZYVURRFQPBKFTVWEDWJFHZDLMNCUFVXCEYEBDXFSSPAEIJBJKJEQGRX");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("PHEBETTSOULBBRYZEEMBQHYZDZQAMANNHEBYMZNVOVYJXPKLTYUPYTMQWJDXHUGNCAWLBVQILRCVZYKSEZGFOXCTNKJMWWVOCWUBPXQEEOSNFTPSXUYKWXZKNALTLUCGIFRRANLIYICQGKFJCGOTOLXMIBDDOLBXHGHSMNJPWDO");
    tmp_msg_0.value.assign("UWNZHBHPMOLWIJPEIUKGMGARASMIKYGYOTTWHWKOSQTNQRBONRCZMHPYLXVFCDYFZQSVXVMTZMUHLAICWTSCCTRLFKKYTWNXDXFDLEJVYWVEXTLVANJGERJZISDUMBDI");
    tmp_msg_0.type = 194U;
    tmp_msg_0.access = 79U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("FVWWPQJLRYDRZMNPSCVKKABFSQDIKXGAVHJIVHSMECZQ");
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("BRNMRAWKJZSFZROAKEASZBLVPXMCDFCFQGDUIXKTFOUUUWCYPRWYTJHKXJEWJRKKXTABNEIRUQPMLDMRANEHTSLTDFDUUJJBYPWZKHWRQPQLVFAQBREHZQ");
    tmp_msg_1.dest_man.assign("RAPDBSGPNPDBRHIAMJHCENQZQKEKVKFXMVONEZXZUTZFMKLWOTBYVBUTHQVJCFUBJRPHHXTNWJTPOOZOMHVYOJLJNLCIDWVPZLGIYDZOGXCXICUBXAMPISVYAAIYKDKYANLQJTRZAEMPGTSHWSZUQSVMRWYIJIPYESOZEDCINXGSTQNGRUHSKUJRYYLFEFFVMTPSBMDDLLUEKGXOCFVQBWMRKQCRRXCXQSBOUFDHUGGWLFENJEWD");
    tmp_msg_1.conditions.assign("DYCMDICRZKUJWHLSIYGBTHOAWYXFIPLAIUPBJLQVWILHSGTBPCYHETSDWGYPYILONJCRAFCEFJFVPMOBRMZOVDIEXSQLXEDCWRXKZBVXLFAXUXCUMEQMFEPHIHNRHDWUSKAIORUBGDTFSWCAFGNJZGZNVOQOBTQLQAUTTKKOQSRRFJSVVUIWDEMVMMJGPJKQGHZDBQDNTEYVNJTYP");
    msg.transitions.push_back(tmp_msg_1);
    IMC::HistoricEvent tmp_msg_2;
    tmp_msg_2.text.assign("TOTSTBYNWCDZUHMIWNLZTQQGJWREEZUGMYCDZVRQJFDOPCXHYGIFDLQPKCJWZHXIAVBAOAQOHHBKFFTPQCSRWOAPPDWLUYKMROHOIUTQUTNJEGDSEFJSKDLZVIQPYRKZMOBXZNHNZYNNDKGCUCMNSBUXLWKVXACXGQPXMMJRXLGBCRVFZFASIYVUKRGVIAWPSMHJGXWPBQIGXKJLAAVMIV");
    tmp_msg_2.type = 12U;
    msg.start_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.710501515762424);
    msg.setSource(30994U);
    msg.setSourceEntity(239U);
    msg.setDestination(45199U);
    msg.setDestinationEntity(93U);
    msg.maneuver_id.assign("XKSKABTATDOITXTGOGEPYISZXOCYXRAVLGIOBANWJQVKEMWAIDLTESNZBILVQBWHZTLDWPNJMLQHFQHOXH");
    IMC::AutonomousSection tmp_msg_0;
    tmp_msg_0.lat = 0.02331554763078303;
    tmp_msg_0.lon = 0.19019439504667446;
    tmp_msg_0.speed = 0.5395612836229368;
    tmp_msg_0.speed_units = 226U;
    tmp_msg_0.limits = 167U;
    tmp_msg_0.max_depth = 0.21370149791727444;
    tmp_msg_0.min_alt = 0.9998214715109158;
    tmp_msg_0.time_limit = 0.9878485700870828;
    IMC::PolygonVertex tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.16946054429070867;
    tmp_tmp_msg_0_0.lon = 0.6866499054833727;
    tmp_msg_0.area_limits.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.controller.assign("UUDSQMDYFRJBVZFJRCDOUKGRTMHINTKPYTRWWWSGCGQWNPIBYIGAZUQTEURTWNXVZPUTLNDUOUQKKNYQLZYWVHJPQHLMVQSOJQLKIFEBLIWVHTCKZAKNVEATIZKLRXSOGSICXFWMHODSBHOKCONXGSMKUFICVBAAGGXPZHENZFYAPHMVAHOCVPYDJBYWLZPSSXNTFEBLLJPROALXDEBXTQMGADXEYBJXRIMJUCIM");
    tmp_msg_0.custom.assign("XTVJFFLFSWOAACSREWUTHXDHVPIDTRLGPVXQMZSNPWGDPYFBJNFDOYQIHMMAOSJRMMVZPAIESAFKHNQIHALTVYSLKVWMOKNLTIUNBZECYQTRHXZUBJEUETEUKYDGDJYRYZPKJLRWMQYEGLTNKAMXBQZDFVHVZBGQCCJKWTMCSIWATSJXOWIIRWDCADGSMOQPCCJPAYPBNFUVDRSFNUVNXB");
    msg.data.set(tmp_msg_0);
    IMC::TrexToken tmp_msg_1;
    tmp_msg_1.timeline.assign("OKRYMELPIMGKPCEITYZFQVGJDVPEPENRECFECQSSOKCZXRRWXHHMZYQHTHCUUJUFNDTXWAAVJFDLPY");
    tmp_msg_1.predicate.assign("MJCCOSWBKDEJAMGEMQMJUVUQIKPIZQYKRDVQUQDFRUBDXMRBMHYQBUSDJOFKEMHPCZBJKYSPNORXWYDZSSDDQTVBPDEXQVHJTBWZWWJYGFHGFIJLYWBMZLOUNHENDRRTHHHHZISGYGVKCKSOFEXXI");
    IMC::TrexAttribute tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.name.assign("BEAEYWFZXUFNPEKXLDYUKHQVDUJISVAMYINWBHGTEIBJFPYPRNRTDDGMNAJOQJXJSSKICZJGEKTCSJLSBLSZTUQFCUGNVDLANMIYPXDQYNVTMNUGDYWZGPHLFPHDRXOZMEASPQKARZLXKQFWGJJETFOWIIAHWKG");
    tmp_tmp_msg_1_0.attr_type = 19U;
    tmp_tmp_msg_1_0.min.assign("ZQYCNEQKAVVXPUUCYSPJHXDFIIXOUTMFTLPVWRZSCANJDGETBQQTMLKVYMCOXKFNJALOGZNXJZEULQGKCBGYBFPNNFIWTFSDCAYUVETFHZOPFTYVDRJHEQMQHWUMOHXLHQKRXZGKRZTGMWUIRZBSHYADISWPEHBMQVAYLDBTCDMAKOTIEHIWVOSWVGXGUERMNXEJRIRSZPBKWZ");
    tmp_tmp_msg_1_0.max.assign("SVEEHYMFZDGPEMKNKIYFFFVODTLQPBCTOYCOYNUUKYBUIHAHKVNPDSNPMR");
    tmp_msg_1.attributes.push_back(tmp_tmp_msg_1_0);
    msg.start_actions.push_back(tmp_msg_1);
    IMC::TBRSensor tmp_msg_2;
    tmp_msg_2.serial_no = 4098377246U;
    tmp_msg_2.unix_timestamp = 1594165081U;
    tmp_msg_2.temperature = 0.07298618095486642;
    tmp_msg_2.avg_noise_level = 249U;
    tmp_msg_2.peak_noise_level = 112U;
    tmp_msg_2.recv_listen_freq = 164U;
    tmp_msg_2.recv_mem_addr = 61009U;
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.8811523753392253);
    msg.setSource(25220U);
    msg.setSourceEntity(240U);
    msg.setDestination(16067U);
    msg.setDestinationEntity(84U);
    msg.maneuver_id.assign("PYWCQXOULZFIVOIMXHQKHGTDMTWRDXNQJFUXNKEYKMJLFPPVRSHDURWKZHXONGLYIICVHIKUYRKSMDAWYYQGYRIWCZYARGLTEKWBZOYURDVONDAZCTAWVVSOAABLCFSAXNYCCZVLMVCJMPXUNAEMVTGBOTDSOQIRSOJJMDJPQFQGHGJHBBIRPSZFFJLPIWXKTANEZJBMPOGCXPXBZVWQEJUUERCDESDLTHLQQFNEKSGNHPBHASU");
    IMC::Elevator tmp_msg_0;
    tmp_msg_0.timeout = 464U;
    tmp_msg_0.flags = 253U;
    tmp_msg_0.lat = 0.5904338185940752;
    tmp_msg_0.lon = 0.3090714670594491;
    tmp_msg_0.start_z = 0.8417088047989799;
    tmp_msg_0.start_z_units = 79U;
    tmp_msg_0.end_z = 0.46727249479124544;
    tmp_msg_0.end_z_units = 176U;
    tmp_msg_0.radius = 0.3796500754708275;
    tmp_msg_0.speed = 0.07086592883994414;
    tmp_msg_0.speed_units = 109U;
    tmp_msg_0.custom.assign("BUMJWIJSPPBTBSKEZUURWQVFUGYXTJGXGVCKGVASXPFHGYAVGNELRMOEJKPZXRODSCVZNP");
    msg.data.set(tmp_msg_0);
    IMC::DevCalibrationControl tmp_msg_1;
    tmp_msg_1.op = 51U;
    msg.start_actions.push_back(tmp_msg_1);
    IMC::YoYo tmp_msg_2;
    tmp_msg_2.timeout = 15104U;
    tmp_msg_2.lat = 0.7290169034367971;
    tmp_msg_2.lon = 0.5052341533959566;
    tmp_msg_2.z = 0.9075313299312928;
    tmp_msg_2.z_units = 206U;
    tmp_msg_2.amplitude = 0.4266993025718505;
    tmp_msg_2.pitch = 0.9698981516998789;
    tmp_msg_2.speed = 0.6650122373844186;
    tmp_msg_2.speed_units = 111U;
    tmp_msg_2.custom.assign("QVNDMBLSUIJMPNSCHZNSYDDFIXLBUAWZTUKEWWRXRLZWIYXPQITECMVVUSWZKNNJCYNITBY");
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.8188025809787727);
    msg.setSource(13457U);
    msg.setSourceEntity(112U);
    msg.setDestination(44480U);
    msg.setDestinationEntity(180U);
    msg.maneuver_id.assign("ALRDBAJGKXOSTMFUIKBMYGQEXEQUYHWTYNBEPIPQOQPLRNCHNSKZRWLQVZDHZCCCFZHNELEGFZQWKACNFNOYYLJMDRAVIAFDFGJJWVYWQXXKCG");
    IMC::FollowPoint tmp_msg_0;
    tmp_msg_0.target.assign("WUQZXIISROHIDHIMXWRUNJHBESRZCWGFTXQJDWCGG");
    tmp_msg_0.max_speed = 0.057057299453184274;
    tmp_msg_0.speed_units = 158U;
    tmp_msg_0.lat = 0.17136621337388436;
    tmp_msg_0.lon = 0.8326130121800829;
    tmp_msg_0.z = 0.6042608025021309;
    tmp_msg_0.z_units = 43U;
    tmp_msg_0.custom.assign("TNVGNYGCTDEABLYRUWEPJWZPORBPTXVLSLXGGAGIXWFSGVOOVZYOYOKKAWCIHIUQCTDPBWBWQFHCZCHSZFHVHLJEKF");
    msg.data.set(tmp_msg_0);
    IMC::DataSanity tmp_msg_1;
    tmp_msg_1.sane = 136U;
    msg.start_actions.push_back(tmp_msg_1);
    IMC::WindSpeed tmp_msg_2;
    tmp_msg_2.direction = 0.18130939093166276;
    tmp_msg_2.speed = 0.7808241853918005;
    tmp_msg_2.turbulence = 0.16505997323087085;
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.46216257837607067);
    msg.setSource(11232U);
    msg.setSourceEntity(56U);
    msg.setDestination(49929U);
    msg.setDestinationEntity(183U);
    msg.source_man.assign("OIFPYAYGFMR");
    msg.dest_man.assign("BYGWPFOEEJPEVI");
    msg.conditions.assign("UPSKJXRFAWGWBFIRGQPMYQBROSATVJLVIHGXBBTFUPWGUMHEAHBKDTLBDSNKDAZDBRRTXFUUIVVYWWFPNOZAYSIEFORWSTZEEANKCXKCXJCDUOQHSWZFTIKLEZEGJXQXHPQJNU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.5480165195721521);
    msg.setSource(23607U);
    msg.setSourceEntity(103U);
    msg.setDestination(56681U);
    msg.setDestinationEntity(94U);
    msg.source_man.assign("STCBLDGANGVJRWCXQQCPEAAASMOIPFAJBFYAZGPSLFEXDGEREHJXOXRTYKKUNBTWPGQZMGMMBCXHUDZKUPFYDRIWLNVYZSAWRRGIVFKB");
    msg.dest_man.assign("LZHEPJKQSQTTNSLHHZIXBGXGGEPGZWFUCRLFOPGMKRXREUOKMFCNQLAMUYZEWNAUVBFDKTVCD");
    msg.conditions.assign("SJUMYJAPWBJAFQFDNCXSWOABLJVHGQXXJOCFKZNKTUYNPFLUAEFPZLHEFWBDCYKJKFVJGCORTXZXVTWOSHGMYCUPWHAMWIQRUWEWASNMLAGVJQFKPOTIZXICLUYLEZMVDXYADHZIDBYTWRRERTVGAQKCNHVJIEGINBKPTBSYIPLPLROGEQKGZBNDFMKHYQEADITRSRZOBMDGTSKVUGXSBBIYSXVSQRP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.5293996236574433);
    msg.setSource(424U);
    msg.setSourceEntity(132U);
    msg.setDestination(61333U);
    msg.setDestinationEntity(189U);
    msg.source_man.assign("TFXBMYRWXJXGZZCBNOCCQXXLETYCTCFOEEDAKZZLVIIKYWXGKYBPKSPVZIIBAKHGEYOOYCVXPRLLWWIMSUIWWASUTNUUMKQVGRTHMBCDAKAPHIDVEQLEHUJSBHJNMTRARVGOEAEHVLXDYH");
    msg.dest_man.assign("RZJLTVDXTOCYLGFIRFAIHYBTPYSJTDGKJMLMKPWPYOPEQSQCJVHDRLOBLICQZSFMFRMQGIDOESPQRNSBDHTUNHZXVTNECJCDVFQJLAJYIERQYNIAUWGCQBQCHLBWMVOOXSKEFKAUVWBXFAGWGGXCGEO");
    msg.conditions.assign("VJHICNVDZNZOHSVQDFPOAXXWGXGGATUAFNAXFVXZEDSCGPTEFXEEPEPIKMWUSQUQBLLEXSVJVJVSJYKSYZTFBGMCHRUTOLQVNIJRHGGPKADIYOBYANKKUAHKAWCTWFRVUORTPBRSOEUMWZKGWBYTCOEXKPBXJBSJLLDUAYTDRYFJJNSFSQRVKMCJLXHMNYWBCIYENNPMCIOZFHLTEWWLP");
    IMC::FormationEvaluation tmp_msg_0;
    tmp_msg_0.type = 204U;
    tmp_msg_0.op = 175U;
    tmp_msg_0.err_mean = 0.5614972479419105;
    tmp_msg_0.dist_min_abs = 0.624571180736258;
    tmp_msg_0.dist_min_mean = 0.9549217216668272;
    tmp_msg_0.roll_rate_mean = 0.5323226833652858;
    tmp_msg_0.time = 0.10193333887098466;
    IMC::FormationControlParams tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.action = 46U;
    tmp_tmp_msg_0_0.lon_gain = 0.6134446830653005;
    tmp_tmp_msg_0_0.lat_gain = 0.4612291422400835;
    tmp_tmp_msg_0_0.bond_thick = 0.10349786246787063;
    tmp_tmp_msg_0_0.lead_gain = 0.8123190394784954;
    tmp_tmp_msg_0_0.deconfl_gain = 0.8234501997910056;
    tmp_tmp_msg_0_0.accel_switch_gain = 0.4478933086455287;
    tmp_tmp_msg_0_0.safe_dist = 0.6475357586260042;
    tmp_tmp_msg_0_0.deconflict_offset = 0.9605974720988855;
    tmp_tmp_msg_0_0.accel_safe_margin = 0.02907941106348988;
    tmp_tmp_msg_0_0.accel_lim_x = 0.34811953747464086;
    tmp_msg_0.controlparams.set(tmp_tmp_msg_0_0);
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.16656672894600144);
    msg.setSource(37644U);
    msg.setSourceEntity(174U);
    msg.setDestination(53919U);
    msg.setDestinationEntity(154U);
    msg.command = 222U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("MECJMFHUBBWIGIMAJVWTWQGEFTLJRFCHNTRCFABVSXIRZCPDYWWDTYYSKXHJVIGOZSSOFBGXNODVGHVBQMAATOAPNDEERRHJFYPMLREBUHEIJYVUKLCZTDFHAVQESHGRSYCEANDMWKZWPKQYNCOXPVOABJKLNLWKLSHQFJPPITMLXBBPWZXVQANZXRDXZUQZFIUXSEODUYRMZOLGNKPSIUOEGFTTGU");
    tmp_msg_0.description.assign("JOMIGXMNRWBSBRMYOYJYIDIOEXEUPFMNBBTOHIFZYTKFHOTTJJEDCKCOTNYHOFBSJWLVXQBAMIXGSCFRVXZLZZL");
    tmp_msg_0.vnamespace.assign("NHKGOREYGLESIXXCGVVNSFLNKMLXXISTFSMRDVQIEUVQPJCUEAAUMWXSNQDSGOOXEAGRYCONVFWMKJINHGGBPTZKQBBMBFFKDVZJYEW");
    tmp_msg_0.start_man_id.assign("CYGDHFIIJFFVWMWUECDZAGOMQKVWBSZYAEJO");
    IMC::PlanTransition tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.source_man.assign("SZEQODQXNMZFGISJDBSTHGRBZMTLMISQVROOGNLGAHCVTEXNIDZSUWPIKHJOLLRTPCFIVUXHBSBQCZYCZYTQUHYFPNYEKTXNSBDDLKOIYRAPRZRTBGDKMLMEENXYJWGMVXTMLQIANGDQKWFBPJHVNCJWPVUXEZUAEZYVFBPBJRAWG");
    tmp_tmp_msg_0_0.dest_man.assign("IELEFWUAPSFVUQYFANJTVKYPXBQRDZLAWLIF");
    tmp_tmp_msg_0_0.conditions.assign("NJBUVGJREGJNORRZAOCHACYSVRANTDEMIDXQKZUWNWTXYYQXOUPFMTKQLMYCXSUQRXXPLDJGJKZAFPCTSBMICVUBLAUMCPQQGKSNHEWXLVOATCGZJTEHWCKFBQDKSDM");
    IMC::TCPStatus tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.req_id = 32035U;
    tmp_tmp_tmp_msg_0_0_0.status = 188U;
    tmp_tmp_tmp_msg_0_0_0.info.assign("GDWBCDMNJJREDNXXOFHLQMKPYLVJVSCKPQTOSPNXPVLOMDEFQMYNFPDGUSRAPPUNWGIEEZAUKVAYHKAZYFNBC");
    tmp_tmp_msg_0_0.actions.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_0);
    IMC::ImageTracking tmp_tmp_msg_0_1;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.11209517748512665);
    msg.setSource(57569U);
    msg.setSourceEntity(230U);
    msg.setDestination(36123U);
    msg.setDestinationEntity(128U);
    msg.command = 239U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("ZNWYGQZOSQBMIOCUGCGKANSSBXKTJDRWKJMFOOMWTMJQPFCULO");
    tmp_msg_0.description.assign("RVYWPLCXMTYZKFLGFUMGRAKZUQQTWHWHCFOXMNTVJWCGCOUVEYSBSGVOMVALEWMEQCRXUDGNMCBIHQIAVNVDAUAZNCELDFQKOFR");
    tmp_msg_0.vnamespace.assign("RDIPVEMZQBDTTSMULGTPOFVNCDLTFOEXFJPBVITFJZCMQCAWAVMEKAIARNDVICTYWXSZCHBZHEIRUGPGHKZZWJSABXEQVOHQHPIYCYWBHMLPSKRTOYKBJYEWLWRXKYUMDNOSDFUOGDQPREQGLHNRJKFKRBTIUTRSWBZSQVMXAXCOYVNDNAQINQXYJZWELGJUXFOBLGVCAFLIJNCWZUOYHEIJAOMKWLFRHUGPHSTUK");
    tmp_msg_0.start_man_id.assign("IYVFKDTTMSUKHZLPIDKBQMXMAQGTUPXBGEJCGHQPYFKBULJEFPTRVJTIIUIXYOECZEDADKFPMBVGFXLSLYHGHMPXYYZEUDGTBBSOLEJQDRNLZHRFAOMNXLVPWKOATOAVNSRKJIHRLZCWNGZESRJTORYAATFGFVHSBHQSABVCVRPYNCWMDNIUNMMSRUVV");
    IMC::PlanTransition tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.source_man.assign("TPZMHRGZKGSZECIMYSDNNCUBNNFPYAPKEUFENFSQXZTMEOESJVYPTJBSGKHSVKTWMKCUNNTRKVIYAKWWKRUZOOGUCKBPWXZBUBFQEFLYZQLG");
    tmp_tmp_msg_0_0.dest_man.assign("CTPOFAYSVWWJEVVQBWHJRVPVLLKOSUQPHHULEFLHQITDDCYMOVDRGTBBKNRRSJWAMWXKQQUCPYEYHVRNKEZMTPDMZKXDQXCBUHUCCALJCNAAEFOPYLYXUFYNHCVJQHOLFKCYLOUNMFX");
    tmp_tmp_msg_0_0.conditions.assign("PSHZTZDFRRUYWIOOWCLFCRIQNWVMKZFVYJXYEJQGDHONQIFVBEGQDXFAUNPULXTAUCSLTAURETGPBWBTYMHHVZOYGRQKMYXRPIIKXWCSUZNSFY");
    IMC::AcousticMessage tmp_tmp_tmp_msg_0_0_0;
    IMC::ImageTxSettings tmp_tmp_tmp_tmp_msg_0_0_0_0;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.fps = 142U;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.quality = 84U;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.reps = 118U;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.tsize = 61U;
    tmp_tmp_tmp_msg_0_0_0.message.set(tmp_tmp_tmp_tmp_msg_0_0_0_0);
    tmp_tmp_msg_0_0.actions.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_0);
    IMC::OperationalLimits tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.mask = 22U;
    tmp_tmp_msg_0_1.max_depth = 0.044917075501300086;
    tmp_tmp_msg_0_1.min_altitude = 0.48534384425038646;
    tmp_tmp_msg_0_1.max_altitude = 0.2164715073219451;
    tmp_tmp_msg_0_1.min_speed = 0.7123785792374812;
    tmp_tmp_msg_0_1.max_speed = 0.7625744776486626;
    tmp_tmp_msg_0_1.max_vrate = 0.2988976288848033;
    tmp_tmp_msg_0_1.lat = 0.27647741594549824;
    tmp_tmp_msg_0_1.lon = 0.49051351804789745;
    tmp_tmp_msg_0_1.orientation = 0.9047803943049019;
    tmp_tmp_msg_0_1.width = 0.4021035884102335;
    tmp_tmp_msg_0_1.length = 0.5139651303632939;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.07496168070659681);
    msg.setSource(64630U);
    msg.setSourceEntity(55U);
    msg.setDestination(40643U);
    msg.setDestinationEntity(69U);
    msg.command = 185U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("PPCNRIPGLNVVSLPRSAUKMCYZULAPYUTFTLUAWWGCJHYPUBLCVEMTRGJOYBAZGCFZRJFGZTKJFFQFBGSVJHHDBLHETRDDWDYOTVBQSCOBJYILHRXOFBKSEKWZCNNJXVWKGEOUBWLXYFZNIYMQWSMQTEAPJMCOSDHUFMCRXODMUJYLNNBQCIKPYUMRDQXZDEKGFWVIOSDGSADNRAXWXVIEJMIETNHN");
    tmp_msg_0.description.assign("CSTZBQAFPHATOFVOAHQJJJZACTEWKGVYQEQPUDLOMYPMRRONHUCIZAIFYVOOMNJSAKFQYPXKBZKBUFYXWMCLNBPVRBPQDDPCZJEOLUNRVLTFPLSRUIDXRIXBKGBMKIVNUUATQXGHQNSL");
    tmp_msg_0.vnamespace.assign("ZHLCPSXSTVJ");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("PERLJMEWDMCMXPOOABWXXOSKCWQJZIFQXSZTUFNJGSJGTMSRGNCDIBXTOMWPQYXYYYSZIFDYYOBKIPCZDBGRVDNDTQ");
    tmp_tmp_msg_0_0.value.assign("KSDYVNXHDJXXSZBJMGFHSEQCQKPNXEWOUSVJIQAHVSUIGNVTWIZWTADFZFWYFLAQOITRRDYKLORELALJKMYACLFJRXBFZEZYHBCHZRJSWWNTTJZE");
    tmp_tmp_msg_0_0.type = 0U;
    tmp_tmp_msg_0_0.access = 93U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("BWCQKYGVRTMWAKIZBFLHUVIHBEUBWCTTNCYTBECEGHOWIRWHMIAAGJSADVOBTOVVKCZUNSJZQAWEUJEGPQPKAREGGPBPPTTOQXASSHWIBCNURMRXDJKNVGTKISFPWUEOJSLFYTRAKZPIZMIUPYJJZNWUIJKZSRHALXYNUHGFEMFQXFXLIQDZNXPSXHTMQVLMDOSDYJMPODDDOREZYYHCUKRXVBFQFLVVQCOJDABEGLRXMNQFLD");
    IMC::PlanTransition tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.source_man.assign("OCTIVYRHDYKQZXWJVI");
    tmp_tmp_msg_0_1.dest_man.assign("SIMOTUVCIUGUDHRADTVSWZASNZJATXBIBBRONPYSAXZOLVLTAYGMGRHWRAXNZDFPSNHJNOMSIYTGJKLYNYBMXIRGYQKELAFIFTQIEEAKCCTHBRFVYDFQCJUDBCQWPYQSMKJDEDUTXGQPMQBWFSKOEBNLKSUIFVHNCUJDMUOKZKZEVGVAEHP");
    tmp_tmp_msg_0_1.conditions.assign("MDWKFCNSHBMSRNAWLQTVWWJRSYTTHHZXGQFDYVLUYKQLNELDUANACOCFUOBGYSGEPGBTCNBAZBRQANMMX");
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_1);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.2047373930295504);
    msg.setSource(62928U);
    msg.setSourceEntity(215U);
    msg.setDestination(21000U);
    msg.setDestinationEntity(85U);
    msg.state = 243U;
    msg.plan_id.assign("AGBHSVRSZAJUBBQYGMUDMQNQQNFPTEXMVITHYFHABHHHWTFLOXSNPCBJXJQYGCWLWENSUMAKCSRVNOUTHLDJDCODHLMEFYQTDOJXRLRITXXFWBOHDLXBEIECTXYYNZLOSEFCDXJGJTRGZZIKGQYZFFAZOPWOUJBRPKFCGNRAWZLJRAQQVAVNHMYJPMEAVGWQCDWSMCSUUTDPYVBVXLOVSZNKPGKKSFZRIMWUGALONRPPZEE");
    msg.comm_level = 62U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.7785563482454346);
    msg.setSource(58767U);
    msg.setSourceEntity(246U);
    msg.setDestination(41760U);
    msg.setDestinationEntity(22U);
    msg.state = 219U;
    msg.plan_id.assign("BGRXSWMUIOTNEJPLXXDRWQBMLXGKZUXOJYUNKWKAX");
    msg.comm_level = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.2251132318350605);
    msg.setSource(19003U);
    msg.setSourceEntity(106U);
    msg.setDestination(50073U);
    msg.setDestinationEntity(156U);
    msg.state = 189U;
    msg.plan_id.assign("YYFIQDZQSAETACSJBYZJDHYRJHBIUENTWXCHGEAMDVAXQWZMVPUDNALKTDXHCCBHGVVSIRGWFOOCATVIRNCLFWFUOCYWQVTYNBZAGZQJYFLPBQUPJQDFCIIHIXVLZRMWM");
    msg.comm_level = 225U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.7223617794207158);
    msg.setSource(5958U);
    msg.setSourceEntity(5U);
    msg.setDestination(59754U);
    msg.setDestinationEntity(107U);
    msg.type = 49U;
    msg.op = 51U;
    msg.request_id = 24916U;
    msg.plan_id.assign("OWZJAHXSNTSQLYPCKWUEFORCSNEYEOQPGBQOXNTNUDBIQKLASZVEUDYMVXIQCPXFBSCGHJBRHTLSEWYIWPCDBLGRPDYIPYCHCHUHVZNZBTUDKQ");
    IMC::Tachograph tmp_msg_0;
    tmp_msg_0.timestamp_last_service = 0.9129333199056238;
    tmp_msg_0.time_next_service = 0.3361652751007628;
    tmp_msg_0.time_motor_next_service = 0.28020346617297553;
    tmp_msg_0.time_idle_ground = 0.08705505577066852;
    tmp_msg_0.time_idle_air = 0.49729354923363145;
    tmp_msg_0.time_idle_water = 0.7408391634674152;
    tmp_msg_0.time_idle_underwater = 0.9512125101757922;
    tmp_msg_0.time_idle_unknown = 0.1686137100389541;
    tmp_msg_0.time_motor_ground = 0.4963477710906766;
    tmp_msg_0.time_motor_air = 0.8615864858295135;
    tmp_msg_0.time_motor_water = 0.8379282668149526;
    tmp_msg_0.time_motor_underwater = 0.9532037973006079;
    tmp_msg_0.time_motor_unknown = 0.9939171698041896;
    tmp_msg_0.rpm_min = -267;
    tmp_msg_0.rpm_max = -17662;
    tmp_msg_0.depth_max = 0.676028862106136;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("XZLYVNKAYDFTEXIKGMAOIBPHMLMNQREBAVGCJLZLEDICFAJRNZPYVCNJFXWJVSYNBRHBVHKVWTEPHJFPEXGDNUHPYAGWFFWXPDLZHNVJIUQPUTOUZDC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.13311349864543986);
    msg.setSource(18991U);
    msg.setSourceEntity(26U);
    msg.setDestination(46793U);
    msg.setDestinationEntity(119U);
    msg.type = 66U;
    msg.op = 8U;
    msg.request_id = 52532U;
    msg.plan_id.assign("FOEOABVFQYTALEELBVUZVDWVDTTIZRUWPCTQWYFQWRHCBJCESAYTBYZTICOJHUGKAIQFLMULADLVSMHETADKKXEUCBXBXIKORBRLJBUSUYMPMPPFBEWHZRDNGZNZQWSCQZLJNIEPXIRADXFYGOWOXJEAUKOHHQNJMNFTJAGJJHZMOGJSICXHNRAPCQSYDMTIVXWMLZKQGMPKVBPKUVKFIQWFCMPILLNSDHEZFDSTNNUNVYGVWHGYOO");
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.9834145792805752;
    tmp_msg_0.x = 0.6171670474835141;
    tmp_msg_0.y = 0.8892302287346459;
    tmp_msg_0.z = 0.8490288590652294;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("OYMBSSYGWBTZXZRKWXIQNQNDVRVCJGCXYHZWWAMYOBLCHDJLLQXDFCXPCLHCS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.2482135797591205);
    msg.setSource(40110U);
    msg.setSourceEntity(67U);
    msg.setDestination(17739U);
    msg.setDestinationEntity(29U);
    msg.type = 46U;
    msg.op = 231U;
    msg.request_id = 18437U;
    msg.plan_id.assign("HZNPGGGTPCDIJHNXCKXQGQJZYBMOMJQKGUIHXLFEOYBFYKBJCNXSERFTLWKJDHWRVIHCBFXVVZRYRNMGIHUICEOSGQAOYTQVRKPWQSAQFUCAVXRW");
    IMC::GpsNavData tmp_msg_0;
    tmp_msg_0.itow = 3623230273U;
    tmp_msg_0.lat = 0.48487664502684;
    tmp_msg_0.lon = 0.7952818981753984;
    tmp_msg_0.height_ell = 0.9313526559432842;
    tmp_msg_0.height_sea = 0.029623925778487714;
    tmp_msg_0.hacc = 0.022587360566916348;
    tmp_msg_0.vacc = 0.01455804450151399;
    tmp_msg_0.vel_n = 0.5995505521287169;
    tmp_msg_0.vel_e = 0.2405538754420531;
    tmp_msg_0.vel_d = 0.9320884891372309;
    tmp_msg_0.speed = 0.5881202236570496;
    tmp_msg_0.gspeed = 0.22569613977923297;
    tmp_msg_0.heading = 0.9805201352485251;
    tmp_msg_0.sacc = 0.08692159497759022;
    tmp_msg_0.cacc = 0.6346456831953773;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("BEFAXOQBAGQNVPVMMZOGXBEBGOVJWVITKKACKNYWHNYMRCMVPHTKKVDUPXEIYDPMGIBTIRTSWXDYLTUCBZJVHSHUWN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.7781517241785866);
    msg.setSource(37230U);
    msg.setSourceEntity(232U);
    msg.setDestination(15208U);
    msg.setDestinationEntity(82U);
    msg.plan_count = 44311U;
    msg.plan_size = 1878322337U;
    msg.change_time = 0.46418375683086066;
    msg.change_sid = 44477U;
    msg.change_sname.assign("FZKBMLQGSCAXCFYHXSFAIBTPHCQMOBYCCJDAACDFOMIUPZTBYUGNXOEIIEZJSOOVZOALBUB");
    const signed char tmp_msg_0[] = {75, -19, -51, -84, 45, 13, 68, -12, 121, 53, -90, 81, 47, -22, 48, 96, 56, 117, 118, 55, 106, -9, 63, -44, 95, -128, -112, 51, 35, -128, -78, -47, 118, -36, -33, 51, 57, 115, -39, 125, 66, 5, -81, -84, -3, -65, -56, 40, 124, -7, 2, -97, 4, 115, 6, 26, 84, -35, -109, 56, -17, -113, -72, 104, 38, 98, 43, 22, -21, 51, 116, 95, -108, 85, -89, -84, -20, 16, -71, 121, 28, -70, 114, -25, 68, 94, 112, 97, 42, 68, 26, 106, -72, -21, 25, -54, 89, -68, -117, 97, 71, 57, -51, 52, 65, 110, 56, -91, 56, 54, 56, 50, -126, -23, 54, -23, 52, -8, 52, 78, -29, -18, -43, -31, -5, -107, -20, 73, 28, 38, 100, -111, 84, -117};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("RROCGWITHGKUUQGRDLHVEPOTSDHCELPPXMCPAVWLBUMQZBFUMYZYAVXOWHKFPOUBBIHRPLZXJTBFKNJOLIKLSWAHQKDASBVQCSRTLYZVIMQJQOUOPCSGVPTWNJKHBUKPXGUJYZGJQTXCNYAFNFDZIEFTONAQBDAEKEKBYCUWAGZOIJE");
    tmp_msg_1.plan_size = 20842U;
    tmp_msg_1.change_time = 0.05962314867860963;
    tmp_msg_1.change_sid = 12064U;
    tmp_msg_1.change_sname.assign("EJWHQJVICSURWFJRRUBUTJJKOVPMFEWEBOPSWUNEMIVKFQPZSMBGXTERNHMERTTGDWWRPAAXXYZACTKVXVKQYOTEDFAHDDQNPBLFGIHASXRSRIRKWCBCCNOQDBBOANFTLAQWMIKYZIMSNHHFXKJZAXJNYGDDHOFSUBYDQJKLGQMGCMDBPN");
    const signed char tmp_tmp_msg_1_0[] = {76, -92, 101, -54, 105, 120, 113, -42, 109, -73, -105, -54, 14, -95, -33, -127, 31, -47, -64, -92, 34, 97, -10, 117, 6, 48, -102, 45, 93, 16, 107, 59, 28, 62, -112, -56, 73, -79, 82, -27, 24, 77, 65, 42, 104, 66, 91, 26, 107, 35, 38, 0, 40, -69, 70, -92, -47, 57, -91, -100, -117, 64, 103, 34, 15, -50, 124, 70, -128, 31, -39, 95, -41, -73, 96, 94, 9, -38, 126, 98, -96, -36, 78, 89, -14, -39, -74, -104, -125, -59, -87, 76, -42, -54, -20, -79, 62, 73, -50, -115, 64, -82, 18, 106, -121, 22, -75, 57, 103, -56, 43, 66, -122, -21, -112, -80, -90, 100, 8, -27, 52, 52, 52, 102, -90, 60, 112, 87, -16, 6, -68, -63, -71, -123, 2, -65, 118, -78, -84, -48, -72, -84};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.9118724554880911);
    msg.setSource(61539U);
    msg.setSourceEntity(53U);
    msg.setDestination(35216U);
    msg.setDestinationEntity(251U);
    msg.plan_count = 44867U;
    msg.plan_size = 3149555550U;
    msg.change_time = 0.04783539593837738;
    msg.change_sid = 26693U;
    msg.change_sname.assign("SIZKQVSOSCDWUBIRTCCTOXNDUGBVCIZIEN");
    const signed char tmp_msg_0[] = {-31, -94, -53, -48, -85, -64, -69, 18, 124, -2, 25, -27, 124, 120, 27, 110, 121, -101, 6, 83, 55, 23, 60, 28, -16, 44, -33, -45, 80, 47, 85, 100, 36, 102, 7, 105, -12, 108, 7, -67, 31, 23, 57, 25, 62, 77, 42, -128, 121, 117, 105, 81, 66, 125, -75, -108, 66, -72, 98, -9, -67, -73, 64, -44, -90, 60, 126, -68, 28, -58, 13, 111, -44, 119, 3, 38, -35, -39, -38, -127, 25, 31, 27, 66, 58, -9, -10, -125, 61, 16, 82, 43, -45, -82, -18, 93, -83, -16, -92, -65, -7, 122, 77, 124, 85, 38, -110, -53, -16, 14, 33, -50, -97, 27, 26, -52, -89, -46, -16, 26, -105, -18, -124, 61, 124, 56, -125, 11, -48, 17, -33, -124, 23, 95, 59, 37, -35, 3, -118, 121, -68, 51, 23, 20, 91, 64, 9, 102, 24, 100, 108, -27, 10, -61, -91, 63, 65, 34, 82, 110, 34, 61, -57, 61, 71, 50, 118, -22, 56, 44, 25, -98, 40, -63, -49, 4, 47, 54, 46, -99, -89, -22, -36, -94, 81, -15, -53, 3, -125, 83, 108, -33, 48, 31, 118, 124, -2, 19, -126, -68, -50, -6, 107, -85, -46, 82, 112, 64, 93, -87, 60, -97, 18, 121, 82, -35, 33, 39, 71, -58, 7, 83, 43, 80, -34, 107, -113, 1, 79, 120};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("UCPLHOILOAKVGMFZHSCONSBFDNLNSVDIJXRCXPIFVWWKGAOZDCWZPXJSZBWGFSHTWXBRZZSNBCKPQEEDAK");
    tmp_msg_1.plan_size = 43304U;
    tmp_msg_1.change_time = 0.38907959490994304;
    tmp_msg_1.change_sid = 61181U;
    tmp_msg_1.change_sname.assign("DCDXYFXHHGUYXKZMGQSYRNJAEZJVJXTRHUMNAAMDKUOPAJTXRPJGGHMRXPYJIBECCCOQBEBWBUJQDXOLQQTYPVMBA");
    const signed char tmp_tmp_msg_1_0[] = {10, -29, 15, -113, -93, 110, -13, -74, 87, 101, -18, 15, -43, -127, 49, -86, -84, 52, 78, -9, -55, 123, 54, 105, -22, -35, -14, 106, 123, 45, 49, 70, 112, 117, 78, 1, -103, 110, -31, -1, 45, 11, 30, 21, 98, -59, -84, -16, -14, -75, -69, -97, 6, 30, -113, 2, -84, 121, 108, 84, 9, 58, 83, 52, -43, -63, -81, -50, -54, -34, -38, 39, 89, -61, -103, 91, 29, -89, 20, -39, -11, 121, 65, 77, 111, 57, -88, 89, -107, -101, -85, 10, -76, -111, -36, -70, -118, -13, 20, -48, 112, 8, 44, 34, -122, 26, 107, -94, -54, 29, 102, 102, 86, 9, -58, 117, -102, -20, 11, -4, -9, -49, -89, 22, 102, -21, 54, 56};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.5624205418602757);
    msg.setSource(7605U);
    msg.setSourceEntity(76U);
    msg.setDestination(5940U);
    msg.setDestinationEntity(29U);
    msg.plan_count = 29485U;
    msg.plan_size = 1225985811U;
    msg.change_time = 0.23882505545688004;
    msg.change_sid = 48523U;
    msg.change_sname.assign("PTRXGNUTUJQPEFZYHLIKZOIBMXRUXPXPSUUIDLSSODRGWEWAPHFZDNMMGMNC");
    const signed char tmp_msg_0[] = {-46, 73, 123, 85, -41, -56, 23, -106, -26, -111, -38, -52, -107, -59, -128, -13, 40, 5, -75, -48, -52, -123, -75, -114, -69, 47, -45, -69, 31, -3, -44, 70, 10, -117, 86, -119, 89, -10, 19, 35, -19, 87, 92, -102, 73, -13, 47, -83, -5, -26, -63, -20, 56, 126, 86, 94, -31, -57, 71, -125, 58, -89, 58, -15, 35, 102, -56, -12, -89, -128, 117, 52, -20, 108, -44, -14, 71, -93, -1, 38, 88, 62, -48, 69, -1, 14, -16, -4, 37, 68, 41, -52, -13, 55, -76, -57, 28, -21, 57, 105, 46, 25, -118, 65, -87, -38, -11, -71, -33, -87, -59, 21, -77, -15, -6, -35, -95, 116, 62, 7, -15, -19, -33, 27, 81, 122, 31, -70, 21, 57, 4, 23, 15, 42, 125, -91, 91, -113, -36, -77, 48, 21, 85, 96, 6, 98, -23, 8, 80, 119, 23, -24, -122, 82, 47, 52, 28, 62, -36, -111, 2, -18, 33, -98, 11, 55, -40, 117, 24, 101, 36, 119, 75, 82, 12, -1, 93, -57, 64, 110, 67, 112, -58, 116, -121, -124, -101, 117, 81, 79, -106, 122, -115, -90, 1, 44, 7, -3, -127, 113, -13, 52, -49, -4, -58, -12, -94, 79, 44, -111, 27};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.8734064380720328);
    msg.setSource(55380U);
    msg.setSourceEntity(221U);
    msg.setDestination(24946U);
    msg.setDestinationEntity(98U);
    msg.plan_id.assign("EGRDROSAVWHHZCHGSTWOWOQFJTRKRXZ");
    msg.plan_size = 13336U;
    msg.change_time = 0.12280388132406683;
    msg.change_sid = 37445U;
    msg.change_sname.assign("DWIQZWZCPXKXGAFNGKIGQVGBCRGAXSRKELFYFSYUJQIXXBSIEULBVTFJZPMQIDXLBTETHEMOBGIMHLRWPSEFHMPVRSQTXXOOCQNMKDARKCGCNRSINUTUUTYZSFDLDZPTHMWKKVLHVDTAEPGNUTFWPAFWEOLRUFESJVLFYMAOGKHUJBVBCZCYMXUNCTXQEDZDVAWBMNHJNVJSDKOPWJYOZNALNKOHQEZUIVBYWIWMPZDYQCBORCORYJ");
    const signed char tmp_msg_0[] = {105, 36, -16, 59, -125, 112, -21, -95, 94, 20, 114, -36, 10, 95, 108, -71, 53, -57, -10, -109, -90, 37, -18, 1, -39, -80, -107, 44, -55, -62, -86, 78, 104, -7, -63, -70, 4, 1, -55, 119, -66, -89, -74, 23, 40, -97, 44, 76, -69, 3, 126, -3, 8, -118, -122, -56, 22, 25, 63, -8, 37, -88, -112, -11, 72, -118, 87, 124, 45, -73, 119, 32, -34, 72, 96, -16, 58, -13, -81, -103, -73, 28, 80, -6, -62, 94, -125, 98, 36, -55, -80, 92, 22, -11, -74, 103, -12, 41, -18, 125, -96, -86, -43, -5, -108, 64, -89, 102, 98, 75, -111, -119, -40, -115, -88, 113, -44, -120, -82, -89, 105, -64, 90, -33, 115, -48, 115, 4, -41, 12, 86, -56, 71, -60, -47, 84, -53, 30, -123, -93, 59, -101, 73, 94, -30, -23, -75, 98, -120, -93, -47, -15, 28, 77, -122, 93, -12, -27, -123, -80, -123, -25, -11, -62, -66, -71, -14, 17, 0, 121, -124, 43, -125, 25, -33, 40, -16, 71, 39, 88, 114, 107, -10, 37, -50, -70, 66, -40, 101, 70, -107, 119, 106, 7, -94, -9, -35, 116, -119, -53, -18, 52, -109, 7, 68, -117, -11, -80, 96, -85, -118, 114, -34, -124, 62, 44, 28, -114, 1, -71, 30, -39, 54, -92, -53, 44, -54, -66, -54, 99, -27, -68, -22, -28, 54, 105, 68, 51, -80, -29, 96, -110, 93, 99, 41, 25, 104, -119};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.7719917495181742);
    msg.setSource(2831U);
    msg.setSourceEntity(137U);
    msg.setDestination(54564U);
    msg.setDestinationEntity(237U);
    msg.plan_id.assign("ZWTQVMKALBPEKHZECELSYJGXRHBRNAZREK");
    msg.plan_size = 56665U;
    msg.change_time = 0.32102723503295827;
    msg.change_sid = 1281U;
    msg.change_sname.assign("GBLVHTXIZEUMRJXSNRZHDFUPXDHNWFMCBTKYUDWMCYNNKXAEKFUEIVVABMAORZ");
    const signed char tmp_msg_0[] = {-111, -91, -29, 66, -49, 11, 74, -50, -65, 35, 122, 53, -121, -122, 82, 10, 88, 73, -120, 17, -90, -56, -1, 104, 75, 124, -67, 49};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.7134893461456749);
    msg.setSource(20069U);
    msg.setSourceEntity(138U);
    msg.setDestination(40747U);
    msg.setDestinationEntity(175U);
    msg.plan_id.assign("IHQVSODDPEUUQVNFNPSCAVCQSKYRRERDDWTUGJIWUBYBPVAHMMKPLNWIHNJPAKWXDOTRXSQWGUQZYORNHUWTZVCVQJHRGTRCPCQAYALEMMOEXQTCIWJFWNGZUNSXADSWSKBZNFXTRXOTBLXLSZVQOFEYZMVKMGGAPEPBUGGLJIOTHHFIKBGIKPDESIJOBBEZDHLCYGPLTQWDYCVNUJIBEFMHAKAIDVFXLFBOEHFJJCKRMOURTYKAXNFLZYZJ");
    msg.plan_size = 27740U;
    msg.change_time = 0.4470590466602298;
    msg.change_sid = 46112U;
    msg.change_sname.assign("JCIKYDGZEJUDPNSLYPLSYPBKBOTNFUSGOSOZHQMWXLTIAAODNUEVYSVNJAYHTEOARXVEZRKMXGKEFTBVWVRTWSIVOMPBFUE");
    const signed char tmp_msg_0[] = {105, -73, 107, -124, 38, 16, 102, -13, -121, 3, 89, 34, 93, 26, 31, -15, -7, 5, -48, 61, 88, 17, 91, -15, -110, -1, 105, -63, -44, 99, -127, 59, -54, 8, -81, 106};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.06670772134721603);
    msg.setSource(40587U);
    msg.setSourceEntity(48U);
    msg.setDestination(7469U);
    msg.setDestinationEntity(56U);
    msg.type = 228U;
    msg.op = 80U;
    msg.request_id = 30580U;
    msg.plan_id.assign("ROUYIIYJFCZ");
    msg.flags = 38039U;
    IMC::AcousticLink tmp_msg_0;
    tmp_msg_0.peer.assign("VWWADQSLSFRREDNFMHOUZQJDPJNDTDPSOWIYFARBFNCPFELIQEOLSBUNPVBLQYGJICGEWCTXAQJYAMGOUUKTSNMZSHAWSVEMIRHICKLQPYOPKPQROORAUCXSDOTYBNEVJWAATFVGGVMMJPUOGYRCXJHNNOBRHZQDZMZYKBTWTRPXHFZZIWCQGHLMGUIZMYNLHCYCQBIGZIPLUNEACTXAEXSBKXKFXGHZDTEVXDHUKJVJRU");
    tmp_msg_0.rssi = 0.45384960553577547;
    tmp_msg_0.integrity = 60860U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("KVYNGPAIKZSGVZCMFTXNSAODOQSLHOXNLENOXCCLYGJLFIWPDUKBADQVNGKYCZQICEBRZEPHRBMZQCGPGTRPVMQTAEUEISURFMICSDJIDWXMYDFOFZVLSDFWUNABJCKXRA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.6761907460680289);
    msg.setSource(64045U);
    msg.setSourceEntity(124U);
    msg.setDestination(13186U);
    msg.setDestinationEntity(100U);
    msg.type = 35U;
    msg.op = 101U;
    msg.request_id = 63012U;
    msg.plan_id.assign("YULMQWTRFMIRKSDZNFNIEHGGBHVMIIKXULJYSWULTXYOVLEVKQWLEJEZORDWCBAYNKDNPFCCQNUVRSZABYIMMRXLTSKZSKPHEGDKMICCWJLLVMZDPCVPGHWAJDGHMPXPCFFFIPOUAOKYQEFTABJETHHXYSPTHTWRAWXMGQZJTNNOX");
    msg.flags = 39748U;
    IMC::ReportedState tmp_msg_0;
    tmp_msg_0.lat = 0.5065579162846547;
    tmp_msg_0.lon = 0.5790383555624607;
    tmp_msg_0.depth = 0.700435109917232;
    tmp_msg_0.roll = 0.8091179726279502;
    tmp_msg_0.pitch = 0.16954353222753105;
    tmp_msg_0.yaw = 0.7953018168332288;
    tmp_msg_0.rcp_time = 0.34763285341157735;
    tmp_msg_0.sid.assign("XGHWQCXZOWBFMIMFTAIIPCZYTHKTWSFAIXDJQTQSSWSVAGURIMDRVPERJFUGPCMWRJRSISHTSBNNQVDSPYZJUWWJVTYVZ");
    tmp_msg_0.s_type = 9U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("OUCVIGWSQYKXNCVCBSWDLXQJCZWEVASOMDHWBPRXSXGGAFDDMIKSOILMVOLPMINBSIBCZZQHVUILXGXEABEOHJITVKMNCBTXFEAFQYFSNHDVBUGERIYTDSPFPKUGBGXJODELTPUKNEQYFLRARQZRMMAJPHCMRXNPZIXNKPWFJCJJJHRSBHRUHENZDRLCANCZSIZB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.37402273019500754);
    msg.setSource(15155U);
    msg.setSourceEntity(157U);
    msg.setDestination(27446U);
    msg.setDestinationEntity(228U);
    msg.type = 158U;
    msg.op = 110U;
    msg.request_id = 52473U;
    msg.plan_id.assign("TRLOYPHUAFPKAHOCMSKEJVRMFASITJRCGDREXGSBFWQQJGZJHCVTVLOUHPZBZEPFYUPNZCVTVYGXLWCYXOYVQWNSKNASPWNPLLHQNCIJTFRSZOFKVXMWYOKMFUUINPCTHAXLGXDHQKJIMJUQDVRDQEUGBSKQT");
    msg.flags = 32710U;
    IMC::LinkLatency tmp_msg_0;
    tmp_msg_0.value = 0.9082027016712165;
    tmp_msg_0.sys_src = 25711U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("MNXOBALSMRLWXQBNNWIMHTCLDLNXQYABTPGIZJWIYZKFVWYAOEJBFTLRSPNMUHHQPNCPBWXXHFGEMDBNA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.9518252860361769);
    msg.setSource(45606U);
    msg.setSourceEntity(44U);
    msg.setDestination(32681U);
    msg.setDestinationEntity(154U);
    msg.state = 44U;
    msg.plan_id.assign("YYFWSYSCDKJOEOTGRHDEPDZYNSLHGRGFNKQDZPIBTLAHKRQSUCPLCZSDWZBUWRTUJCPXYKBGNHWEJMFXETQFOLRPTPSVXOLZDNWWJNEOTGFPRCXLLTHAVXZILKQGUCAHTLHQJUFIAUODB");
    msg.plan_eta = 1087619155;
    msg.plan_progress = 0.02084162133300882;
    msg.man_id.assign("HFJLQDDTVHTYOITRYMUHBLYUEYPYAMEHSRWUNJGGDMQEVLZGNIZDIBSRCEYOIMJDPFCWXWKNWDTRZSUASIJEFQSCTWTAWBKBJQKQHBCERXQXUYVZKXOGXZNXSFGYZNDCHOQMYAJGDFCKOFKUAMNLPGBALEKLOYNLCVCSGHFRRRNVXLVMWIC");
    msg.man_type = 11768U;
    msg.man_eta = -1258461538;
    msg.last_outcome = 15U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.8337141293354503);
    msg.setSource(53397U);
    msg.setSourceEntity(15U);
    msg.setDestination(55029U);
    msg.setDestinationEntity(197U);
    msg.state = 239U;
    msg.plan_id.assign("SCIROSARUVBKFXAYYSRULDYXIVCIIWQMDCRAAQICUTJAMNYZBYDWBDGVJNCNKJDIKEBTZLFKMKJMGYRMUQAVHRLPBETEXQEGPZTVFPNPFRESZHEOHQWPJZUGTPULDNZOWGOUXHOJGRMJJ");
    msg.plan_eta = -421315733;
    msg.plan_progress = 0.7508262111157203;
    msg.man_id.assign("OQTDKXPHIRIVGVRWSJVROUASPBJEMIJXRCCDCGLPLWXMRGPEZBTHNRAQGWIAYDQCWFIFVYTNLAHYEDQFPKAXZHVLMEZLPS");
    msg.man_type = 62916U;
    msg.man_eta = 2046646163;
    msg.last_outcome = 219U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.6183814191325173);
    msg.setSource(43755U);
    msg.setSourceEntity(237U);
    msg.setDestination(51566U);
    msg.setDestinationEntity(155U);
    msg.state = 14U;
    msg.plan_id.assign("HTQNLFXXCPQEOWLHCGKNFASRCVTBNJWSBRTNHSZEWPWRRVIUFVBVKYLDPPSWGZUCBCEGOEGLBJFSMGINVQDYTAXXICGBQZDCYFBYCULQZLZKEJUHALTRBHUOUXVGFEPMOJMSETZYKHMTOPPOQHAHPDWZUTTDQMTQ");
    msg.plan_eta = 506656221;
    msg.plan_progress = 0.5414084793660854;
    msg.man_id.assign("TRBSMIWCECHSLTIVXLWCNAZPMNXJGADQOQKMARFSJTVTNMYBENPHCBROLPAPVOXHTAJHITKFHRGWOXXPGKEBQIFMEGLTBKFWGUZQSURUVSWMHOGZZJBVVO");
    msg.man_type = 51526U;
    msg.man_eta = 209595068;
    msg.last_outcome = 213U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.11823979562812803);
    msg.setSource(49650U);
    msg.setSourceEntity(166U);
    msg.setDestination(37209U);
    msg.setDestinationEntity(225U);
    msg.name.assign("RNRWUSSAPMLHBCDQMMQRCNCIDUXIJWJJXRWBMNNCGKITHYFGVZLKHFECAJXZIHTQJGFGLLHPZBTEFHGRQPMEKEMOBARPLMWZHNADAQ");
    msg.value.assign("JDDWNSHKINGFDVFRLRKQIXWLQFZMAQQNXEBZPYUHHJBPYFCNSDJKJYBJEPXICKVSBRZOTEOKTDUNAMXMPVFAKCICWVVCAXHYHFQSCODYOTISQBTJMHVSMAETXOYZIGFNOLLWMVTGOUWVXL");
    msg.type = 88U;
    msg.access = 8U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.9099007215343498);
    msg.setSource(59732U);
    msg.setSourceEntity(195U);
    msg.setDestination(51713U);
    msg.setDestinationEntity(81U);
    msg.name.assign("ZFVSEXIXLYKRDCBTQEEOTFPOMXBNVSCKUDYRXWFVAMQKDGZDSHIZNZFMLPANIPWWWXCYZUJPGVHOMTEQEQOQPMIVNWAPHMPJSGLRULJRIJYRHKGQEZFRPWMUBIVMMZYLLDHYOLXVGGQAJHWTFSTZXXSWBRKUEUENPUY");
    msg.value.assign("MNFZLLBREBWGTGZMECDPSLNJNJDXQCIYPPJHPUDKVXUXCHJCOLWDTRLUZQVYARHAAAIUFWCADVWKRNRIMZUFSNPMGBQXSNUBOOHPFHMYCLVFXETT");
    msg.type = 155U;
    msg.access = 149U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.7548434127730093);
    msg.setSource(18218U);
    msg.setSourceEntity(169U);
    msg.setDestination(47023U);
    msg.setDestinationEntity(120U);
    msg.name.assign("YLFNHGQXPIHCRXSBXUUOHMDNRKWPZWGCMZMYNXQKUZSAZWBCTVXJNFNDKCE");
    msg.value.assign("HDTXRJQFJZBECTUYPDD");
    msg.type = 114U;
    msg.access = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.4168834308992947);
    msg.setSource(14697U);
    msg.setSourceEntity(79U);
    msg.setDestination(8707U);
    msg.setDestinationEntity(61U);
    msg.cmd = 192U;
    msg.op = 55U;
    msg.plan_id.assign("ZBYIMQVMXLG");
    msg.params.assign("DTUSPULOZPTJRGGYXDKGXAMULIHGJNUYNQJYCQMFPAGNFYJESDYIVRUGQZIBMHVNQNCVLRTUQBXSQHYLDRYBUKLZKMFDASFBRWMEZPHKKVDVCQTZLEJVMCCWGSMLXVHBKHQIAJOVHWZKMLARITOBWVFWZCDTXEPQFLTOERXKQYPWOTZANINLNJZDSWABTOTCSAKYJOWIRWMHDPZHPGGWONEIXEEKACACMUEJJIFE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.2763984291423055);
    msg.setSource(23644U);
    msg.setSourceEntity(208U);
    msg.setDestination(34517U);
    msg.setDestinationEntity(215U);
    msg.cmd = 165U;
    msg.op = 232U;
    msg.plan_id.assign("CLDSTDUTCKWMXPRBKDYEXWETROSYXKQSVVAUCTWMHXXPGZXKFUHPANWEWLGXEVFMGVSTMGIRYLNIOMASJO");
    msg.params.assign("WZIXHCMHOZKSOBNBYPDLUCLFKUWAWUFTMAYIHTOOMVYHKFYOREJXPDYPGSTRKYHRGREZCDLRVLZNGACYKOUTSZA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.20774640462625193);
    msg.setSource(49547U);
    msg.setSourceEntity(146U);
    msg.setDestination(65107U);
    msg.setDestinationEntity(183U);
    msg.cmd = 56U;
    msg.op = 169U;
    msg.plan_id.assign("FYKOJAHCROEHXGXVDAFEICASIMVXSGUKNWPHMNBWPKKLUBYKSFVAWMTHPWTLIJHUAGBVOQUAWGVHENMZIOAEETOSVEUQZP");
    msg.params.assign("YJFWLLKOGMYHDATGDUESUCJZUBOGBPKEJRSFFQLDGPC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.4923350338210253);
    msg.setSource(60250U);
    msg.setSourceEntity(65U);
    msg.setDestination(15931U);
    msg.setDestinationEntity(178U);
    msg.group_name.assign("GCDROFQZZTWIYCFUWPSJYAZJERGQHKXKXFSZCBJXUPEDQRMBJDBVBEBYEDSVLJYUMUSOMWIGNBIWAGINDDETVUFIKLRGTFLZZZDQBYVVFUDSHEHBNHQIIPLKYOSOXHOGNIJMVYBVWRCSQQCPYNGCVWEDGSGINPRUNLDKCWSHRXSQRLEWAMKWUMATXUMYAPLTXUQNTAYHEMQAFLZNCKPGNXCWTJOPEBRZOKPTVATAJFHXMITLKJOOCM");
    msg.op = 136U;
    msg.lat = 0.24987567021589296;
    msg.lon = 0.9112063701912481;
    msg.height = 0.8460167572011213;
    msg.x = 0.6858988268913371;
    msg.y = 0.6460387662272205;
    msg.z = 0.7271348840770103;
    msg.phi = 0.9089993025207426;
    msg.theta = 0.9916535161516233;
    msg.psi = 0.29641418957681165;
    msg.vx = 0.83364638717877;
    msg.vy = 0.3786209647660067;
    msg.vz = 0.24459839059180677;
    msg.p = 0.5466395441090723;
    msg.q = 0.23894558891854956;
    msg.r = 0.8383837130132764;
    msg.svx = 0.1510206992260743;
    msg.svy = 0.15227379374360128;
    msg.svz = 0.28951781169172397;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.9265814387597351);
    msg.setSource(33631U);
    msg.setSourceEntity(22U);
    msg.setDestination(52602U);
    msg.setDestinationEntity(214U);
    msg.group_name.assign("RAVRQKJNJHBJYMISZLRHAYWQTNBNETEUNZSQVT");
    msg.op = 187U;
    msg.lat = 0.05638354217826025;
    msg.lon = 0.003952032520185056;
    msg.height = 0.8318481607597201;
    msg.x = 0.8371552085455015;
    msg.y = 0.524167408326511;
    msg.z = 0.21349897784361305;
    msg.phi = 0.20479134463117932;
    msg.theta = 0.42284150043222757;
    msg.psi = 0.8118914002229425;
    msg.vx = 0.29692994201433576;
    msg.vy = 0.7320778660527612;
    msg.vz = 0.44307878287063907;
    msg.p = 0.042539156883009466;
    msg.q = 0.5980720743391563;
    msg.r = 0.8741336620924361;
    msg.svx = 0.8934821317238693;
    msg.svy = 0.5884248916714976;
    msg.svz = 0.5348152944366887;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.4571616233128094);
    msg.setSource(45589U);
    msg.setSourceEntity(173U);
    msg.setDestination(3330U);
    msg.setDestinationEntity(212U);
    msg.group_name.assign("GPPSALWCOGKWUYWZWJOITQCWEJYMZVNQOJFXFIFRORKXAABQYSXUCQNXDYXZYPDYBXMYJSDVKNPVSSSJOISMBRLCIGRMMJHHYPJIEMHXNTTXLLNDETAISDJHWSPETFLNOUMBGGSCHVNVRKZOTERMWABBQAURVCUEFTZFFBFEQXOYKKBWGOBPELFBHUPTGGWLTKINC");
    msg.op = 246U;
    msg.lat = 0.44309617943138413;
    msg.lon = 0.14689364624963708;
    msg.height = 0.8288511935723156;
    msg.x = 0.8080071621021186;
    msg.y = 0.816782694234283;
    msg.z = 0.9531482950289136;
    msg.phi = 0.2170703770713539;
    msg.theta = 0.8807934139373648;
    msg.psi = 0.16818747865250694;
    msg.vx = 0.2652139859589332;
    msg.vy = 0.050089165415630243;
    msg.vz = 0.5622819840794478;
    msg.p = 0.04496379190515587;
    msg.q = 0.4963708381535693;
    msg.r = 0.9153135307485062;
    msg.svx = 0.5608258172611589;
    msg.svy = 0.7970910486851436;
    msg.svz = 0.44735866011337944;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.9049227559199552);
    msg.setSource(33977U);
    msg.setSourceEntity(65U);
    msg.setDestination(29326U);
    msg.setDestinationEntity(192U);
    msg.plan_id.assign("JIUZGYPNPEUZSPWUHGQBFTBOSRACASGBFMKTEJOCZZMINIEXYGYQTPRHMVFXQSNCROOBCKXDRWYXHSSACCYVLLGPNZTDLY");
    msg.type = 198U;
    msg.properties = 147U;
    msg.durations.assign("HQJIOAPPAMPLXAMWQZCICGLDXYJBXGCBXYZXDQSGEUFDGJLOHVE");
    msg.distances.assign("WTXBAZYVQKIORBFGEFSNHHVGMKLKKCVEEEKSJXJXYGPZFNFTDUXSRGXIIMATHHOPIVWDXZFMBQJJUAJRSUDGBXSDOSMQSWNAHWEAZPTYDHNFCQNEDWYPVRHVUSGUVCPZEZKXNTZRJYKPIJAKCEICBUQQVIPFOUVNGABDXCFRY");
    msg.actions.assign("BDGXKOXZYDHLUPGORRFTKE");
    msg.fuel.assign("VISDQLMYCJDRZKPIRQMTLUPHTAIHMARCOGGPEJBQKYAAFZUBSTRJTYZLTGSUQNFXJCFYWBQSHBRFLQC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.8904261563829586);
    msg.setSource(42792U);
    msg.setSourceEntity(48U);
    msg.setDestination(42487U);
    msg.setDestinationEntity(155U);
    msg.plan_id.assign("IAVQYRWCJDZUPPDUXBXYREINFTLNMSIVGHAOQHFPGVHUOHPBIVTICMSVKQQEXBUGEUHZBMWDCSYBRZIDJMOVQGHRRTTJKMULBSMERZUZQQYWQFSAYGDRPEKOINAZKOYFYXLBORIIZAWFQTHJKYMZ");
    msg.type = 35U;
    msg.properties = 90U;
    msg.durations.assign("TVDPHUEUXOEUZIEKDBTRVACAPLQBAOYLVWMDGKYEEQGBXIQDKWJVYZGNXNBJCJXKOGJMKGEWFPWYDXTKMHHCFDAHSGBROPROLXLMWYEFNMFFIRIHXULVMQRWWGSZCTLLTRTYHBJMWCKSZDIAUPQY");
    msg.distances.assign("TAYURBCZGYSQZCJBSTIQKXPWDTSDBEOWRPOVEHQFP");
    msg.actions.assign("XWMVFMPPOLZHRZRUFTNERGWZJFBYIOOZDKSNYBIBJKDQEPVYMIUVDJJCFUVHGELFPZLQDUPWHYRMKLCIVBOXCNGXCBQNOB");
    msg.fuel.assign("LPSDPUYHTKXFWBHRKNHZPDDVEDKXLVTNICMGNZQPNJARJEOHLVSRBEOQDAXYHAWUVFLOTFJIJDKWQZCVYMVPVZMYYZNDFMAIBXCGSZWZLKU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.7414133415147598);
    msg.setSource(47765U);
    msg.setSourceEntity(141U);
    msg.setDestination(54609U);
    msg.setDestinationEntity(230U);
    msg.plan_id.assign("WRKUVXAFWSNOSWIBBHBUIQCGPQBVMVAIPDHZTIDSYOPRWODGCFZTVLFVNRCZMUTNXKOMHZGGFDXGYWXYLHSCRYAHMGOHSMXKJOYACGVCLWNJAIIWTPTEYJSEECSZJVLFJTEMNBTRSDRFRHROHSEPDUPKFTLGLZLLESYJMQYKDBEIAAAUQQTQPYKRWXEBMDZOMQIZJBIGPG");
    msg.type = 136U;
    msg.properties = 206U;
    msg.durations.assign("CFDESMRHPBHGWWIBGHCXXLWHUEPLMCTSYLBWIQIMEOGJTZ");
    msg.distances.assign("PHEJCLQRLEOFBEVARBLHWKJCWJYSIJDXAOPSEMVXDLMIFTMQUAGCTYYBFZLXHVKWZVRBRJVIGZTFQWDEMOATNNDLEKUSYBLYTVBARUKLFIXLPHRKURNYWNKUIQCCDGQOAKJRFUXSJSVNOHJDXIZXAPBTDHWACRHTWEPNWCMZIEQW");
    msg.actions.assign("TSCNWTNVDYEKFLASTHGKRNFBLFVYHRIGGDASMLQDEAZQSTIUWRXCZEZNIBYGAXZXUZJBQJVUOZIQFTNMVRFTGIGGYMPOOCPSJHCUEDSJLVOJDBEVESIEKFCRDRQCUWHWAEAXPGZWHRMNQLBNLBFJWPATKSCFKLGIJDUYVTHQIWZKXHMZPXRFQUMGCKPUDNTVPPLXHCMOMYQMKAJAXZLIJSWEVJYORYOKQUECODWOHPSFBBDNBMNVOUKPB");
    msg.fuel.assign("OBJESJEHSCTWFCTFQEPIFEUNZVBWHEBRWSD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.7703599315536683);
    msg.setSource(33451U);
    msg.setSourceEntity(224U);
    msg.setDestination(25324U);
    msg.setDestinationEntity(60U);
    msg.lat = 0.5001688869918203;
    msg.lon = 0.4614980701545587;
    msg.depth = 0.7641615226826076;
    msg.roll = 0.23488720931735807;
    msg.pitch = 0.4040075297763063;
    msg.yaw = 0.2671412945738184;
    msg.rcp_time = 0.7338590737551637;
    msg.sid.assign("TDTMZEWFUKFHPVCWVSVAOAMHODFMWHDOGVKVTIJQHHKPDIHOZXXZRFQOJQZNJABBPDGNEGALUUODWXJXUHNBMTIJXBCSJBFGKIGRXTLFEXBCZSSYIRVUDFTCNFPBQLVZQYFRMJCIQGNLZNCACYELBAJETCDKOILSSYNORKWXUUOUEIHRLPYYSMRWLPSNFWDQMPPKQASVQBVGMYNELHAETEOYRWCLZNWISGBDQPJMTHAZ");
    msg.s_type = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.1776513702628958);
    msg.setSource(17859U);
    msg.setSourceEntity(97U);
    msg.setDestination(59008U);
    msg.setDestinationEntity(151U);
    msg.lat = 0.4193766950890838;
    msg.lon = 0.45830897228968015;
    msg.depth = 0.04225460291236993;
    msg.roll = 0.5032178740709459;
    msg.pitch = 0.9425144000299387;
    msg.yaw = 0.7406667292095482;
    msg.rcp_time = 0.46935764183118733;
    msg.sid.assign("RXDMWQWKKRVRWLXFZOWZHYYJFNCFXQYDHPPXUPYNQEAHWNCYBYOEFMFNUKGLUQQOGCLJLCQISUWKNDEGSIPTXOJPOJALSROVPGJZBEMEHAGIABTXPWEPSPHUUTVVHSUZSYBWFNDOEYMHKAQJTMSAMXKATCGDVCILDTRTOZEOLNAUBZGQESRZZBRVIH");
    msg.s_type = 58U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.4569266143337912);
    msg.setSource(39619U);
    msg.setSourceEntity(119U);
    msg.setDestination(36485U);
    msg.setDestinationEntity(238U);
    msg.lat = 0.58822424806067;
    msg.lon = 0.1361649067104186;
    msg.depth = 0.7446725302702226;
    msg.roll = 0.6253970356236892;
    msg.pitch = 0.524157925892232;
    msg.yaw = 0.549316427909833;
    msg.rcp_time = 0.9418668833471093;
    msg.sid.assign("EMIUTMHOFRXBQACNCRHXSGCGZYAQFAVDIBYBQO");
    msg.s_type = 91U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.8063986310404276);
    msg.setSource(54804U);
    msg.setSourceEntity(22U);
    msg.setDestination(5083U);
    msg.setDestinationEntity(231U);
    msg.id.assign("WWZHSRNFWFHLELMTMPXYIAKCDRTJUBXBTIKXIWYRNHSMCUNYUPGYIHLZN");
    msg.sensor_class.assign("LLLAFBVUSGFGFFWBTBQPAPGAYIIKGYBFTNOESBEWPPHNLMRMIQOMHZOCXAGUEWMFGTFOKJSHCWUOFSYYTVSJEKLMJJRGYER");
    msg.lat = 0.6932589446244288;
    msg.lon = 0.6309114690672714;
    msg.alt = 0.19544161495358903;
    msg.heading = 0.5141406113789269;
    msg.data.assign("AQRUJKTRBTSPYIVRHZZDRXFGNSFGGSXYNQTZYQEZUEKCSDOEYCMVFDUGXRXSOCGTBAXWJDTO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.455435024237382);
    msg.setSource(46314U);
    msg.setSourceEntity(241U);
    msg.setDestination(24342U);
    msg.setDestinationEntity(149U);
    msg.id.assign("LQTVHRNDPSSIICHXWCQVJIDDPPNJPFJGPACAGCLUSVSWKBQWSQFDHBUIRODYRYAPYNPKEZZWEXEBGQSYLZJDZFVLHCYXQITMFUANAWMHUOATVHXAL");
    msg.sensor_class.assign("TRDZBSZHYLFDNVOJOJHPRISOIZZNNMKQLQUFIXWDWPUTCOMJYZNIXKTGJJOAGI");
    msg.lat = 0.6020131448263676;
    msg.lon = 0.7263349242707025;
    msg.alt = 0.07701467034440057;
    msg.heading = 0.8921299358187764;
    msg.data.assign("SGZJERXQSBGEVNTKYOKHVIQMZWEMYQEAYFJSPOGLLBWDMGZCOIIMWPFUVTCFXICZBVJKRXTBYNNSARCNUGTIDMNLZJJDEVFTWMOZRKIPCSZXDRXXJWHKHAVBQTPMTQLGHA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.009287852713601996);
    msg.setSource(20502U);
    msg.setSourceEntity(193U);
    msg.setDestination(19934U);
    msg.setDestinationEntity(72U);
    msg.id.assign("KSGIBHVFPYETKVWSFQPWTKEOGNWDOZPGOKIKCSEEPQAMGYRHNMVNEOEDHXTVCAGJNOJJLZKSJPMUAULMRODFLIISRKFUQJCJMNBUGHIFXNRZHAETDMRSZISBNGCRAVQWFZMLLUBQETFSORWVSYWJXTCZYTPPPRWXAHZYFUMKCECQLBBWKLDITCQHSUTKYYAGEGXVNDNJZHQZLDIFBDPDYBTQLBVRMFQJVXADIXNAHWCGWZOHLJAYB");
    msg.sensor_class.assign("UEOJVDHWLOHCDNVYZGCRIRSUVJUXDRSTZLOXFOXFHYPZQSMQOSPNKZEJKIQMHBULQRTHNJYXRCOJUQBYWKMEPLWAXEDWNBMDVNIPJMSGKAVMTCRBJMVJJXFPXYWLBESVIACDQYJMTGYKPGHRCDUHBWHANEKDIDLVAZTVSFMETYGACNFIOERKLHAGWQPOZFCAVSS");
    msg.lat = 0.9177734384104659;
    msg.lon = 0.21470710531911996;
    msg.alt = 0.33037005254841645;
    msg.heading = 0.9401439772611322;
    msg.data.assign("ZWBZUBBFZRXDDIMVOWPHJOXWDTIEITELFHNGAVKXRQVSAOKJZQCVSPBHWXTMLVFURYHZNJEKHBCLYEEKCTXLKJPUAWYSXPMARYOUWNDQZVLNTJNQDAYRLSGSESFXGFTAIXEGAGMBCLUVEMTCCFOXIWIJCOKHERLRWOTRNUJHVOPFGVIILZMUUKKFGMUBNFHDIDPQTYQGNQXQSZBVJSHRPDWNMRQCDPQPNJOYAISOYSB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.2807032295631904);
    msg.setSource(16737U);
    msg.setSourceEntity(131U);
    msg.setDestination(15377U);
    msg.setDestinationEntity(31U);
    msg.msg_type.assign("DEAXOYKLHRVIYCMZKTVPNYUPHNBHFYFCXXIODFQWKJDMAJSAFIHNMMYSBMWTPEYSEZCVLUJZGEAIWVXJMSYMESFNGVNG");
    msg.sensor_class.assign("HEDTYDVZKJOWQLRMCGTEMUIXJAYCMKLGJLQDHDIZDPBJWCCGRLOVMVXWIWVBFNMSFOKGTYNBELAPCGYYNXSBXBJKIELZGAZIQHYJDFUPOFRKVRRHJEFSQXWHSRCIUGTVYYMNSEJNXHFMZMIQIHXKKZJUYYZVNQGRBVBDURAEQHDIDBQBWWZWNCSLNLHWDMTFQTOJTULAPZIONGTPPFFAQTPBXCKUZUMSKXPAOHELEANTREOGSRFCSOAUV");
    msg.mmsi.assign("SMISJOUXYPOLRIAKOYJKKYHVONUJSROFWTZVZXGBGTYDLOCQBUISNDNHDRCMDIZNWDKSWPQDHPTEWFRFARFZYXLHULUSQHJSGFKVMHYLWEEMCYPUKDTZVUAISKBJVHXZKLLDJWFYRHCQOEXJNXEHACSRIQTBZECDQVBGGNABFBLJEMEQUWENNFKJMVVDMQBXYXLQXPPAMCZMUVZ");
    msg.callsign.assign("FNWVLTNMCPCPWGQELTVPKIGIZFAWSLKPFKDEVTBFVWLAKVDQAPMSXGGYKUZTYNELAUQJBQBBMEEIUBHWJGRMCJXXBAFCQDSHXAHRMHN");
    msg.name.assign("OGRWJGFCUZFDKFYOOAEAABEAENNHJHNVXHPRGIXTBQGHFTWEDUKGEOLSPIDLFNXKYUSCEJSATZBTDLCSPBCCYQZZRIOHLOTXWKLXQKA");
    msg.nav_status = 151U;
    msg.type_and_cargo = 154U;
    msg.lat = 0.4372906604591128;
    msg.lon = 0.6883883604263596;
    msg.course = 0.5270693747916477;
    msg.speed = 0.09573979801918231;
    msg.dist = 0.04026441819859128;
    msg.a = 0.6054148577419034;
    msg.b = 0.10996337574038362;
    msg.c = 0.8105356446753906;
    msg.d = 0.4764526498072589;
    msg.draught = 0.9722980444050743;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.42995769332896727);
    msg.setSource(34280U);
    msg.setSourceEntity(186U);
    msg.setDestination(65500U);
    msg.setDestinationEntity(32U);
    msg.msg_type.assign("GOMTYULVRFZQZYVNVKYFIUANKRZETSFBTFCDJFAZPCENNAVCVLPRCSOHCDEGTDHNHFUMBBDPZISUDSTXUBREAXKMWCLZYLZYEJOHTVDLQGHSKZTNORGLQSXPJOHJOGIKHOXPPRWRVBHUDMKKWIPNMKSBUXESOGNSMQMEBQFVTICYYPQDYGASFLIAWW");
    msg.sensor_class.assign("BRIAEETNPHZOLJGUSHCYWTSWJCJQGZBOVYTWAGFJWUAGDSZEGIRFXKVSGHVRVEXDFQPKYLOEXYDJAIVDOVGPYJVDKJIZFRJDTVBRRGCNCXVMWNUBLPPTPFPESXUMDBWZUBMUSMQYUUAXSEKALZMQXICRFHYXYJFQOOZRLSALKIEQZWSAKUIYCPQKGQHXNUOKNDMYINTNGCCHERMH");
    msg.mmsi.assign("MATMHDSFVXPLVDTHCBWNSWFWTPSVAXIJNNLDRPYUSOBRNGSPXKLSAZGIZETVDPIRKGJGSMIB");
    msg.callsign.assign("FHAFATGGKFRDKBHGAFEPUV");
    msg.name.assign("OXVHUXSOLCGSHXPWKTMHQUIVVYJZOZYKWQFKDBTNAUZYSUDPSNBEMNGZNQYMLWXMYXSICFMSRWEDZPNWAKGDFBQLGCUHZYUWLSNOTCGGAQKHRTGPOMKZGOQUCLFTRHRHVAWPMJBXDSDKVBMEFNTI");
    msg.nav_status = 17U;
    msg.type_and_cargo = 76U;
    msg.lat = 0.18330926100777611;
    msg.lon = 0.4519640890124993;
    msg.course = 0.4450844595324964;
    msg.speed = 0.7967142133628778;
    msg.dist = 0.2713250751040772;
    msg.a = 0.6520819240261726;
    msg.b = 0.6854488175248612;
    msg.c = 0.0145910910383521;
    msg.d = 0.6181274145096965;
    msg.draught = 0.700349302487554;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.9347649961558676);
    msg.setSource(64644U);
    msg.setSourceEntity(196U);
    msg.setDestination(32722U);
    msg.setDestinationEntity(3U);
    msg.msg_type.assign("MDIBSJEIJHEOZRYUAMFOQGXWSVGLOBCJRVPCRQZQDADMLEBQWSEJUKXALBHIIUCKHSWMRLKXPWVYDXZUOPAHWGCTNTZRTLZEJVGFUYLYUDSDDIJUGJVNH");
    msg.sensor_class.assign("WBXGVSKVJDINYDMYEMZHIANBGERZIDHTRJIJQNTLQQEXWQWG");
    msg.mmsi.assign("XVTTHYBLWKNIPMRHEJJESKLJJRGTPCXLCKWQZQPREXGN");
    msg.callsign.assign("YUQZDDGXZRRLHUSRAVLNQDVWIJGYMAEIOTKIJONQFKWDISTSEMGAGIPTPQOYDEWSYXQFBVYHTJMWTMBCNVSKMVRWQJSICHULWBKPLDJTMNLKTOJPPCQXHXQVDBKUBKEDXBUQAECWRYPJAKJKWMSWNGH");
    msg.name.assign("IGQBFHXCFICTTMQTMOBBAERKNRYTUSLEVNHJLDVCOMRRLAREVHCRMGWJOLNIDYMHJMWJTOFYZNPVSNLBTUBUQQLZIJYJNAQFQLFPRGIACCPXVUXSBJDENWKIAGZDACOBIASGUTWKMMUQTDIPEMFRZWLTXTGOOESZSGPVDLWKBHPFABLKUKGXHEYJKVCUS");
    msg.nav_status = 156U;
    msg.type_and_cargo = 236U;
    msg.lat = 0.5684434032928619;
    msg.lon = 0.5266790745925193;
    msg.course = 0.7602100943824175;
    msg.speed = 0.7465413135018677;
    msg.dist = 0.8958162244388813;
    msg.a = 0.12962276232288905;
    msg.b = 0.48062614866424036;
    msg.c = 0.4011816640228837;
    msg.d = 0.4512330619767263;
    msg.draught = 0.8451554207042652;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.7648021783315112);
    msg.setSource(37985U);
    msg.setSourceEntity(61U);
    msg.setDestination(4000U);
    msg.setDestinationEntity(20U);
    msg.id.assign("TBKCUPBWOUKOTLSRMWWNBJDNDVMOPENKOBUVSLNRSTIQVAEKQZBTFLXNKUHGMXVSUEIOHYGTCIRPSYZBZEWLBZACYBSXZVJCGYIEHRYALHJUEOTIHIXNSLXSPDGODTIFBJAFYQFRJOHPYMPFMHMVYAYVMB");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("XRMWBUXGPCYMAUYJKUDHWFHCZTLZRNEOCJLGANIQCBWDPBDJTWHTTFMYFVGZSGUZXDLQWXQIIRFDOKOC");
    tmp_msg_0.feature_type = 123U;
    tmp_msg_0.rgb_red = 36U;
    tmp_msg_0.rgb_green = 58U;
    tmp_msg_0.rgb_blue = 82U;
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.295909119875607);
    msg.setSource(55828U);
    msg.setSourceEntity(196U);
    msg.setDestination(27710U);
    msg.setDestinationEntity(196U);
    msg.id.assign("ZHVAWQXXIAIZHMLMARVDIXDWJBQVOWSDLAWERKSVSGAZECBURDXDYNKFGTJLLHSKZKHJLAONBYMBTORXC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.19830977017586437);
    msg.setSource(57210U);
    msg.setSourceEntity(187U);
    msg.setDestination(44590U);
    msg.setDestinationEntity(149U);
    msg.id.assign("BTNUVBAKEYWAIPRPTIZRCGOHPWJJSTGHMNBZIZFNURHUADJCPAFCGNSFEYKXMCVDMELFWDELLRCYQITVMVCMQUDVKWNAPMDSBPNGPEOABFSGUZTTHQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.08741547823146589);
    msg.setSource(12905U);
    msg.setSourceEntity(28U);
    msg.setDestination(24736U);
    msg.setDestinationEntity(24U);
    msg.id.assign("JFALGVGOHIZ");
    msg.feature_type = 238U;
    msg.rgb_red = 25U;
    msg.rgb_green = 128U;
    msg.rgb_blue = 115U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.07502241093557327);
    msg.setSource(22168U);
    msg.setSourceEntity(10U);
    msg.setDestination(64445U);
    msg.setDestinationEntity(25U);
    msg.id.assign("ROWERWUHVQZKQPNOTBNUVJYBTBGUTCIJEVCDKERUXFPXRHZODOOGGTMWFPFIIJNCMMUZLDTNGJKTKMCGJQKKZMFSFYZWJVUALHHYUHEGXVGASPRYDF");
    msg.feature_type = 102U;
    msg.rgb_red = 103U;
    msg.rgb_green = 155U;
    msg.rgb_blue = 107U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.3390765774493856;
    tmp_msg_0.lon = 0.7441607114690659;
    tmp_msg_0.alt = 0.13982079141865744;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.6108843097465942);
    msg.setSource(43453U);
    msg.setSourceEntity(172U);
    msg.setDestination(15402U);
    msg.setDestinationEntity(69U);
    msg.id.assign("JEIROKBZAVMSUPATYNPQEWMJVBWQOJNXMUKHIHHAJRMUNZRQPJBERZIFPBQNYVBLGVWXSIDPUXWNMYIJJXCPOVU");
    msg.feature_type = 21U;
    msg.rgb_red = 231U;
    msg.rgb_green = 65U;
    msg.rgb_blue = 135U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.14108330658475488;
    tmp_msg_0.lon = 0.0010972260533709255;
    tmp_msg_0.alt = 0.5755220225870585;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.791042599111608);
    msg.setSource(33912U);
    msg.setSourceEntity(167U);
    msg.setDestination(25276U);
    msg.setDestinationEntity(244U);
    msg.lat = 0.2854300173213834;
    msg.lon = 0.9935721520938708;
    msg.alt = 0.050708365665555144;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.11529344333869673);
    msg.setSource(8648U);
    msg.setSourceEntity(132U);
    msg.setDestination(32619U);
    msg.setDestinationEntity(138U);
    msg.lat = 0.613423544686719;
    msg.lon = 0.8257253140659446;
    msg.alt = 0.782347142917872;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.3906756365416203);
    msg.setSource(30249U);
    msg.setSourceEntity(5U);
    msg.setDestination(44696U);
    msg.setDestinationEntity(86U);
    msg.lat = 0.8555267089328608;
    msg.lon = 0.8483246261973201;
    msg.alt = 0.8115082958068764;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.9385205152141965);
    msg.setSource(37942U);
    msg.setSourceEntity(233U);
    msg.setDestination(4632U);
    msg.setDestinationEntity(20U);
    msg.type = 94U;
    msg.id.assign("EOORPAMBXWFVJPHPRTNDGILTRJGPFTRMWMXBRGNSORUQBNSISSDYEANCLGKXDBPQSJZWBQFUYLWUXXFFFGZBLSTEHGPHEJEZMINSQPEXKMOGPYVPTHAJAFOOKKHNNOZLXUHBVJKHOCCTWKEJTLAUFZOXYMYAKLIJQOTFEVZHDCGIARNNMBSKHLQBVVQYIWIYUJVUSDFKUBLUYWRVDJPKCQATCMAITICQCDREYWGGDDQZZXXZLMWWIAC");
    IMC::IridiumMsgTx tmp_msg_0;
    tmp_msg_0.req_id = 63198U;
    tmp_msg_0.ttl = 12747U;
    tmp_msg_0.destination.assign("TDAXSLGDMGRSPR");
    const signed char tmp_tmp_msg_0_0[] = {41, 89, 12, 117, 8, 112, 126, -49, -106, -10, -13, 0, -80, 28, -45, 71, 122, -103, -84, 96, 89, 111, -100, 102, 7, 59, -96, -108, -61, -77, 18, 120, -58, -8, -18, 74, 64, -13, -58, 91, 87, -34, -116, -92, 7, 85, -82, -80, -47, -63, -55, 30, 126, -126, -12, -39, 88, -91, -21, 29, 13, 23, 29, 11, 90, 125, -5, 92, -5, -62, -20, 89, 89, -84, -31, -47, -40, 93, -127, 27, 4, -52, 13, 122, 97, 5, 4, -72, -36, -17, -12, 113, 12, 97, -34, 24, -111, -94, 124, 118, 68, 102, 85, 102, 40, 11, -76, -41, -102, 80, -97, -33, 45, -7, -85, 124, -103, 90, -24, -7, 44, 69, 20, 111, -25, 3, -73, 47, -51, -52, -121, -27, -4, -12};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.037282218817823676);
    msg.setSource(54913U);
    msg.setSourceEntity(24U);
    msg.setDestination(48506U);
    msg.setDestinationEntity(238U);
    msg.type = 123U;
    msg.id.assign("IGLKLSWGZBGAJDFFSJTSWUJXWOVUBWQQNBRVASZTXAFTVYSNYVKBCKMDRUPXNBPHTTOOTBETMWFFUQMWRMHVLNDHRGJHKAZNMRCLODXSJRWNFXPMXDIXLNMPEAUPYITJALIHKZGZXUFAZAIUSZCBRRCIQZLHDAUOGJFWZQBAKDBOPYYYCGOEVIMIFKWVHVSILISDTBKCV");
    IMC::CommRestriction tmp_msg_0;
    tmp_msg_0.restriction = 109U;
    tmp_msg_0.reason.assign("LOOTHFGMLKA");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.455440109736031);
    msg.setSource(37872U);
    msg.setSourceEntity(43U);
    msg.setDestination(47320U);
    msg.setDestinationEntity(213U);
    msg.type = 243U;
    msg.id.assign("RQEBGNLUEBTLQXUNYPSFZIKMGMREQRROBRQPUHHEOSRMWCFIYJPTZWFLXFBZIJGGKMUMXQPSRCMOXNOMCMTVGDVASOAZEWWUVABUCIJAKISAYYYRWD");
    IMC::LcdControl tmp_msg_0;
    tmp_msg_0.op = 201U;
    tmp_msg_0.text.assign("KSUKBOMMDFUYUWMPQCFOPSSZCQCWFMKRCETOPSXOQKIABRCXOHJRZACFYGMGYCAPTIARYWAJBLVHDZFHADFMYVSWCAEBQXGPZZNESMASEFVGLENBGKBJFLLLHJXGDHNLIEPKOXTBOXZTYQV");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.3904258170444822);
    msg.setSource(63569U);
    msg.setSourceEntity(194U);
    msg.setDestination(27257U);
    msg.setDestinationEntity(3U);
    msg.localname.assign("FKBDNXKYGUUFBGSRHSCYFOSAKUIZZMQECBWWHHEASDEPPSQEAXXGFAZMOHCKWLYYCBTJXUYQPRZUTLQVRORPHDVRZLWOIKRAOWARSTBTLZGIODYWJMJCVBNWXQQLKPDWVVLUDWNCLVSRRIAHEHYJKZJMGQFFIJJUVETVXMYVGBCAODCHVIGMAXKXYDDBMIPHOPF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.49605379980707187);
    msg.setSource(31797U);
    msg.setSourceEntity(173U);
    msg.setDestination(48221U);
    msg.setDestinationEntity(138U);
    msg.localname.assign("WAVLQTTGCHYETNGJKZUPOWGPQMJKHRAKWBMDFRYBVOJCVOWSAJTYARLTMOMLVEPSBCOXSCSFXXFYGGYPEJCIRSZSIKPRHUCNDRNHZBUJKQPOXWWBUQCZUQYAUIDRVWMBQBKIJOKDFFUPVTXMFLDSMNLBLNOYRLQAKPIDSXMBZUTHOZELAXPGYHMJTCZNFHTPJCIQXRYNMUYVNEUDJIQAGODAFXWFGL");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("EFVXIDEJONCEQMGLFSOWPIJXOCUNLLASTWORHDICZDUDRIYFRDBMXPNLNBCDJUQQFYXLDNADWRPTKBZKTIOFXQIMVGNNMYHQPMKRSEPRHHXALEPMVCFUXQYZSLJJBHCGPFXOYYVEPIMMBWIZTNRUSZISXTYAHTHJAJBGOOCBYGGCGPGLCUQJBOTWSVLSADKFTTVSZPIWFAKKNSHJKTOZYKVFWKKYMR");
    tmp_msg_0.sys_type = 47U;
    tmp_msg_0.owner = 55941U;
    tmp_msg_0.lat = 0.3694769592059435;
    tmp_msg_0.lon = 0.1847389111735851;
    tmp_msg_0.height = 0.5123037100213681;
    tmp_msg_0.services.assign("PDEIDQOILYQNUIJNTGWYERQVXGNXEHHSZCXFHTQLCOAZZJOHRXORVKOMZYHJQO");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.12427326840886599);
    msg.setSource(46275U);
    msg.setSourceEntity(34U);
    msg.setDestination(23553U);
    msg.setDestinationEntity(43U);
    msg.localname.assign("NCLMAGYOKTBUWMJXAXZYDZAWVMFHUBQLS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.9559846071133398);
    msg.setSource(56125U);
    msg.setSourceEntity(248U);
    msg.setDestination(36510U);
    msg.setDestinationEntity(139U);
    msg.timeline.assign("DLUYBUFHNPRTTZLSGHJFHOZFCBNYAXEBEMLEXYYBCDDOFTZSHIPXNQMKWZJJTDWWVLFQGRNEFVPTZGLQMUVSJUVWKWZLTIMIAKTPWFMPMQDHQOQJS");
    msg.predicate.assign("FXXSFXWJRAHRHSIABPJRNSQKZYOVQVBEBYJXLTQGWGQFTHDZREAVLIGAPAEYQSDQGPCLQCLRTMHXYEDZISNMHOVIMBPTWZHDUOKPBGJBVHIZMLEZDJBFVUSJKXJBUTZGBLYYNDKORENFAEUDNLQNGUMMQVOCJGOVWGKYBJVXGMWCOTICDDRWPNUPDRHTWFSRWCKKWWCUXVMEMQSFOFCFUXAC");
    msg.attributes.assign("SJXOFXNAWQUQMKQEKHBGRZPFOAQOWJGHSVEDMWWSDIEHHBUSDCTURDLJRNHTZXOETLYZVZIVOVFUVRFNKOHTGKZDLZKEBYLLZVKJJUCQOICCPDTGRFONEQRRYWMLJWWGAVYLYPJMPSLVFGICJZBWZS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.4947852590361387);
    msg.setSource(128U);
    msg.setSourceEntity(134U);
    msg.setDestination(40484U);
    msg.setDestinationEntity(118U);
    msg.timeline.assign("OHWYTDGZWPPLUDBSSEZMAPRVEBEOKTXBGPFFMTOZJJVBPHVCSGTXUFUNGXEEIVGWHIFYWLASQZRXGQFELLCRBQSUKUJIKIVOZFKQRRXCRZIKGMCXTQEWFKDONIRALYMJOWAEUDTHAJSRSHDCJOJNICLNMQMTZRASNDHBQUNEVYLUCBZVTBMHJDNIHPDPOVJOGTYVMAYYXAEUIGYCZFUDKNXJPQLFLL");
    msg.predicate.assign("OJQPZHXZKDBUSFQKRNJXXWFKUGJXCWYTVATPATFIHRQEGYPPBAAAORLQMSVJLESJQXERCHFMXJRW");
    msg.attributes.assign("LKDIUPTGFXQAEFDEASBVIBJYMAYKIRERERTZGZGKLCLDONJPHKCHHPBLIBGNSPPBTUPVMZCVTQUORQNEXOKWTYNLFHQZJJZICYTUSOUZDHRZYWIPRHZLNLSQXVJBSMTSGFSDYXWCMOCMSAGDJNYKOIXIOVOHKEKTPYCHVVDCHMJQWLKAAKQEAWEBDNUWXGCPFLIXVLZBJARTNXFQGYZSMEMAGBJMQUTRGDRBOWDWQXXOVUFYPUFAJWNEFF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.7772935931648335);
    msg.setSource(55289U);
    msg.setSourceEntity(98U);
    msg.setDestination(16468U);
    msg.setDestinationEntity(95U);
    msg.timeline.assign("QJYRGLYQKWOKZSKHBKOWFWYMLOABCZEYAQANSPMROYSDSXFFIFGFNSZVFIIDPCACPGNDCKYBLNIUVHIERXVRJHEWRWIUMGZFOLZP");
    msg.predicate.assign("BFVWMWYTGOWSKLDUREGHXIZOCI");
    msg.attributes.assign("RMUQQPRSYVASBYVLUOIRYLZVREWYERASNNNUKXDTFOL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.4460768150770714);
    msg.setSource(2436U);
    msg.setSourceEntity(192U);
    msg.setDestination(4428U);
    msg.setDestinationEntity(10U);
    msg.command = 127U;
    msg.goal_id.assign("SUXZXYRVZHCIIQACNCJKNRODEWVMPYTYSIBEAJIZIOMDOXIKGBAAOBSOYMLJDUUNBRJALFPWDUUGXGEKILQWVGHOSVBL");
    msg.goal_xml.assign("BSNXWSVMFCUHOAPSHOJHZVMOZUWSGUSBXJZYAFWZDDXKPQVIMDJPGIABCFQTJMGRZNLJWGRPDHALUJYPMFTCUUTHRXXYLWBAYNGQZFFIOZZLJQEPHGIKKTHANKWRCQPCUINMQSZQYLBLRMONOKHMUSBBWKAKTEHRLKCIDLHR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.1376801432268404);
    msg.setSource(50477U);
    msg.setSourceEntity(187U);
    msg.setDestination(59418U);
    msg.setDestinationEntity(240U);
    msg.command = 224U;
    msg.goal_id.assign("IRUDEJQBKTMUQOLRARQFCCVJOYZVYZBQGSMCYTACGVJIMHHVBZYAGAPSLHCUKTGMTWBEKVIWQWUBNXNSDZBOGNSMRITRXFUZYZRQGPJCHOIDCHOPUFAMTXKFJTNTZVVNNEKTNBYJQABISPKZFZZEFHQDGDJ");
    msg.goal_xml.assign("BWPRZKDVUDHOGXOSAKAWKZKXEIHWRZBYUEQXNRJMWRQMQFMBIMMLHJEYYWAKZPVFSOGXOHEPRIJWFFGDZVNVNPGCFNPMATVYBNOKFMORLJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.4832439561582763);
    msg.setSource(7392U);
    msg.setSourceEntity(64U);
    msg.setDestination(54295U);
    msg.setDestinationEntity(98U);
    msg.command = 72U;
    msg.goal_id.assign("UTFIMVSEQHZMFGYOKNKTOCFGAUUWGZUSPSHEMIKOLHDBPKKJWDRMSYEEPPIQIFVOZXYTNPBEGPAANRXQVPYCBSWRQSAXUDLNJHOZDHATOFWIGZFJ");
    msg.goal_xml.assign("XIOBKAXUQNTGVYCDTENODQIEPZAFQSNZOGMYZDUMWMOFAFGRUXIPELFRXDNUKZPQTJVPJLZVYHBGNEYVHIMFBGIMGEVATRKNQXWRXVCXMBOCMCGGNUZXECBRPUFSORHOWYYKJYRHCLTVKECZIDPTHVKWOCALLGJHQFNWBJUOLVDYSS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.5652111651825596);
    msg.setSource(12484U);
    msg.setSourceEntity(175U);
    msg.setDestination(62345U);
    msg.setDestinationEntity(101U);
    msg.op = 127U;
    msg.goal_id.assign("MHGPWQVVCIADGYVVLXEBPTOMWSPBHFMCDXUWJJSNDPFJTLIQLASMDPG");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("WRZHDSEMAZONLNBLCOSYYPKD");
    tmp_msg_0.predicate.assign("OAFYJCKDDPBVQMWOEXNRRAMTJAHLYSWPKFOTFNCQIZGAEDBFYEZJSUBMVGLIQYOEYYJTIJAQS");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.3114734180112012);
    msg.setSource(31328U);
    msg.setSourceEntity(165U);
    msg.setDestination(8306U);
    msg.setDestinationEntity(217U);
    msg.op = 14U;
    msg.goal_id.assign("EDHYWKMQVCYMGGQRNEBICPUWWDEQAZJNZLSBGXTEUYCNJVGWTNFIXLZNHCVFMVDUISQFCKVSUKVYJUQLOJAIQKDFCZETYZBAHWRRLSROTGPUHRYBFOZKTMQGELBAFNBARWSIIRERNPZXMPVATBNWLHPHCXWIOQGJCZCHPVDVDMMBSUHQFXIWAERSJAQOXOBAYXDWJFUMIYHHREUFKGTLVBOSXDUZKADTLP");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("NORRVYVMPYMAHZLJQHJTNDJFULGAZPGXXUTJKOVHMWPOFABFOYLTPQMXTVBQSIZVZGMWMMKBIEBSMPXWPHFVTFWZRNSLQXQVLSXWEAGYJAUPBYIEAZRGTTIVODQITWGEQOZDMLUWRBQEZFODIWVNDCDNNULKKEOTWLQFREHAKCIHCYZJRIYDJMSASNPBKHGUDNYQXURNKGHYCSPKCHGLCHFXBSUOJKFZTALUOEREBFC");
    tmp_msg_0.predicate.assign("YLKDZMQBITPSHTDIIORNEHSXAVGNMWGWLZBFDVWLCXJLTRJXHTLCAJZTSTQBJPJKWXTQVJJAQOFAHYXICFRGWNUPLJVTGXUTTDSHYWHRUDEPZKFBORNAKXBUEOWBFVIVQUJR");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("OSIZTSYNUSIPDHLUEFOTBSQSAVGOIXHEQXQXOHJTULDSXBLKXTUAEWEKSGXMDHNDBFVJRHVCRKQJNESISQGKZVMQZFQRGEHKANCPZKHILZNBVF");
    tmp_tmp_msg_0_0.attr_type = 89U;
    tmp_tmp_msg_0_0.min.assign("RUVWDTCNNMUOJFOBVVKEPPYDMGKDBQXSNRPGZWLQAGGSRSKBJJHVVKZRZYENEQGQUCTRVLUHFUEGBFFXISFZDZNHXTXPFCFHJNEWMSTRBVYWHMKOOPYDCLBIHQIJXVCAIDXTCGQ");
    tmp_tmp_msg_0_0.max.assign("JFLGOZLSNJEMJXUPCIMEWJNRSKDSJNSTJITGQQLHWCRKRUNHVVWKOXLS");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.8596443746266601);
    msg.setSource(32754U);
    msg.setSourceEntity(30U);
    msg.setDestination(14081U);
    msg.setDestinationEntity(98U);
    msg.op = 101U;
    msg.goal_id.assign("XJPIVUJUSOAFSFUPJZUBKEABNHXGYZJQLDJZSHJXRHBCYPULOBIKRRCRTEYXAWWCKWUHSZIAPGLBJFDMLBKKVRDZESZVFLVSKYJDIRCTNMEMXNUWVVMGXAHDD");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("QNJKYUQXNLFHEHRUQYRAWNZEZTKISISFZOILPMTUSHANFRYJPOGGQJSLSLWYGWXEYCWPLMBGAPTQMHDBRGYFLWMHWFGVUMJCRUTFZCDMUNMTKONHGDXEDSFMRUANEEZYJORCCOTSZVBMEAQVKDOMVZJAEIUWBWJRTBVTIFRCQC");
    tmp_msg_0.predicate.assign("TWWJJRXDTXESTOLIKQZHOLXFOWHRHMVIMBEVARWNKBDVKSRMMWBFRKPNUJIYTVDLRYGHDDHPBZPNHANETAABIOSEBGEDKNTJCJLUGETFZCGYUWDQYZWNHQXKPGOZQUPCGPJHQFCSVXZJPQXWFJUEYRACZFGKOBEKAYPEBYSOZDCMMSALIRGRWNLQSWMVNUTXHD");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("KFLRCWPBCGPVMZXWUOIHTTUZNBEGTKTWLANIWSQQTKEHMKFSNBRZREAMXKYIASRRWCZUVIUPZAHAWTNVQHGYFOCWVFZPEBHQOYHMFSIYOUDBJMHXACUGVXTSFQPNIJVKIDDDCUGECWOGNRZODQXRFFXWECLKTPRYEZXNOVJQAYJRKIKKMLRXSTCJDFDOZSQEJJAVSJLFPNLMYPLGNVUBQMYHMDGUSZCYILEMHQJLITBEGUNYPBDGDOLSA");
    tmp_tmp_msg_0_0.attr_type = 147U;
    tmp_tmp_msg_0_0.min.assign("RPIYWWJWZQSGFGATECFHXMLJZXCSSWOICBWEHJREVMXCWCDSZRHYPEYGZQDHUVNYDTPSZUUUYJDUJJAGVKKCRYHSCHUNEFJIOXTGJYBLVRETKIVNOMRXLFCPQIJQTGTFDBNNHWDRKARVZBQMENKQSKBVHAULFMETXQIMBLBPAIKOTQNZPXLIWPABLHFYBDPVCQYPJLMOOKUVOYGLKFFTOAMSIERGAN");
    tmp_tmp_msg_0_0.max.assign("DQKPYUWLFGABRIQZEWNNZSIANZXXPWCKHOJCCPKBSKLIPJTSCUOAMRTVZJGRWUYOVKMYANAUFRBBFJVBTEMOEGIXHYWHRFSOSLLZNWPURNJTFVEAQMNLUOHGLWOXDEBLXDBTTLSGFMPZVYORHAEBDXRXDREZHWYXGQROMGEXUMACDPYJDPTFQDIZ");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.061200342593976886);
    msg.setSource(23835U);
    msg.setSourceEntity(46U);
    msg.setDestination(45992U);
    msg.setDestinationEntity(67U);
    msg.name.assign("PBWOSWOAEGHXAVPTIMMWRWTYHESSAQOEBBBTVNLDLPGRQQKFPLJNDBIXUUSGBYZSOXCJTGNXVRXIEUJBFZCFKQHJZOAAGCLJRETMQJXUVNZUOZZYNDYJDKYVWTBOFUCCTLHRZLRNKMGSPWEGNDHFVLGVPCVTRQSWCBPIKOEKBSYCVLVYMHEXLZMWIAIQNWNKQKA");
    msg.attr_type = 113U;
    msg.min.assign("WHCTCEYDDHWICZZJLPJIAPDNIMCQLNMCCTFRNUWNVRMGIOFNZMQHBOVHBMZSAUQYMQDERGYPLXBTLDTOGSHEAFICMWKPJKUFORNYVFDYKAOSFJKIGOAEVXDTVUUTTOEISAFRQEBJPCIWUXRSZRIGPRYIRWWYVNEGULWKF");
    msg.max.assign("EHUXXYNKHQPCUJFUUGRRKFQFISFABOGSVSGSILMMRIHZUVSAMTFGPAVVKHKMLEABRKOWBOCRZYLDLOTIQLWMSZEDTAHLJWVEFMHYJGNNXTDCLDBWXQAVECJKOLSRCWBWQONRVJBGRKKPSRNSWTZNWBZLPCDJMUZQNUPAIMUCTYOICGNBIUQEAPXQVQTTZZPBESXRMYMNAFYZXPBEXWODIDPQOGFHWDGXHIUYCJPHTVCYTZFVY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.8755972573245966);
    msg.setSource(60699U);
    msg.setSourceEntity(57U);
    msg.setDestination(46277U);
    msg.setDestinationEntity(228U);
    msg.name.assign("YYPELBWKXQZWOJTKMFKVRCDZQMADPFQEMARDSBUEVYZFHPNXCDZCKFYGZHLHJVIFJILORMPPXMZGPWDGIETJXXPEBGUUVVQUTOBLGHOCNOWJSKXZVDKLWKFFJEJUQRPKGJNZIIDGSTKNMEBFMHAJXCSWBILPGHDRRUVCEBMEUXAXAWTSLSJSNUYSQNLNTLFROGWORQTAYIIXHZGBCVSMWYNLTKACIQOCUPDQIUEYARYOHVBCW");
    msg.attr_type = 122U;
    msg.min.assign("WOREOBTTDEEVNXAIWKDNXCNEACMUPYYGOQLLWGXHBDRMRWXYCYLNOEYTNTTIASQKFSHWDXHTNCRNCPITZOGPUSSJPLTDKMMKHGZWXLJITEVFWVVLZYZWZOGQUUMSZVIDMMLHUGUNASAJSII");
    msg.max.assign("MBDYJLFNVGWBXGHISURVGOZAAUTFFHQFRDYQWCLDFHZUZKQYFPCERMAXUXCSANZJXIOUUETEJPTNRFWWEEIYJHXYZZWAXQGWOEZVZLMPWONVKSCILYOQMPSXDJDTKSXRKMBYJKDPTNIIRLDVRUZFSTKRMGWJQQRFQTCESNAMTBOQBPUORNLYVCKBPZCHNGUVMYMTHYPDSXHWGHIEABWVAGKOHJDAGVOAB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.06324389195703406);
    msg.setSource(47287U);
    msg.setSourceEntity(126U);
    msg.setDestination(51166U);
    msg.setDestinationEntity(115U);
    msg.name.assign("AZMQJRVSJJORTDUYCQAEESTXOIFLTIRSNFDVCGAFALSGGWIBBAOSCNNEIPUBWITUBDQOJDQUHOFYBEMZRFGKVUYNRSJCSCYPRNAUQIXFYPAYKZHOYLJGLXFCBIIRVTFDKEPDEHNKPWTUZRPPVNZVXZVMLNXLKMIH");
    msg.attr_type = 189U;
    msg.min.assign("YNCPDOZNRFVPENGWEKMYVRJSBEFWDGXXFOHPCNHXVDHLPYWJDCEZCEFZLLXASSXYMADXNARQLVXTEKRPYQYIMBGUKQKGAOSKIJKIIAINHGBRITNSKMXNHXJKABZYFIIVYWPFYG");
    msg.max.assign("SOWLHVQGRHLTVLPYMJHKWOZQFUVCRAMUIMZNQCVMZFLXDFKKOZGSFZJBAFVRVWFNHJIETXNTYTESBJNGLEQONPURFDPESPHSRDWGTQOIEAIBNXXLJFMOATWUGVMREYNEJQUBLGXZQODBHMPNCFWKUFAHBGHYKZYYCXACJSIDVNWZKJXSXTSIOQIGKYDUQCUJDRQPGWENVKPJKMOEA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.8039572522275875);
    msg.setSource(10111U);
    msg.setSourceEntity(242U);
    msg.setDestination(32467U);
    msg.setDestinationEntity(113U);
    msg.timeline.assign("SGUXQFNFMLSLKYCRILIIHACTAZPNIMFRMBVBGTPVTHEJITBZEXZ");
    msg.predicate.assign("INDJKLOVCTRCBXFEDUHEYLVYPSRNCCDHJOITROLBVLKWBQPSCJKDWESQGAVYSWCVJFSKG");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("UEEMFFLNMNHEGTOBW");
    tmp_msg_0.attr_type = 0U;
    tmp_msg_0.min.assign("JJWBCWHTWQNJDZPOVPUNBHIUMLHCEOBYUOQDSVNMCUBSLKCBMJZXRXRGKOGRYDQFDUYHTBKRIMQVXAQFUIHMJZTAFZKTRAE");
    tmp_msg_0.max.assign("WOOHXUAOKSOXVKDYMAYQNGOGHJXZQTRUKOAECTDEGJYFMJDYGCQKLWMDJRGHWCTXCYVRNHBCVPWFAIEJNOZIXNVYQRLZXESMQLFFUMIPDQIMKRAVHNXBFLICKIELVEVSGTYSGAGIDKMITLVLQHMDPWNMIJPTNXBLWLBZZBHVISBKHPTXJEAJSFTZFQCQOYKRPWZJEPWYFWCK");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.1057008665026482);
    msg.setSource(24635U);
    msg.setSourceEntity(227U);
    msg.setDestination(62056U);
    msg.setDestinationEntity(138U);
    msg.timeline.assign("NTACQGNSXADQKYSPAJUIDCAOHLQEOWFYLRJULSVFONFDEHQQLOGKRZQBWWDEGHXYLPSUJSBXGRWDNXFBVTGZVAKEU");
    msg.predicate.assign("RZOHGWVPUKWHSMNMTNZUNCQLEWOPTVDQSYNIIQNOGAULMAHGKJXLUPMFGVJ");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("TIZGXUPNVGRJTMLJSPVCWFQTMACWWR");
    tmp_msg_0.attr_type = 245U;
    tmp_msg_0.min.assign("ULRNYQXDTNMTWDHDHELKEQMSEYGOYLFHNTUZRISCOFSNWXMZIGOKQKTTZRMEPVVRRKWGYCOQHLZKGUEZQPHWZBXMVAXNCTEOGORSEPXOSMUVSWFJFAJXZCHGZEAARVTRHCUIPUEWDDMOJAXVWNNWYNGIDYJGKBKBNABJIOVZLPEKMKB");
    tmp_msg_0.max.assign("IZLPLRLAIGSETWJQ");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.3023328678040206);
    msg.setSource(15897U);
    msg.setSourceEntity(93U);
    msg.setDestination(42102U);
    msg.setDestinationEntity(127U);
    msg.timeline.assign("XMYNEYZWLOVRGIZEJSFAPWFGCMTTWMZQCUJUEM");
    msg.predicate.assign("AKOFJWPZQBKRCIUDVNXDNUNZTUHXQQETGVMSMOPQNGNSMWZOCVAVLGBRGPOBFAFPLCARFKCOJJXLZLYQRMIZEKXXVJIHXJGPFWCUKTRGIDMLSVLNKWFYZESQIMTEOHGITZUNSIJBDBHZUPSZYOWUDYVHQG");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("NNHSHUXNRIBSRIGBWWCEMQDYHCENEPKFFACCAZUEJBIJKTOZUYPXNQLZSEEORYSAHGJPILOTCJVZCSIEFQA");
    tmp_msg_0.attr_type = 60U;
    tmp_msg_0.min.assign("CEZCXGFLIGNUNNQRUSFNKSROPMQEJGQDOTMQUVCQVYJPEIJBOMAWNCYKJZWYYATBRUASGWSWTDPX");
    tmp_msg_0.max.assign("JKAQAMGUARQVQBCYGAONCCOLEWMUTTNZWPBKIXXSWQYGQCAUYHKETXWNMZSUFVGPLIMOVHYJAXVFOKQKFGWTJFVCDRHFSKONDCERVFTNE");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.12509131777773908);
    msg.setSource(51236U);
    msg.setSourceEntity(237U);
    msg.setDestination(48556U);
    msg.setDestinationEntity(43U);
    msg.reactor.assign("CTNDCSVPWOAGTGPKZKLQBXMGEGQOYWVIKDJKSYUWAJHCRPOKLCJHOZMLJQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.3783481095125496);
    msg.setSource(8038U);
    msg.setSourceEntity(239U);
    msg.setDestination(33318U);
    msg.setDestinationEntity(181U);
    msg.reactor.assign("VFWEPYLUALEMAEUKPRMWUGQINNJYKDDKDRJNUMXWPSYNDLXXFGOZLCLDGXQZPUHCOXYAGCRVOVYFUWADTUTJMOOJVC");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("RMDZQFLLSYSZRQXSNYFAGEQIORYOTHELSCXYYFXVKSXPZFBLGPQYLETNYECMSDCDLFLCKKACCOLUMVQZDKSVUKPDRUGSFTAQKWEWRMMDUMHTYTWHZPWNMMPIEHVFRAOAICDQSQKUUDWFXZHTZMJLZBNHXOBVSVHZNDPTAEXAPVWBNVULGJURTRGNNBMIYJBVQTQKTJGXHPBIBOXBJAWEHKUCCJJGXAGGNEPIGWRZIVYFOEI");
    tmp_msg_0.predicate.assign("OFANGFMBQNLTMBBQAABQIPSEEPERJDYWQSVYDMIYHSJLKKVPOUBVZZTXSSTMURVKBLJRGSFTPQHOZCGVUXZYHIIWJMFTQNBDWTJUHQADMKNUFREHGQNBNKIHIBCTFACJEUFPAHULWVRJOIKVZRYPXLJYZYUTKXEFEGPZNPVOFOSBHZMAWLLOKERWH");
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.607054307769652);
    msg.setSource(6591U);
    msg.setSourceEntity(135U);
    msg.setDestination(57485U);
    msg.setDestinationEntity(126U);
    msg.reactor.assign("UKODWJJSNYMKHAABCCDRHJJELEHURLKSXHEFZDVNWYMMDQJJGSPSCRKPUTRHHIFFLGDNHCUXKOL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.008434641642215857);
    msg.setSource(17234U);
    msg.setSourceEntity(103U);
    msg.setDestination(42435U);
    msg.setDestinationEntity(127U);
    msg.topic.assign("CQHRYNBMLPOTCUURKQNNKXLFOWHFINPSKMSAIJJTHGDUQZCDQLEPFHIXJDBQILTAQ");
    msg.data.assign("AWIGHUWYNWLXQVHPMHRRJRGDUKFQHCROVGCFOTUNYSLMMFROSJGRGHKABJL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.7974423394356828);
    msg.setSource(42889U);
    msg.setSourceEntity(243U);
    msg.setDestination(454U);
    msg.setDestinationEntity(70U);
    msg.topic.assign("JLTCWRCXDHMAWVMBBNJLC");
    msg.data.assign("LWHVXHZCGKMLDMQABDGKKSVXIAYGPERJPXNUPAMFMZLJFETIKFUNZUKYHCIOFZODLZWZPHMHJUZQDXJHQPHCTMCPTEVPKMNGSOZBXUEHJYCYGRDTAAWNDVILSFTOSYIRWISHMPDTBNGMSTORKVVMIYJROZSZAWVNHPIQWTVRBFSLCFEVLPRGENK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.8401738385550819);
    msg.setSource(46798U);
    msg.setSourceEntity(233U);
    msg.setDestination(39207U);
    msg.setDestinationEntity(224U);
    msg.topic.assign("VRLAFGHUDEWSUMPZFCMGWYYUIDCMJINGWBWGSACLLZAIMNPDJFVHJKZJSMWKMCDHQOVOIKYPBZJNKEJTZKFZOKUKWPPSXGBOAODBECONBXURXGFCKZVXVHAAQEXRISKLJPRLZE");
    msg.data.assign("XMYZJDQQSBKLVWWVGBVULHAXTTLNAKBIOPKOYJKHGDWWVPTUHQEMDFNRVUXEZAQBFQTCNAMORUGKYPWGYGRGJIFJDZSOFHUMKQDZMECSZPRJCLBJNOJOIMUKMLLXVPNRTOEYRDZLAXDFHXFPICXSDIRRYYVTOSQJCFECIPHAUEEWFGQWNVSJBHX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.6919888892198889);
    msg.setSource(15497U);
    msg.setSourceEntity(136U);
    msg.setDestination(33901U);
    msg.setDestinationEntity(69U);
    msg.frameid = 72U;
    const signed char tmp_msg_0[] = {89, 53, 109, -120, -22, -122, 92, 73, -21, -56, -1, 61, 104, 30, 56, 37, -77, -95, 72, -11, -32, 23, 64, -53, 4, 115, -85, 101, 35, 1, 126, 118, 126, 25, 78, -35, -7, -118, 91, -25, -57, 57, 98, 15, 109, -123, 123, 70, 61, -20, -114, 13, -9, -85, -50, 16, 10, -123, -83, -32, 26, 124, -12, 34, 125, 36, -43, 11, 107, 80, -120, 80, -68, -12, -114, 61, -2, 68, 98, 126, 50, 32, 23, -13, 19, 107, 61, -17, -62, -102, 48, -91, -72, -17, -101, -114, 73, 37, -87, -112, 0, -15, 76, 28, -8, -40, -111, -8, -123, 4, 43, 55, -88, 35, 121, -35, -5, -117, -117, 33, -88, 46, 26, 60, -101, 29, 28, -91, 67, 16, -7, -66, -112, 88, 116, -74, 100, 109, -93, 119, -6, 26, 0, 0, 14, -80, -75, -128, -73, -49, 102, 20, -16, 8, 124, -78, 88, -112, -121, 75, -4, 47, -72, 82, 116, 105, -80, 40, 19, 80, 51, 90, -16, 26, -110, -91, -112, 96, 23, -7, -51, -10};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.4337622467595449);
    msg.setSource(30798U);
    msg.setSourceEntity(93U);
    msg.setDestination(40386U);
    msg.setDestinationEntity(126U);
    msg.frameid = 165U;
    const signed char tmp_msg_0[] = {43, 44, 65, -31, -113, -119, -45, 48, -18, -111, -2, 12, 57, -115, 95, 123, 36, -67, -81, -30, -89, 26, -19, -23, -50, 8, 110, 18, -128, -73, 0, -107, -44, -120, -80, -72, -43, 41, -126, -15, 9, 124, -30, 103, -28, 125, -108, -76, -23, -31, -2, 86, 32, -78, -50, -68, 99, 13, 89, 6, -108, 74, -46, 102, -32, -58, 96, -72, 29, -119, 58, 57, -6, 13, 29, 115, 61, -48, -48, 80, 44, 114, -67, 45, 94, 49, 100, -13, 42, 43, -74, 2, 106, 111, -34, -108, 82, 30, -74, 91, 43, -15, 114, -42, -27, -82, 24, -117, -12, -111, -52, -107, 102, 11, -50, 67, -118, 43, 83, -38, -78, -83, -59, -3, -49, 5, -18, 112, -110, 28, 2, -18, 37, -61, -68, 62, 110, 112, -85, 81, 38, 31, -37, 61, -111, 12, 124, 26, 99, 106, 64, -87, 100, -80, 4, 87, -70, -67, 87, -64, 29, 68, 110, -88, 84, -81, 52, -9, -40, -8, 84, 114, 105, 78, -20, -100, 69, -66, 82, 61, -3, -2, 36, 44, 100, 6, 11, -19, -57, -57, -36, 101, -88, -62, 39, 56, -27, -74, -47, -123, 13, 124, -4, 10, -61, 21, -50, 49, -22, -104, -34, -19, -119, -78, -11, 99, 91, -69, 89, -83, -86, -55, 100, 17, 10};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.6955589946062558);
    msg.setSource(60747U);
    msg.setSourceEntity(143U);
    msg.setDestination(58310U);
    msg.setDestinationEntity(101U);
    msg.frameid = 155U;
    const signed char tmp_msg_0[] = {-33, 112, 75, 3, -22, -52, -76, 3, 98, 109, -109, 75, 117, -86, -36, -72, -101, 51, -89, -62, 113, 91, 34, -96, -110, 110, 37, 112, 98, 57, 69, -99, -77, -117, 6, 99, 113, -74, 115, 66, 12, -125, -59, 38, 5, -108, -92, 33, -105, -75, 122, 53, 68, -60, -6, -69, -9, -58, 2, -128, -11, 62, -44, 80, 36, 7, 24, -26, 4, -40, 62, 19, -56, -82, -93, 64, 30, 44, 109, 4, 85, -7, -64, -63, -30, -90, -58, -78, -62, 115, -73, 39, 37, -92, -33, -66, -87, 17, 37, 19, -102, -11, -3, -56, -120, -88, 53, 71, -107, -61, -113, -12, 94, 118, 99, 9, 67, -59, 87, -8, 2, -127, 1, 119, -36, -85, -43, -45, -60, 120, -44, 124, 94, -61, -68, 1, 39, 80, -78, -22, -18, 119, 98, -13, 79, -58, 104, -44, -105, 46, -70, -69, -42, -5, 82, 11, -94, -83, 78, -88, 74, 115, -68, -80, -115, 21, 29, -28, -57, 36, 99, -36, -61, -92, -118, -126, 126, 117, -103, 52};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.4358300692574645);
    msg.setSource(18935U);
    msg.setSourceEntity(246U);
    msg.setDestination(35881U);
    msg.setDestinationEntity(205U);
    msg.fps = 193U;
    msg.quality = 29U;
    msg.reps = 4U;
    msg.tsize = 87U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.7115519007254427);
    msg.setSource(14821U);
    msg.setSourceEntity(194U);
    msg.setDestination(27352U);
    msg.setDestinationEntity(125U);
    msg.fps = 140U;
    msg.quality = 88U;
    msg.reps = 155U;
    msg.tsize = 66U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.584342619529558);
    msg.setSource(21706U);
    msg.setSourceEntity(139U);
    msg.setDestination(57936U);
    msg.setDestinationEntity(47U);
    msg.fps = 28U;
    msg.quality = 38U;
    msg.reps = 254U;
    msg.tsize = 18U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.7461781937950331);
    msg.setSource(56563U);
    msg.setSourceEntity(77U);
    msg.setDestination(33897U);
    msg.setDestinationEntity(227U);
    msg.lat = 0.8806882654680845;
    msg.lon = 0.6076222941249869;
    msg.depth = 69U;
    msg.speed = 0.7700124337402997;
    msg.psi = 0.9237180350221825;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.9637090883728124);
    msg.setSource(15881U);
    msg.setSourceEntity(204U);
    msg.setDestination(20480U);
    msg.setDestinationEntity(85U);
    msg.lat = 0.07027793650115721;
    msg.lon = 0.36326022485475284;
    msg.depth = 114U;
    msg.speed = 0.0532073367390028;
    msg.psi = 0.8027949620707067;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.7532310184986071);
    msg.setSource(62483U);
    msg.setSourceEntity(170U);
    msg.setDestination(55842U);
    msg.setDestinationEntity(120U);
    msg.lat = 0.829680329192774;
    msg.lon = 0.7110227904419953;
    msg.depth = 147U;
    msg.speed = 0.17100549563419798;
    msg.psi = 0.6545831866377022;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.21935512084200515);
    msg.setSource(8443U);
    msg.setSourceEntity(72U);
    msg.setDestination(32188U);
    msg.setDestinationEntity(202U);
    msg.label.assign("MLERNURVGEDGKMUZEUTOOWEBFPYHIZYQSWLHJJZSKXNDCDSUXTGQTCPHHAGOASWHDJLMZEGXVFUVRIDPCWSQFZIBCPYUEQMZKEDKPKZGDAYPVLTTFFAXPIOAOCRHWPZYNFFCZQXYNBXKGAKTBJRSWLMURVVFNJHAHJLIESQEJQTRMVYBGBTOOUWUTSBQX");
    msg.lat = 0.40186462327510775;
    msg.lon = 0.09761092722191755;
    msg.z = 0.20373563603038802;
    msg.z_units = 105U;
    msg.cog = 0.6670914969818988;
    msg.sog = 0.33537732208827775;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.27158730129925124);
    msg.setSource(23052U);
    msg.setSourceEntity(240U);
    msg.setDestination(49846U);
    msg.setDestinationEntity(217U);
    msg.label.assign("PZDKIDTZVMTZEIYMKCHNBZIANXRVUKIFQTLZVKQZGYGDJMHOWXDGIXBGAFYRYLPTMKYNWSHFARTKEPNDBUOOFQAWUHLKMJTERHJCXPEFWIQVMUONLQWSRWZVNUIDXDVVCMHMKTOLENGBIJEAGHOUYMAFSMYXDHQBNJGFCOAPELRQEHUCPGUBCDCATSICQXCPYALPZFOE");
    msg.lat = 0.9801339803698758;
    msg.lon = 0.40815489723473797;
    msg.z = 0.9053746692863999;
    msg.z_units = 28U;
    msg.cog = 0.49033234551171745;
    msg.sog = 0.21756584078770513;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.21661306688497584);
    msg.setSource(63082U);
    msg.setSourceEntity(107U);
    msg.setDestination(15791U);
    msg.setDestinationEntity(219U);
    msg.label.assign("MKIRFDTDLBBXOVOJNCCNHBKMMCTSVQZUJDMLMEXAMTVPARGZUOLNGHXTJDIQEQXVHFHLLAAUFNBSDNXJP");
    msg.lat = 0.2515240724489165;
    msg.lon = 0.47699618953220413;
    msg.z = 0.3898926908188023;
    msg.z_units = 46U;
    msg.cog = 0.37194607559054405;
    msg.sog = 0.4957212391363085;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.016942206324210063);
    msg.setSource(33726U);
    msg.setSourceEntity(220U);
    msg.setDestination(8598U);
    msg.setDestinationEntity(213U);
    msg.name.assign("MXJQZGCWVZZSHTOWIICHWUSEORCUMLQDNURASEVQFJOPWECOCUVBIDFARTPRVTQWGCTEJXSQLHZBIFFLAFDIITGNLVAYXPONEBIKDGSBESGJOJEAVDNBGUSTLMKCPSVMWKCHYZMXBZYLLZKKERXWYFTRKRBTJUABZOMHMWICOIJDURXURCYPODHLFVTNWRJADHHPZYMMPTDXASNGWUYFFKVPQEXDYAH");
    msg.value.assign("CKCBRVRPLMHASCXHONTXDLIYGSQCBRJRGWXXWIYWQUSKWWYYUSPDRCXQDNJZNMSXTOVOJTRZKJGLBZAKLPISXJHATFAZTIQDIQDAONYLMHXPCDBUPSOOPJFYUORKLQUINEZIHXCAEHAHDSJFGJNTYUDFGVLPMNPCTPEQGUMGKVQWKBYVBGEAITMAEMVKJZRVWNFZHZONNLTQBKFGGZBHKRTXRLFVWUDEQWEBVOUBECYSMEWZMLIFMDY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.7827112833645653);
    msg.setSource(27239U);
    msg.setSourceEntity(167U);
    msg.setDestination(53519U);
    msg.setDestinationEntity(241U);
    msg.name.assign("DOCYHONABREJSTJAHQLPFEEPKNUFCVWEWNVZBKYGPQLLWZZOAWJMBXXYFBADEMYHRWUZPIDQEMKFLUPXQGGDWGMVAKARTVRUVNLGCKPMOWJFEFJRVMXCTVJDHAOMNOZTNATSSIIHHLRQLBOWSBIUNCPNYYZKTGUHCDYSQFBIZMECSXIGBSKLUDCDBVOFLXJHN");
    msg.value.assign("WHCBIKKZSDZMEOVXHDBKGPABBBXPBGEQZOLIDVXSNDYYSQMEPNZRUFAJWTAFSUVWUQIXQTUTYALPBHQIQCFYFHRXTOFILHXRJIILEHCKWGEOCCMJHOSDUAQRKZGAPCVELTVAG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.6556165492937249);
    msg.setSource(20219U);
    msg.setSourceEntity(146U);
    msg.setDestination(50286U);
    msg.setDestinationEntity(220U);
    msg.name.assign("MREEVOFOEQLXMANZHQQYI");
    msg.value.assign("SAFAYRFPIQDFXDVHJKIBYHOWCCNSSIJMCBQLGQTBLKBGG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.9028457207569769);
    msg.setSource(19860U);
    msg.setSourceEntity(252U);
    msg.setDestination(5730U);
    msg.setDestinationEntity(97U);
    msg.name.assign("YODHIUCEEBOASPSKMOZGMRPEZUUSSAPEFGBIEMUALWQTMODKTUSGWPEQNOLKJWQQWFQBQSVHJCVDBOWTHJGWINBIZBDYYTAJEZNXJUYDDHQAFBNDHREEKRVRBUZNUTRRIEFMGXVXVKBUDIFZBCRGSPNLWCXWYMZMX");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("RQYTPWIXUGRKVEUGGJLQSDUVFLWFKQOZOYBHFADOLETATNFKFNXKZUDIXRPXLVYWVJPFLCHSEITBMACEJRMUOZPPVJWZIDGSQCBSKYHKHQFNSUXYCRTKWJMBMEYYWRHWFEUQKVXKRATMINXSCVDYJRZIHFGRWAKUCHQMOMGDZJPDSJM");
    tmp_msg_0.value.assign("CTXCAPQKSZWPLADIWNOKNRZQWGYWAHYFPDBJFFRHJLUNCRQVSVEYUHWBDJTJZIVHIIEZKJMEKLOGXGFEDYCLGEFMNUXFBACIUOIZBRTPWTUIMVZQZXYEWYLBHAYJXUYMOSQHLGROLCELHCYMNGGMR");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.7104490457348678);
    msg.setSource(61049U);
    msg.setSourceEntity(233U);
    msg.setDestination(34351U);
    msg.setDestinationEntity(15U);
    msg.name.assign("UJVBWTFQHAMUIDLDAMWYDDFXLIQDLHFCLGYOWJWUQTEK");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("VNTOMJXLSLIJADJHNKASELMPTQFHVFXNLYBWMFIOZSXZVNOUWXABEBXWBTKJDORRYALGVPUNWUMKVOZZCRGHBCDUTZYPXGSNKYSFOJDIYKCGGPQKYLGPSQUARCKQYTBWFCJOARRIPTQITCZXWWYEDPTEZUQNJIFVHH");
    tmp_msg_0.value.assign("ZPEYTBUWECYPGJBOQZKNIAWAZLRLCGZVTJZWUMWFYPSRXYIQVBAAFZIVKBSTFHTNLACPHXRHXSMDRXCUBZMFH");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.8827271361811071);
    msg.setSource(30287U);
    msg.setSourceEntity(160U);
    msg.setDestination(42086U);
    msg.setDestinationEntity(120U);
    msg.name.assign("DJPDVFNPNEYFTPUHQKAIZOMWCSOZGVAGDYJNKFIZKCJMNLLSREGUYBBJSDKBFKSAHTLVUBXZTLWQNCAWIPZTBDBJSYFQWODYCWATV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.6615892426162083);
    msg.setSource(6356U);
    msg.setSourceEntity(230U);
    msg.setDestination(29156U);
    msg.setDestinationEntity(187U);
    msg.name.assign("BRQTBMTBDAEFKACMSMLAIUAWP");
    msg.visibility.assign("YGSOIHSSXNEWUBUBKHEWACXANUVFRBMEGPPRPPRWSVOJJNJDXTTUIKIXWTTVHOLDHRKLKGKPIGZCDIHMFWXAODJSKIYLPQRBKJCZZPABCSYLGHYOPDQEEJACRUULXDUMPBHFEAWLGTLDVCSKIZVJBNSMZEVFIVQVVFAQCTULZIYXTQQQNJCEKOYEGOOHFZMFNMFXOYZMCMXCAYBIBSGTHEWZGWRPUOJMLFAZLWHUGRNMTQRVJQNSRXTNYBDFA");
    msg.scope.assign("JBTTRWAGVFGTIJKNYQIOCYFDFWVFGDNMOAKNRHQQQFATSIISINJKPLHYKBNHWCAKBUYENQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.20167614710063697);
    msg.setSource(65456U);
    msg.setSourceEntity(51U);
    msg.setDestination(29569U);
    msg.setDestinationEntity(132U);
    msg.name.assign("YVCSETXAAIGMUOXDWTYQDKQYDBHURQEMWHWXGJZXABZKEEYOUGTMHPZKNQYBMMEDWROWBNCGMRWLCGVOINFLZLYEIEJIAJBXCAJMZJCPTTDXMVSXVUVBMQOVWKYAVTHHBUOKPHKTWCNWNGQOKWBCNVKTTJELELSBYUHGXQNZSFNFDFPOHRPVJBSNAMVOFQJRTHPRISR");
    msg.visibility.assign("XJGFIZOBNUZZNZHWGIEXBJWRATYRTRYYVMKXLVQQSOOLPWWUZFEAFQIXSTVIANCAUDSTYRLRPGJCENERUWPYSUBECLASWNXNFFQOLTPPMMCKEUMWBHGKFEPYCPUWCCWOHZNMEVUTCTAFIZPMLUBCSEDSKIGJQOLVSXMMBVRKTQHJXDANJAQBVOAFKEYDRUHDNYSKMHVGKGKZIFJRWDRJHDQFBISLKIHOYGTJDPATNQIDYZDVOXXGZLHPMCBJ");
    msg.scope.assign("LPXZYLAWXUSHZZLPDTBZESQWLBMRHDUXJSSQNSXQNVVRMTZKJBTGEAIUZLOIEVLEYXPRWTLGVYUJCZAFORKCICMMJRJBFCTWGXLIGASFYIDSUSHLRBMBJAHIDDEORPJEBNGCF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.7145538164314734);
    msg.setSource(27788U);
    msg.setSourceEntity(129U);
    msg.setDestination(26606U);
    msg.setDestinationEntity(192U);
    msg.name.assign("ABZRFBGLYHXQQUWPICNJPQTMDJHSDNZWSAZJEMHUICNGPSWTQBHGPYQGTHRCCRXXISMRBFUVAGBYWZMRLVWSVJLUDFZOLVVRYKERPLJAAKNYVQZSJHDBEGOUDZRKIAPPOOBWLDDCVVIUWCPGQHIEMYFDNSMFNTWETFYOZSWIXKGUKYYBSOLJCRLSDUPHKXGMKFFIEHDETR");
    msg.visibility.assign("JHAGQIBKEECTZUASQBWKYOLUAPAFNDLRXBMFRLOHPDVXBRRBGOBTGLVMDGQRFNSCYTYKUVTLIRQOZTRJXSJGMCALCGDWVREEOTJMWQWLUCFSCNQIVACMDNPWFUTFHZQVBJQNIDDHQUNOGEEKEKTYIYXKSX");
    msg.scope.assign("HVAVCSHVYQCCPYAKSBQSPUGAGUFKKOPLWROYJTFNHGHXYMMZZBEUDITXOMBRSUUIKKTTJDVEJFKLKDHOFPEMFJCHWEXWNEGHQYGNVKNUWHLYIRTDLRSWTMAFZFWPIEEPUIBKNZFUJJRXORCQGVQXUAVSEXLTSTSNAQBXGAYGIBMSTIOMDZQKOZVHNWVJENBQBCDZXIZCAXGMBTCOPEUNCJLPYAL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.9838641534649593);
    msg.setSource(9532U);
    msg.setSourceEntity(204U);
    msg.setDestination(45861U);
    msg.setDestinationEntity(73U);
    msg.name.assign("OPFBEFEZUPKANBHBAHPJABFWIZZUWABMCTCPITGGAPVMXFACVPYGZRDPEQSDYNJAHIJKBPADZGHUCHIYHCSNDKLXNNBBMUTECNDWJXWLYKLULPLILFDGGRDDYPOCDDRQOQTFXQKSREYAJGUVRVCTTMGMWFERKLTTHOSXJZLHKZOKAWYQTFQVIHFEUJJJIXMOSWRYYVWWOQGVUCQNUOBHQMQZMKMUVFRNZEVELXLSKSNJEOZM");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("QVWVBYDYAETKTEOXBDPQFBFPMUVQ");
    tmp_msg_0.value.assign("KTGQOFSEDIQJFYTHONJUDZTODCGIVEYTREPKMMUSDYZKWKLNPUQCRXBCHYIOJHGBFSVQBYXVIJAZQIXNCOPJDBBWLMGIOPVCEPABLOMFNWZS");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.991903031600125);
    msg.setSource(47777U);
    msg.setSourceEntity(227U);
    msg.setDestination(13020U);
    msg.setDestinationEntity(191U);
    msg.name.assign("JKEEEJMGDQYFIGYNSFABWSTMOWYFYXZUSOKLAWBDFVONWGABDMKZDSZDBRFILDJRUEDJESZQNAWXQIGHOCZQVIJOLMVQHUVKNSJZUKBIKGLTPPVINDXBQCUWRYVWZBSEUNITNJHCLJCZFZXVMPTS");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("RFHVEYCYNSAOTTOTWHIMCYXGZCGNBRBZDNLJJOHAXFNSXQTQXKVCZQWXUMMLMDHOPSJYUUPTREMXLYXNMQQYALEGUNITWLDDGJVLGZGTYIPQKVBESPXRFWBONTWFYAGKJZDMLAJNIOJCHHUATIFKABHKFUKRMZRCFVRIZWHSHHOLEPVFPWSRJGSPABEICGNUKEYGUKOLFPBEIFQXLZCWEPBUBVJVDDQZVPWBJVDKTQXESARIWKCS");
    tmp_msg_0.value.assign("TXRPCJHYIJQHVLPKBZNLQZEOAPXTJQDMZISEDQHUIWLTIRXR");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.9804442589774676);
    msg.setSource(16132U);
    msg.setSourceEntity(128U);
    msg.setDestination(54708U);
    msg.setDestinationEntity(140U);
    msg.name.assign("XXEZYJBHEOBANVCMUEOYMYOWZKVIRFDFPUXVGQMKZLKGJKNOEWRZHKYJWYXBDLMTSPTHEFCMSHNJSBLGKXLWCCFDDGODPBRGRACLUKEEHABLAHTVJYMHSCGRBWEUAPOZPMIKUDUNQI");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("FVPTFTJGDPQUXMYINZPAWYAKREMMBPMXLWCLJXQSKWTTGJQGKCHNVBLYRXBQDEQMZYVULORWRWLSINIHBZKJAMIEFFOINLOHHEBUWCNJBSLDADCEQWDGFUQXJJPMXGBTHMFMXCKJZVSRZPZYHIQHHFYDRTAOEVPFGWZGAUKUNIAKEJYHVRLNUZSCBVDFOTNNXOQCIRVWOPCXBLRPSHAZCVYTCXGOOAGGKTPE");
    tmp_msg_0.value.assign("IFPZNLYVYNNWJUFEBMUJUOVWBAXTXMZDDWPLQJRHCEWIKMGDYAEHBVTSZUJXTPKSHIZCFRXBJHQBROUXYGVIIOZGCVLXPSNGTKRHJUCHLEC");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.6927817741017622);
    msg.setSource(39418U);
    msg.setSourceEntity(7U);
    msg.setDestination(49929U);
    msg.setDestinationEntity(206U);
    msg.name.assign("ZNDWJFDGTKQTVSZAGNXJLKDJFNNZZUVKIXIXNUDWGECGTMSRARMUFPJMLITBGPCRCPEYHPJEEEOZYIRVDFKNGKBHOAXZUSYDVT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.8590591601670353);
    msg.setSource(62061U);
    msg.setSourceEntity(252U);
    msg.setDestination(9734U);
    msg.setDestinationEntity(181U);
    msg.name.assign("IULDOOOEBXVKGIOPZKZJTMHFZWVAMVDLQEODMUCDCFZMGHJFKEKPDEYFBYPCVGDSHJAXSW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.15414879076923105);
    msg.setSource(55570U);
    msg.setSourceEntity(206U);
    msg.setDestination(61754U);
    msg.setDestinationEntity(95U);
    msg.name.assign("PUPGZJLGAWIZYDORRLNEKOVPBDMYHQGIHATYGYRQCTQHVVXNCAUPLIIXEMPICFRDSNZWYPRTCFHSKADJFVUAZOFPBZKZBEKVZAMMBJFREHDJMGFKIBLVLLRCXJGMZGSWWMPVFQEFWCMBESTTYUVTXNZYFRDPKJKVNDOSXSSLBOXHASOIKIILCTEUAHQYAQXJUTUQQBBDUPZEULXMXQNWWEYAUBKMG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.09057151737329983);
    msg.setSource(63929U);
    msg.setSourceEntity(204U);
    msg.setDestination(10301U);
    msg.setDestinationEntity(107U);
    msg.timeout = 2612435147U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.775237578216061);
    msg.setSource(7463U);
    msg.setSourceEntity(88U);
    msg.setDestination(31121U);
    msg.setDestinationEntity(154U);
    msg.timeout = 3762768729U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.5665547244107136);
    msg.setSource(58046U);
    msg.setSourceEntity(157U);
    msg.setDestination(25778U);
    msg.setDestinationEntity(224U);
    msg.timeout = 2022775807U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.8734228105286365);
    msg.setSource(64398U);
    msg.setSourceEntity(125U);
    msg.setDestination(32074U);
    msg.setDestinationEntity(47U);
    msg.sessid = 2676652858U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.21376844175901277);
    msg.setSource(24531U);
    msg.setSourceEntity(122U);
    msg.setDestination(6149U);
    msg.setDestinationEntity(188U);
    msg.sessid = 226297079U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.17691597807124826);
    msg.setSource(48989U);
    msg.setSourceEntity(135U);
    msg.setDestination(25364U);
    msg.setDestinationEntity(94U);
    msg.sessid = 701562335U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.821221240685084);
    msg.setSource(13661U);
    msg.setSourceEntity(124U);
    msg.setDestination(20588U);
    msg.setDestinationEntity(245U);
    msg.sessid = 398397720U;
    msg.messages.assign("BASGFKYYAPXPSKYPTZMERBHFYORAEJVFOTTYOWMEXSLGBCKAOJJSVNUTULBUHUZVMIZXOPIDVPJASPXIHDDXCGOZJFMOFJLGCLZAUDWCPCBUYOZFDGINLRQNFNMZMRYDLQZPWVRQQZKHMSWROCPUJUTGEBLDFNHISKKDMAPCEXDVAHCKTWVWQHFWVKGY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.9675594938710232);
    msg.setSource(12222U);
    msg.setSourceEntity(95U);
    msg.setDestination(30388U);
    msg.setDestinationEntity(54U);
    msg.sessid = 769597593U;
    msg.messages.assign("BPLAEWPMVTUMYYGSXVSGGCQMWDGDJFBRFTVJDTBQRIZVOWSJRHOCFWRWNTDMRTMQLSOPVKNNXYOZNKIGCWJIABACMOSKTUGPXEUCLXZITJVCKRHHHZAMHKQHNNPREPXQAEQLJZUFOHHRISUIMV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.9958502717799441);
    msg.setSource(45710U);
    msg.setSourceEntity(214U);
    msg.setDestination(40695U);
    msg.setDestinationEntity(102U);
    msg.sessid = 974266662U;
    msg.messages.assign("GFCQDTUWDPCGMYAETALUAIRAMVRXBJMMVTZEFGAISKWJNQCZJEHDXSRVMNJERJDEKYBKUKUHRPJXPRBEJFHXWHSCWZUUHBNHTTWVDZMZBPFGMCIMQEBDSKIZBOQOEYJQXWSVGPOYITXVFFQWWMILG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.35615226586952453);
    msg.setSource(55718U);
    msg.setSourceEntity(120U);
    msg.setDestination(31467U);
    msg.setDestinationEntity(242U);
    msg.sessid = 1760634391U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.9154177169427751);
    msg.setSource(25142U);
    msg.setSourceEntity(81U);
    msg.setDestination(54848U);
    msg.setDestinationEntity(223U);
    msg.sessid = 337251811U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.13235267631999237);
    msg.setSource(12910U);
    msg.setSourceEntity(72U);
    msg.setDestination(49233U);
    msg.setDestinationEntity(88U);
    msg.sessid = 3607689227U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.2807633290106134);
    msg.setSource(11489U);
    msg.setSourceEntity(111U);
    msg.setDestination(53616U);
    msg.setDestinationEntity(66U);
    msg.sessid = 2935371846U;
    msg.status = 96U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.39114213600782854);
    msg.setSource(18974U);
    msg.setSourceEntity(206U);
    msg.setDestination(21633U);
    msg.setDestinationEntity(239U);
    msg.sessid = 3274127426U;
    msg.status = 101U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.6086183896858227);
    msg.setSource(29447U);
    msg.setSourceEntity(208U);
    msg.setDestination(56900U);
    msg.setDestinationEntity(150U);
    msg.sessid = 1628051775U;
    msg.status = 127U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.8562835267619993);
    msg.setSource(50302U);
    msg.setSourceEntity(212U);
    msg.setDestination(19797U);
    msg.setDestinationEntity(69U);
    msg.name.assign("ETCYSOWXKXPGBXNEZOQELYKDYUXXRPWODGJVBEUNBWJGNNVFJPDWRXTZJYBUZMGECJQIANAQWKMELLFZPVOYVISDIPCEFIARFMPQZLJTBRYISWQGFOTVYFNQKEWCNRCCHUBVBKAQHFDYZHO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.3545782167328393);
    msg.setSource(60227U);
    msg.setSourceEntity(78U);
    msg.setDestination(38103U);
    msg.setDestinationEntity(10U);
    msg.name.assign("QDCYVKZKRHOGLBDTCOOSXPEGMVKBMFIYNZBHDHGNHYFJGSHFCWUY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.6373075671233472);
    msg.setSource(53146U);
    msg.setSourceEntity(86U);
    msg.setDestination(28110U);
    msg.setDestinationEntity(85U);
    msg.name.assign("OSGDUXCJVYHGFQWKFOIDHMEUTCAELDBZCCRSHNXPIJYPKRHECOMCZEFEOLFNUWAQAEYRCWKVEUPSHQYTIQJBOILMJPQLWGKSOEPCPRAPIIJOAABEQAZXGBUNVQPUSSOXKVNIMBTPHXBSIRMASHFMPRLYKVXKKHRZMGKFZUUNTRMQEDYYXMOWZNRJWHLALVDJSMBXINXUNWDCQDWSVFYLCD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.8400803265200879);
    msg.setSource(15580U);
    msg.setSourceEntity(221U);
    msg.setDestination(60067U);
    msg.setDestinationEntity(121U);
    msg.name.assign("XVSKYEGVHFKZPDCKGJBUNSXYQBYFVTLGIERMJASVZEFUMETCJMATIOZGHHGLIXDFJPHCNOBFZJCDTHTOWUAJNFGWOQLQSBWDLVPKPVDHEXYKWKEVIMANGCPBRHQZWGXTUEZMSAHXEOMRJBKDDRZWPUMNNNIYZMADRFLMTYRFPBSXCXECFARFXLQPORIVTUZLQAKWQOZBNYKLRSWIQYYT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.13984370697542836);
    msg.setSource(51860U);
    msg.setSourceEntity(104U);
    msg.setDestination(26062U);
    msg.setDestinationEntity(184U);
    msg.name.assign("UOPJHPWECM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.5517061561764117);
    msg.setSource(23970U);
    msg.setSourceEntity(160U);
    msg.setDestination(13045U);
    msg.setDestinationEntity(182U);
    msg.name.assign("QNWJEJPIGBISKODERAJBBSQVLKQGEGMQFZFYGNLAESGXDHYHMCXFJGSIWMLHMHQWGNPINMKUYMPCSUZTUACRXXCTRQKBHKTOGXTHUVZWFSESQCDOYTNEKHBDPVOPADBSYLZUFCVVVBCSU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.5434107279380089);
    msg.setSource(3503U);
    msg.setSourceEntity(108U);
    msg.setDestination(60459U);
    msg.setDestinationEntity(176U);
    msg.type = 245U;
    msg.error.assign("HNVMNHKDMLWVANXEAPOGQVUYLLAHTXCVCRPQIXYVLPVRIMBHDAORFDJCQYEFBXINFCJLJJHRWSBWKTTXBGXQCUSYSZZYFTBMTRRVMAZLOPYRXPLBRJZJXN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.18333399435468156);
    msg.setSource(58321U);
    msg.setSourceEntity(136U);
    msg.setDestination(21688U);
    msg.setDestinationEntity(46U);
    msg.type = 52U;
    msg.error.assign("XHLEIDPWRDXAXQNUADGYIIBBGWZLFVDIBPRRAVDFEAONCASXWQGAOTJJECJMYEHHWJPKLTZCYPBPKVEVKCXLTUWSRZMKUCNXUFESOWTTZEDPUGRRVIFCSTQXFYYSYZSSTFMZXOHVRKYNQRUBNGBMWUBOEBLBTRKWJVSNTFQNLFWNIPOQJZJAUKSOGUZHIIOEHNZKILPC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.3325061064252227);
    msg.setSource(11468U);
    msg.setSourceEntity(150U);
    msg.setDestination(7661U);
    msg.setDestinationEntity(188U);
    msg.type = 247U;
    msg.error.assign("CTFQUUQUYIDHLUFGABEYWJZYGVPMWAVWMEFJXREJBPYUJTVCERVLZPFLSMAOBJDBBDELSFDSPWVINAWACGVNRIZJZACMXPKFFXHNCDZMXGBEPEFQIDUUCHCYYTKAIMXCSCXGROGVLHAIDDSRTRQKWLJCZZQUNLKRWBFTAOQUKBLLOXHRVYGIEYTSHXGMIOHOLPRMKPSMQGIFPJNRGNKWDNHZAUHKWVKEOQDOQSHWNVXOM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.9838807947140012);
    msg.setSource(52561U);
    msg.setSourceEntity(32U);
    msg.setDestination(61712U);
    msg.setDestinationEntity(117U);
    msg.seq = 45056U;
    msg.sys_dst.assign("LTSSHCXGFDWYMYSMKFKYORIRFXQQDEXHEEYAQXIPOWZHUJNOGPKHIRYUASMYJBKSGTFNYOKUKWLSBPHRIOKHXNECAOQUTVA");
    msg.flags = 50U;
    const signed char tmp_msg_0[] = {4, -46, 89, 37, -11, -81, -65, 8, 49, -23, 10, -60, -52, -96, -41, -73, 38, -100, 33, 88, 88, 39, -10, -21, -75, 114, 45, -108, 54, -86, -79, 108, -113, 76, 66, -85, 48, -88, 111, -55, -93, 104, 84, -29, 13, -125, 11, 40, -65, 97, -90, 95, -6, 121, 117, 18, -19, -66, 105, 40, 64, 122, 13, -35, -120, -6, 102, 84, 85, -38, -50, -46, -12, 104, 106, -60, 82, 22, 49, 91, 95, -78, 79, 106, 41, 35, 106, -8, 57, -1, 3, 25, -101, 81, 71, -32, -73, 113, -22, 36, 11, -46, -99, -6, 82, -74, -30, -81, -96, -3, 39, -37, 90, -36, -102, -123, -111, -86, -3, -66, 41, -24, -8, -43, 80, -8, 108, 85, -5, 44, 91, -99, 97, 38, -40, -77, 22, -20, -10, -6, -31, 93, 25, -128, -41, 69, 22, 106, 121, 92, -80, -111, 120, 34, -91, 69, 27, 104, 49, -14, -44, 52, -21, 78, 33, -39, -12, -41, -20, 85, 38};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.6774362822057947);
    msg.setSource(58525U);
    msg.setSourceEntity(168U);
    msg.setDestination(53755U);
    msg.setDestinationEntity(240U);
    msg.seq = 54937U;
    msg.sys_dst.assign("EZDALBYUPPTKPUHYODRUWSCKZCMPMWXRJXOKAFOHQDBQQNLCAKAWECYYJYHNDNSSJAVRFPPPBTLQEQSZUHTUDMNJCGVGKGNDOIIFJARHVFWJTNNDLGNSZVNDTYLIOGLMSQGIQCLKTWTYLBYXSBHWMSFRPWVIVZQLEPVNFIEMZUITKXJWEMRCOOFXYPXRGRESUTSKIBZZHKJBVJBEOXUQUEHQAFTEYKZCOAVCDMAMMGVXIZ");
    msg.flags = 131U;
    const signed char tmp_msg_0[] = {27, -36, 16, 43, 10, -86, 77, 26, -67, -35, 31, -111, 60, -23, 41, -97, 59, 37};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.43858348333541197);
    msg.setSource(47096U);
    msg.setSourceEntity(121U);
    msg.setDestination(57113U);
    msg.setDestinationEntity(15U);
    msg.seq = 57174U;
    msg.sys_dst.assign("DMUISBIWKNXJXLHPDYXKPCNRGQJLFTTZYFGTEJVOWRP");
    msg.flags = 194U;
    const signed char tmp_msg_0[] = {46, 52, -71, 79, 65, -60, -43, -116, -112, -28, -109, 83, -80, 72, -87, 97, -79, 8, -106, -29, 109, 47, 18, -8, 24, 40, -92, 39, 35, 93, 77, -21, 8, -13, -92, 38, 89, -45, -94, -124, -101, -34, -124, 17, -77, -24, -10, 122, -73, -68, -107, 67, 107, -42, -72, -69, -50, 72, 93, -122, 1, 90, 126, -28, -13, -64, -119, -35, 81, 15, -99, -120, -56, 108, -84, -16, -94, 63, 31, 76, 72, 73, 8, 107, 25, -6, -128, -118, -127, 84, -41, 110, 69, -120, 61, 39, -112, 37, 7, 104, -20, 59, 91, 80, 90, 113, -19, 106, -41, 62, 64, 125, -120, 9, 34, -77, 29, 49, -101, 64, -70, -46, -75, -93, -102, 14, 2, -52, 109, -30, 52, -18, -28, 48, 39, -35, 67, -73, -9, -11, 40, 102, -9, 95, 84, -114, -104, 41, 116, -20, -57, 80, 27, 56, 14, -42, 25, 125, 97, 97, 55, 47, 82, 20, 77, -105, 22, -103, 59, -36, -29, -90, -61, 16, 62, 54, 124, -1, -9, 103, 27, 102, -31, -78, -39, -18, -71, -94, 125, -23, 92, 45, 125, 43, -64};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.49629560904035097);
    msg.setSource(8707U);
    msg.setSourceEntity(32U);
    msg.setDestination(31989U);
    msg.setDestinationEntity(239U);
    msg.sys_src.assign("ZCFKEYGUIKKMLRMIYLMUEXYLZSVZNNRJGQDCYQCKSONZJVWHFCSDBXYUMVPAXNQPWSDWLBAWLDVXKCFEOQRARQBVOPXKMDOQBJWLYCTTOSHNZEVDILBHKCHDCGDEHLKGTNZVTSWEOEBAAOBNUTMYRSSLXIPYJPTIGMEJIZZWM");
    msg.sys_dst.assign("YZDWPPFVQLIVCUDDZWUUAKYVYAGKTKUOYNKHRQMNEYHGOMYZTEZIPGPWOTVFDWDRRNSUMLASKKSYXNHBIQARXWECFOZCJWLUCECHUAJKNKJBZDPVTGXWFMSEJQUNCEIGUWLFVDJJHBREAXFETBHSMETRMOGHISOPRRHXQFLTALHOMDFNJMBPTZZLLUKLOBYPTCXYQFQIPWACMGIPBTSJSXFHCRVBSA");
    msg.flags = 183U;
    const signed char tmp_msg_0[] = {34, -123, -8, 4, -93, 120, 78, -80, 74, 69, 106, -24, -104, -58, -126, 53, 93, 13, 103, -121, -15, -92, -116, -80, -32, 63, 50, -64, -7, -93, -104, 34, 47, -121, -65, -68, -128, 72, 119, -27, 117, 86, -78, 103, 88, 27, -24, -52, -108, -102, 110, 10, -58, -16, -61, -120, 1, 29, -60, -109, 58, -114, 80, 25, 38, 68, 11, 6, -58, 14, -52, 72, 16, -7, 37, -3, 112, -112, -56, -5, 54, 124, -37, 68, -113, -31, 15, 3, 114, 119, 73, -117, -8, 112, 15, 101, 5, -61, 57, 54, -65, 25, 57, 97, 91, -34, 21, -69, -48, 20, 14, 69, 4, 29, -124, 80, 40, -91, -84, -21, -19, 28, 124, -97, -60, 71, -9, -94, -20, -82, 72, -21, -128, 112, 114, 119, 81};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.8636818483374261);
    msg.setSource(6387U);
    msg.setSourceEntity(50U);
    msg.setDestination(47976U);
    msg.setDestinationEntity(138U);
    msg.sys_src.assign("MYHNKVNLBBWJWXMJILELKGFXJZJEXEVZMOQYNFYBDSQGVHSWHGBOCZBXFLFETMURCLMPGUYDKNQAKICKGSIZNETWGXHIPBLFQZOWGAKLSCEHDYHEURBKQXQZJGIURTSSJFTTODVMPPICPUSNVUIDWKAAOLQRDFWOVOAIXZYTTHDWJPEIJADHLPVQGPUTSYDSMGRCQAOOAYWVHBVMKCTPEXTUCIAFWMRDYQZMCRONNABYR");
    msg.sys_dst.assign("LHXHDUVFSEVVAEXZDPBRIPXQSTNJDVMXWKWXWDWOWZKVXNLWVNBBFCHVQORTZKLFOQMPRCIJMAEGCJQCRILC");
    msg.flags = 247U;
    const signed char tmp_msg_0[] = {81, -80, -89, -89, 21, 34, 108, -107, 114, -85, 115, -44, -37, -39, 89, 5, -89, -125, 124, 22, 99, -110, -58, 89, 85, 91, -103, 12, 120, 20, -86, -76, -101, 6, 82, -72, 78, -78, -79, 23, -55, -98, 112, 33, 67, 70, -62, 76, -53, -106, -122, -30, 121, -107, 2, -9, -64, 113, -67, -126, -75, 58, -60, -127, 28, -87, 98, 115, -3, 34, 115, -17, -1, -6, 60, 43, 12, 53, 118, 75, 33, 23, 48, -60, 112, -108, 20, -16, 5, -91, -9, 76, -54, 110, -110, -65, -38, -86, 22, 81, 95, -18, -51, 19, 45, 34, 67, 16, -28, 12, -48, -45, -76, -123, -64, -109, 50, -93, 54, -84, 114, -87, -84, 100, -6, 16, -46, -71, 59, 97, 120, -101, -99, 110, 5, 3, 32, -71, -60, -94, 34, -123, 6};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.4021159841799181);
    msg.setSource(50086U);
    msg.setSourceEntity(162U);
    msg.setDestination(7162U);
    msg.setDestinationEntity(164U);
    msg.sys_src.assign("AIKOZYOQDFTOXDHRCXPWSCUFQPOVHYTNLBVEIZFUVRDWOBNONPZARBXMDIAJCTKKJEKCDGRJCNZXEALJAWTZUBWQYQSPMLMBXBCDHPMQTLWUVIVEXGXJYWADKFUBOGVKCAWLUQLKGSYIMPQUGITXRCDJFMTQTFKVNXPZGTYORZDSZCHNYYMLCKJENOVIBRIQKZWUSBEBEZAGDN");
    msg.sys_dst.assign("QDJNIRZAKVHLFAGQIFSUOZHZNLLNCSVIF");
    msg.flags = 196U;
    const signed char tmp_msg_0[] = {28, 2, -59, -105, -47, 47, 91, -9, 32, -64, 61, -78, 62, 19, 62, 115, 3, 54, -56, 54, -23, 109, 44, 99, 54, 49, 103, 12, 60, 94, 22, 80, 104, 32, -56, 39, -55, 26, 60, -66, 11, -79, 23, -22, 80, 95, 37, -56, -31, -77, 123, 76, -118, 100, 57, -127, -54, -79, -89, 74, 121, 73, 17, -4, 108, 85, -102, 22, 107, -101, 86, -45, -5, -96, -51, -22, 80, -10, 120, -74, 92, -56, -15, 105, 103, -103, 125, 117, 104, 61, 10, -92, 62, 87, 44, -53, 79, -121, -98, 67, 50, -120, -57, -21, -20, 85, 44, 77, -30, 63, 3, -68, -10, 116, 32, -107, 7, -86, -35, -70, -60, 99, 46, 90, -123, -43, -13, 70, 78, -28, 26, -124, 102, -4, -21, -70, -98, -31, 85, -91, 55, -73, -52, 26, 69, -43, 39, -35, -65, 59, 71, 117, -27, -61, 9, -82, 44, 125, -29, 108, -1, -62, 104, 122, 73};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.6262779249560255);
    msg.setSource(52416U);
    msg.setSourceEntity(127U);
    msg.setDestination(29212U);
    msg.setDestinationEntity(146U);
    msg.seq = 50165U;
    msg.value = 244U;
    msg.error.assign("EULLUVJIZCKRTRVIQUPKPRKGFWFUAGQTOLVNJGTOZMWZDHAOPYCRBYPXLWIXGKNYSCWOFQLFEDEPDEEINIHHHAYIXJPNDBOVRMZBCPVNZRJHFFWCPDTPXAHJTVSCHANSKRCABBSQMXDZYBUZKXSCMWISRNRJWGMGJATWNOXTPEFJQGKNDGMRDOFWUUZEXGAXYBJEMC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.35563670539725556);
    msg.setSource(6324U);
    msg.setSourceEntity(76U);
    msg.setDestination(41614U);
    msg.setDestinationEntity(52U);
    msg.seq = 59866U;
    msg.value = 93U;
    msg.error.assign("KTDVVLACMTZGUXOEDPCHURIUEBRISQVTVIBNXWQRNUNNMMGAKSAVMZWWPOYVWSAELETPUEEIJTYVMFIGQJJPUNZROSRQXSSMWJGKLTIQNFEEXZHSZCX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.45554235246139896);
    msg.setSource(12397U);
    msg.setSourceEntity(64U);
    msg.setDestination(64484U);
    msg.setDestinationEntity(169U);
    msg.seq = 21345U;
    msg.value = 237U;
    msg.error.assign("YFIGOAFTQSHEPKTCNSCXHZKMRUBFKLJTPKBNAQZPKZDAVFPBDGAJYPEMYLTWENSBFNXCQZJJTWPBIZBPEVEUJXAIFSSZIWMNGHAUGZDEQDQIURGWVGQUIMVUDAOCTXIYMALOIHRLHCKCGRGDEWTBOXHLCJOKZLSEBCMYQDYRULDJVDHGNYDIJNFOEVYMXPVVSSPKGTOOCFUMKB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.2745774153498739);
    msg.setSource(58815U);
    msg.setSourceEntity(96U);
    msg.setDestination(53565U);
    msg.setDestinationEntity(86U);
    msg.seq = 38915U;
    msg.sys.assign("PGWVCJKEZSDXSOFBSYABYKSDMNZCGTUEJHTDPOQMLTIMEVTMZQKKOLQCMZNQCWWGSEYPWXRJBZTQPSWCPYXNIDZ");
    msg.value = 0.6888384838303223;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.6425475289367613);
    msg.setSource(51399U);
    msg.setSourceEntity(100U);
    msg.setDestination(39942U);
    msg.setDestinationEntity(199U);
    msg.seq = 12817U;
    msg.sys.assign("VDWAFYPFRWPQRWVWLPTSERQXGEJFTTUIJDTULDCXSNQZQMUFXJYLDMIYUWVDHOPKUWFDNCAXBCMGRYZKSHKGDOPJBBMNXIKSNCPNSMEQXYXFBKZQIBJVVVQOKIOHKALEMKHGBZRUEBHPLZZUUEONJYMYZTNYXJTXHPLPASARFLYSFYVIATGXATLNJRAMEASZEOAO");
    msg.value = 0.40876933533465254;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.7809463286918049);
    msg.setSource(64780U);
    msg.setSourceEntity(36U);
    msg.setDestination(23070U);
    msg.setDestinationEntity(131U);
    msg.seq = 52302U;
    msg.sys.assign("NJFSMAORYMBHEIKZHHRXYGXNBCAKAQWOQWOQKTCPNBGDCUFVODUNSNUUDNEBTWYXZTYEPYRVQCMAPFVECTBWIDYHWVQDXOJYROFQVEUKTK");
    msg.value = 0.5078140840763232;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.9934354978842673);
    msg.setSource(1677U);
    msg.setSourceEntity(223U);
    msg.setDestination(55270U);
    msg.setDestinationEntity(40U);
    msg.seq = 33624U;
    msg.sys_dst.assign("MPZIKCCCTJEPUFGYUHEZDUFHUBJOXJRYKTMFUFD");
    msg.timeout = 0.32296114494975203;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.9909904931302786);
    msg.setSource(25170U);
    msg.setSourceEntity(159U);
    msg.setDestination(32947U);
    msg.setDestinationEntity(35U);
    msg.seq = 45891U;
    msg.sys_dst.assign("ORSHCBCYTXOFQYXJKQCXJFTRBYWDAMOQFFGZPHTNKJFEXMKHPBHHNLBZVOFTNCNLCDXNRZUUNLCMGAVBWEJTEKBQSRDICTFPGXLFICUOWKJUXEBHIFAPEOSAWGXEOIIDYGIHEQWHJUWBZOQKNWPLZKMGSSVPMEWRJRYPVKBXMRDJGYJKNGOYSTJDMAKITDQHYNASGYQCDXPRBRUIMTTMRLWQSVELC");
    msg.timeout = 0.16587432802813018;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.18714250169227042);
    msg.setSource(26569U);
    msg.setSourceEntity(87U);
    msg.setDestination(23183U);
    msg.setDestinationEntity(25U);
    msg.seq = 44993U;
    msg.sys_dst.assign("XJUHJNRERSHCOPBDRAWHMKSADBKOACDRIFLRZKWPSVVPCOJGUMXSMXSBWDLIREBNYSTYV");
    msg.timeout = 0.05153018356923089;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.7604494240993296);
    msg.setSource(60838U);
    msg.setSourceEntity(51U);
    msg.setDestination(8290U);
    msg.setDestinationEntity(230U);
    msg.action = 26U;
    msg.longain = 0.09221894028233402;
    msg.latgain = 0.8530436151473736;
    msg.bondthick = 2608281388U;
    msg.leadgain = 0.013427244024833973;
    msg.deconflgain = 0.6485312778924;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.13987900077937987);
    msg.setSource(46107U);
    msg.setSourceEntity(130U);
    msg.setDestination(11153U);
    msg.setDestinationEntity(131U);
    msg.action = 56U;
    msg.longain = 0.17560132586178623;
    msg.latgain = 0.5905414985241036;
    msg.bondthick = 2477285697U;
    msg.leadgain = 0.7961751914536008;
    msg.deconflgain = 0.17052490778091967;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.18698879604298446);
    msg.setSource(16829U);
    msg.setSourceEntity(246U);
    msg.setDestination(60556U);
    msg.setDestinationEntity(14U);
    msg.action = 108U;
    msg.longain = 0.7704832632453167;
    msg.latgain = 0.02242285985560155;
    msg.bondthick = 3434586173U;
    msg.leadgain = 0.6774584296457029;
    msg.deconflgain = 0.21798425223876294;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.341533275047597);
    msg.setSource(46007U);
    msg.setSourceEntity(129U);
    msg.setDestination(52680U);
    msg.setDestinationEntity(128U);
    msg.err_mean = 0.7398637391773377;
    msg.dist_min_abs = 0.7572433500393242;
    msg.dist_min_mean = 0.4290461193161952;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.15071658564080048);
    msg.setSource(6400U);
    msg.setSourceEntity(205U);
    msg.setDestination(4952U);
    msg.setDestinationEntity(143U);
    msg.err_mean = 0.17730647361300267;
    msg.dist_min_abs = 0.9377104934282956;
    msg.dist_min_mean = 0.5834412426523282;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.6106048925586905);
    msg.setSource(17982U);
    msg.setSourceEntity(88U);
    msg.setDestination(46348U);
    msg.setDestinationEntity(28U);
    msg.err_mean = 0.18541240595765784;
    msg.dist_min_abs = 0.42852219609404796;
    msg.dist_min_mean = 0.5879293460153435;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.29367223633544715);
    msg.setSource(46620U);
    msg.setSourceEntity(226U);
    msg.setDestination(22533U);
    msg.setDestinationEntity(109U);
    msg.action = 224U;
    msg.lon_gain = 0.6804476021160164;
    msg.lat_gain = 0.28366562413303564;
    msg.bond_thick = 0.1837648082536063;
    msg.lead_gain = 0.7479301113123075;
    msg.deconfl_gain = 0.44769781319432367;
    msg.accel_switch_gain = 0.8598618121274342;
    msg.safe_dist = 0.5163661344698998;
    msg.deconflict_offset = 0.12770559377599444;
    msg.accel_safe_margin = 0.493655181760865;
    msg.accel_lim_x = 0.3124343888755018;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.6210888303267315);
    msg.setSource(17958U);
    msg.setSourceEntity(226U);
    msg.setDestination(15002U);
    msg.setDestinationEntity(79U);
    msg.action = 222U;
    msg.lon_gain = 0.6541520939767731;
    msg.lat_gain = 0.9080437545140067;
    msg.bond_thick = 0.7066136936586376;
    msg.lead_gain = 0.920304998285674;
    msg.deconfl_gain = 0.7298137714512795;
    msg.accel_switch_gain = 0.8878810697084397;
    msg.safe_dist = 0.15600797733985872;
    msg.deconflict_offset = 0.6498604076178587;
    msg.accel_safe_margin = 0.26061692031938266;
    msg.accel_lim_x = 0.9496417877357904;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.6352320646554623);
    msg.setSource(42905U);
    msg.setSourceEntity(35U);
    msg.setDestination(11847U);
    msg.setDestinationEntity(118U);
    msg.action = 218U;
    msg.lon_gain = 0.051344298916667586;
    msg.lat_gain = 0.6331155464919359;
    msg.bond_thick = 0.9137840148344665;
    msg.lead_gain = 0.9849720590283236;
    msg.deconfl_gain = 0.7466318342279864;
    msg.accel_switch_gain = 0.5958879503466561;
    msg.safe_dist = 0.48367374597715806;
    msg.deconflict_offset = 0.8277966180004367;
    msg.accel_safe_margin = 0.007554490955995696;
    msg.accel_lim_x = 0.627763482530714;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.6920739595506595);
    msg.setSource(42762U);
    msg.setSourceEntity(4U);
    msg.setDestination(22810U);
    msg.setDestinationEntity(86U);
    msg.type = 158U;
    msg.op = 26U;
    msg.err_mean = 0.622599227606684;
    msg.dist_min_abs = 0.3739125761698596;
    msg.dist_min_mean = 0.006274145364591033;
    msg.roll_rate_mean = 0.665530687397477;
    msg.time = 0.7907174576357638;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 204U;
    tmp_msg_0.lon_gain = 0.6328509838835317;
    tmp_msg_0.lat_gain = 0.4878907312773716;
    tmp_msg_0.bond_thick = 0.6409497440853503;
    tmp_msg_0.lead_gain = 0.587619324192127;
    tmp_msg_0.deconfl_gain = 0.4373595378889391;
    tmp_msg_0.accel_switch_gain = 0.057435117372547695;
    tmp_msg_0.safe_dist = 0.7787063671542573;
    tmp_msg_0.deconflict_offset = 0.24225146488545723;
    tmp_msg_0.accel_safe_margin = 0.25987929325323234;
    tmp_msg_0.accel_lim_x = 0.7478168707418262;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.43997339276918246);
    msg.setSource(41186U);
    msg.setSourceEntity(93U);
    msg.setDestination(54563U);
    msg.setDestinationEntity(194U);
    msg.type = 224U;
    msg.op = 163U;
    msg.err_mean = 0.7984663523627711;
    msg.dist_min_abs = 0.10970390648188477;
    msg.dist_min_mean = 0.8225922000268208;
    msg.roll_rate_mean = 0.487279932756159;
    msg.time = 0.24834810330740165;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 7U;
    tmp_msg_0.lon_gain = 0.9433332918502781;
    tmp_msg_0.lat_gain = 0.30242891442130626;
    tmp_msg_0.bond_thick = 0.9331944397970521;
    tmp_msg_0.lead_gain = 0.12861744385939067;
    tmp_msg_0.deconfl_gain = 0.2427456346044249;
    tmp_msg_0.accel_switch_gain = 0.6271178254483759;
    tmp_msg_0.safe_dist = 0.4966506285516562;
    tmp_msg_0.deconflict_offset = 0.5012663937385654;
    tmp_msg_0.accel_safe_margin = 0.7830242796369095;
    tmp_msg_0.accel_lim_x = 0.3943773920337116;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.28858922288922073);
    msg.setSource(16642U);
    msg.setSourceEntity(79U);
    msg.setDestination(38460U);
    msg.setDestinationEntity(20U);
    msg.type = 227U;
    msg.op = 45U;
    msg.err_mean = 0.5788642656080197;
    msg.dist_min_abs = 0.4751569161740238;
    msg.dist_min_mean = 0.6484016488815751;
    msg.roll_rate_mean = 0.9580796224179455;
    msg.time = 0.5649620276476309;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 124U;
    tmp_msg_0.lon_gain = 0.06818016042394848;
    tmp_msg_0.lat_gain = 0.6055996823414712;
    tmp_msg_0.bond_thick = 0.4144239158163181;
    tmp_msg_0.lead_gain = 0.6599761513307802;
    tmp_msg_0.deconfl_gain = 0.7457286749652559;
    tmp_msg_0.accel_switch_gain = 0.8389792276494906;
    tmp_msg_0.safe_dist = 0.5338874746096003;
    tmp_msg_0.deconflict_offset = 0.9303910007838185;
    tmp_msg_0.accel_safe_margin = 0.7020733806037328;
    tmp_msg_0.accel_lim_x = 0.5029417026668908;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.2137650021194446);
    msg.setSource(15328U);
    msg.setSourceEntity(250U);
    msg.setDestination(19088U);
    msg.setDestinationEntity(57U);
    msg.lat = 0.48591167933059587;
    msg.lon = 0.22361828388632754;
    msg.eta = 2402007683U;
    msg.duration = 29764U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.6236707384283644);
    msg.setSource(60788U);
    msg.setSourceEntity(168U);
    msg.setDestination(21084U);
    msg.setDestinationEntity(145U);
    msg.lat = 0.6547508005655934;
    msg.lon = 0.05170158764138055;
    msg.eta = 1162270014U;
    msg.duration = 20892U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.8501891353591464);
    msg.setSource(45381U);
    msg.setSourceEntity(226U);
    msg.setDestination(3348U);
    msg.setDestinationEntity(101U);
    msg.lat = 0.2665118669427191;
    msg.lon = 0.5755875602316476;
    msg.eta = 4257862042U;
    msg.duration = 39035U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.45095692899240003);
    msg.setSource(45310U);
    msg.setSourceEntity(34U);
    msg.setDestination(61496U);
    msg.setDestinationEntity(180U);
    msg.plan_id = 29827U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.9633206890231141);
    msg.setSource(45464U);
    msg.setSourceEntity(211U);
    msg.setDestination(55431U);
    msg.setDestinationEntity(80U);
    msg.plan_id = 52025U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.6784196506378001);
    msg.setSource(24864U);
    msg.setSourceEntity(6U);
    msg.setDestination(13015U);
    msg.setDestinationEntity(226U);
    msg.plan_id = 43607U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.6594302395838979;
    tmp_msg_0.lon = 0.8262627530239814;
    tmp_msg_0.eta = 3302877603U;
    tmp_msg_0.duration = 23951U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.39137022501609675);
    msg.setSource(39031U);
    msg.setSourceEntity(136U);
    msg.setDestination(35409U);
    msg.setDestinationEntity(34U);
    msg.type = 1U;
    msg.command = 131U;
    msg.settings.assign("UAZLHWBXEKTSJWGCOAUEZWOLZSDHIFMSNMPDUMCVMFMZBKNIYNDQDWVXSGMCBFMNCGCKQRUJBTIZIEILHXVKAAPECYVWXAVIEZYUCPGYIMLSSLWCRBODNDFENHBPJRPSYPGKKNNCHOJUHHAEKAGHTRTSYLEXOSDPPWOQAFJWREBGXWRGHTDPMQKQJKVOXSRRJFFDOY");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 40452U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("ZNDEYNCBVOVMOBUTXOXCGMXYEWYXBHXGPGNIJUEVLGXAMYKAJPKJLOJPIDCDSTDXHJNLLGGAMYSPNYGWVZWTAQALZALRYFECSWHQBZSHTZIRILZZIYLEJKVWSFBDNORMUWMBUZCW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.21584368684053956);
    msg.setSource(5335U);
    msg.setSourceEntity(219U);
    msg.setDestination(59414U);
    msg.setDestinationEntity(158U);
    msg.type = 60U;
    msg.command = 101U;
    msg.settings.assign("OHCLKLOEADZQWWRSYEV");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 53708U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("PKUUGVKQWXOYERIBQBDZHOHSAWHEJATUCWKBKEIIDKWWDBOOXBZRMFTGFP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.07564923792381717);
    msg.setSource(46011U);
    msg.setSourceEntity(55U);
    msg.setDestination(64735U);
    msg.setDestinationEntity(14U);
    msg.type = 101U;
    msg.command = 59U;
    msg.settings.assign("KPDECDTKVG");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 62403U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("VTPEPMQHXCZHEGNTNDNRWRSPDZLJRCYOBBTLGPWXATAMMQEBMIPKJLJWGVHLLTXHLUIQKMJDHNOOSFUERTWSCXPRVMI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.11480784203746763);
    msg.setSource(39811U);
    msg.setSourceEntity(73U);
    msg.setDestination(10596U);
    msg.setDestinationEntity(45U);
    msg.state = 239U;
    msg.plan_id = 20739U;
    msg.wpt_id = 149U;
    msg.settings_chk = 19U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.9863322899136084);
    msg.setSource(5143U);
    msg.setSourceEntity(246U);
    msg.setDestination(52134U);
    msg.setDestinationEntity(50U);
    msg.state = 122U;
    msg.plan_id = 62327U;
    msg.wpt_id = 125U;
    msg.settings_chk = 51832U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.9587906090417828);
    msg.setSource(61256U);
    msg.setSourceEntity(57U);
    msg.setDestination(57181U);
    msg.setDestinationEntity(18U);
    msg.state = 132U;
    msg.plan_id = 16392U;
    msg.wpt_id = 96U;
    msg.settings_chk = 39118U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.24751928602522966);
    msg.setSource(19165U);
    msg.setSourceEntity(229U);
    msg.setDestination(46217U);
    msg.setDestinationEntity(185U);
    msg.uid = 158U;
    msg.frag_number = 53U;
    msg.num_frags = 203U;
    const signed char tmp_msg_0[] = {-16, 103, 29, -87, -95, -15, 112, 43, 81, 120, 80, -96, -21, 80, -9, -34, 22, 67, -33, 62, 20, -58, 27, -29, 113, -69, 9, -1, 28, 63, -9, 77, 107, -107, -27, -14, 123, 70, 126, -99, 21, 68, 55, -124, 99, 48, 96, -9, 12, 64, 5, -29, 107, -27, 34, -109, -114, -126, 58, -80, 108, 80};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.42629512175075224);
    msg.setSource(51035U);
    msg.setSourceEntity(177U);
    msg.setDestination(51412U);
    msg.setDestinationEntity(64U);
    msg.uid = 53U;
    msg.frag_number = 156U;
    msg.num_frags = 120U;
    const signed char tmp_msg_0[] = {-59, 99, -73, -116, 79, -100, -62, -37, 92, -48, -101, -2, 22, 42, 125, 0, 102, -16, 82, 120, -41, 86, -97, -7, 1, 92, 25, -118, -115, -14, -65, 92, -117, 58, -70, -122, 60, -92, -4, -12, -91, 36, 58, 120, -127, 104, -1, 11, -103, -40, -86, 15, -35, -37, -48, 62, -22, -32, -85, -123, -27, -96, -96, 26, -4, 20, 59, 1, -24};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.6709903217858755);
    msg.setSource(34113U);
    msg.setSourceEntity(154U);
    msg.setDestination(59900U);
    msg.setDestinationEntity(26U);
    msg.uid = 50U;
    msg.frag_number = 252U;
    msg.num_frags = 197U;
    const signed char tmp_msg_0[] = {-4, 51, 36, 54, -110, -47, -42, -103, 112, -13, -101, 101, 115, -124, -71, 99, -15, -60, -106, 3, -29, -34, 56, -72, 85, -3, 83, -123, 21, -21, 100, 120, 91, 69, -91, -91, -110, -110, -113, 72, 126, -26, 79, 14, 123, -109, 49, -122, -97, -73, 124, -37, 6, -14, 6, 59, 41, -20, -57, -127, 45, 81, -72, -76, 35, -67, -92, -43, -44, -41, 47, 25, 20, -60, -5, 68, 50, 72, -56, 52, 107, -55, -17, -126, 79, 18, -90, 29, -43, -45, 46, -12, -75, 44, 11, -120, -101, -69, 101, 82, -111, 26, -84, -84, -6, 87, -123, -37, 13, -111, -68, -16, 7, -48, 97, 69, 52, -36, 79, -70, -7, 8, 9, -32, 36, -84, -12, -98, -117, 49, 16, -75, -54, 55, 4, 121, -114, -60, 94, -40, -95, 59, -49, -89, 109, -49, -83, -75, -41, -28, -20, 30, -53, 57, 40, 90, -108, -121, -90, 116, 116, -68, 105, -105, -114, -97, -2, 7, -63, 17, 109, 81, 82, -86, -89, 49, -113, 48, 102, -52, -39, 5, -32, 24, 77, 44, 83, 46, 101, -54, 53, -73, -8, 37, 43, 23, 118, -119, 69, 94, 99, 26, -5, -61, 47, -74, 15, -72, 29, 82, 126, -92, 92, 46, -55, -51, 93, 90, 110, 61, 87, -30, -36, 89, -115, 37, 47, -110, -88, -54, -36, -20, -22, -1, 114, -81, -34, -43, -68, 115, 120, 64, -59, -3, 71, -95, 45, 71, -117, -65};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.4557938511774744);
    msg.setSource(181U);
    msg.setSourceEntity(142U);
    msg.setDestination(6541U);
    msg.setDestinationEntity(228U);
    msg.content_type.assign("RHITNPNCUHRNFSYXLBZMDUTQGUX");
    const signed char tmp_msg_0[] = {-45, 114, -69, 54, 81, -70, 126, -103, -125, -58, -4, -76, 27, 45, -11, 59, -73, 32, -103, 33, -118, -18, -75, -76, 126, -80, 84, 29, -13, -22, 2, -12, 20, -76, 39, 54, -30, -56, -16, 61, -87, -128, 24, -111, 33, -107, -46, -98, -85, -120, 59, -55, 23, -108, -126, -87, -119, -3, 105, -25, 72, 84, 47, 72, -46, -118, -90, -27, 37, -102, 115, -20, 11, 24, 91, -24, 37, -55, -38, 22, 83, 17, 49, -21, 59, -79, 51, 110, -84, -123, 33, -15, 25, -46, 26, 12, -30, -47, -124, 30, 47, -110, 52, 85, 27, 68, -89, 6, 123, -90, -119, 87, -18, 95, -28, 103, -1, -41, 22, -128, -67, -32, 19, 53, 102, -34, 48, 23, -109, 66, 23, -89, -19, -46, 101, 77, 80, -11, 24, -2, -115, -26, 65, -5, 31, 53, 19, -48, 28, 116, -99, 124, -64, -111, -73, -14, 97, -104, 15, -48, 5, 94, 1, 67, 93, -59, 17, 6, 66, 111, 65, 87, -4, 91, -3, 33, -80, 123, 59, -114, -128, -96, -74, -6, 98, -48, 13, -80, 5, 117, -9, -92, 20, 24, 96, 54, -29, 30, -69, -109, -27, 23, 35, -111, -121, -32, -87, 126, 64, 122, -128, -13, 71, -69, -122, -12, 53, 9, 88, -49, -76, 108, 83, 120, -8, 76, 57, -67, -53, -27, 51, 87, -7, -31, -12, 100, 121};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.7321077079989237);
    msg.setSource(9717U);
    msg.setSourceEntity(71U);
    msg.setDestination(21728U);
    msg.setDestinationEntity(132U);
    msg.content_type.assign("POVECXUHJRBTNLGNIULCGPOUALKEQPAABHIGPMPETRIXXXYMJIHGWQOHAOYTVQGLUDXGJJJIZHQVCGSINUSTUSFREASJZLOYNTDBDMFKFPMRWVGASCQCEBBFKYOKPFHEVBKRFWHXEIVZXWSZAUMXRPRZTNMZBWEHRLDVKTWJHCDNMTYGQKJ");
    const signed char tmp_msg_0[] = {-2, 91, -75, -38, 76, -38, 101, 35, 50, 41, 108, -52, 60, 56, -15, 90, 76, -36, -17, -68, 39, -60, 73, 2, 102, -92, 126, -35, -84, 48, 102, 40, -50, -37, 46, -68, 122, 112, -30, -23, -56, 120, 110, 53, 47, -123, -40, 105, 2, -104, -39, 66, 117, -13, -47, -86, 25, 63, -69, 34, -57, -111, -100, 53, 92, 36, -5, -98, 2, 4, 97, -115, -46, 64, -50, 83, -7, -18, -47, -45, 5, -23, 26, -97, 38, 65, 33, -43, -33, 18, 91, -43, 117, 97, -93, -24, 77, 75, 9, -127, 86, -67, -46, 3, -4, 23, -7, -97, -118, -62, -92, 68, 95, -108, 84, 125, 79, -108, 114, 56, 30, -80, 70, 77, -20, 51, -36, -87, 86, -64, -118, -48, 114, 69, -32, 116, 11, 113, 60, 86, -46, -49, -84, -93, 12, -20, 42, 87, 29, 78, 81, 85, 88, -32, -125, 23, 20, 7, 71, 71, 7, 28, 84, 125, 76, 5, -80, 101, -37, 112, 19, -11, 67};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.7675987081979461);
    msg.setSource(22276U);
    msg.setSourceEntity(99U);
    msg.setDestination(47213U);
    msg.setDestinationEntity(164U);
    msg.content_type.assign("TUFGACHWSOXGQIYY");
    const signed char tmp_msg_0[] = {43, 116, -80, 90, 30, -117, 33, 44, -124, -102, -11, 111, 23, -80, -18, -57, -118, -120, -31, 20, -103, 77, 103, 60, 38, 11, 46, -104, 44, 29, -110, 31, 81, -46, -107, -41, 80, -96, 66, -61, 2, -14, 89, 34, -48, -13, 37, 32, -53, -1, -96, 94, -64, -74, -7, -14, 91, 105, 96, 78, 63, 75, 80, 71, -105, -69, -30, -112, 16, -55, 31, -52, -116, -79, 86, -36, -97, 13, 109, -53, 35, 15, 3, -15, 50, -30, -50, -23, 54, -22, 100, -56, -16, 126, -62, 70, 119, 26, 108, 120, 11, -66, 18, 9, 50, 96, -36, -124, 33, -16, 107, 106, 67, 33, 2, 28, 123, 112, 57, 68, -83, 37, 8, -27, -26, -54, -91, 25, 110, 88, 13, 25, 0, -115, -11, 4, 32, 8, 38, -4, -32, -55, 90, -94, 97, 53, -46, 105, 17, 29, -90, 65, 57, 101, 51, 29, 73, -31, 95, 80, -46, 39, 60, -46, -45, 122, -31, -22, 102, 86, 111, -62, 78, -4, 94, -71, 117, 64, -21, 29, -86, -47, -43, -108, -105, -127, -119, -109, -116, 7, -14, -42, -105, 91, 113, 85, 103, -80, -117, 30, -13, 17, 49, -5, 110, -121, 22, 1, -125, 48, -8, -38, -22, -89, 55, 65, 92, -94, -38, -85, -81, -83, 123, -27, -72, 99, 126, -88, 81, 21, 39, -9, 18, 67, 21, -67, -46, -77, 62, 106, 6};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.17017579047735676);
    msg.setSource(12097U);
    msg.setSourceEntity(183U);
    msg.setDestination(6551U);
    msg.setDestinationEntity(236U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.3407611382433734);
    msg.setSource(8072U);
    msg.setSourceEntity(237U);
    msg.setDestination(17564U);
    msg.setDestinationEntity(145U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.935513982819742);
    msg.setSource(34520U);
    msg.setSourceEntity(121U);
    msg.setDestination(22899U);
    msg.setDestinationEntity(131U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.4799983918315165);
    msg.setSource(34305U);
    msg.setSourceEntity(202U);
    msg.setDestination(47787U);
    msg.setDestinationEntity(248U);
    msg.target = 20850U;
    msg.bearing = 0.9682305250481902;
    msg.elevation = 0.4429140572217266;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.5614164661891748);
    msg.setSource(46669U);
    msg.setSourceEntity(7U);
    msg.setDestination(6813U);
    msg.setDestinationEntity(155U);
    msg.target = 60860U;
    msg.bearing = 0.09409457337687166;
    msg.elevation = 0.6924616032492219;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.4987227763479064);
    msg.setSource(54173U);
    msg.setSourceEntity(53U);
    msg.setDestination(20642U);
    msg.setDestinationEntity(212U);
    msg.target = 59828U;
    msg.bearing = 0.8447262972681696;
    msg.elevation = 0.04057612341394512;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.9486858720717747);
    msg.setSource(16267U);
    msg.setSourceEntity(59U);
    msg.setDestination(11302U);
    msg.setDestinationEntity(243U);
    msg.target = 6150U;
    msg.x = 0.009976158725516937;
    msg.y = 0.4712109627635195;
    msg.z = 0.25058648878337175;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.14435044348195214);
    msg.setSource(8869U);
    msg.setSourceEntity(206U);
    msg.setDestination(38403U);
    msg.setDestinationEntity(228U);
    msg.target = 28210U;
    msg.x = 0.11517623151292644;
    msg.y = 0.9546968949591904;
    msg.z = 0.8816887546711974;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.05933436910490053);
    msg.setSource(11209U);
    msg.setSourceEntity(29U);
    msg.setDestination(48348U);
    msg.setDestinationEntity(41U);
    msg.target = 28133U;
    msg.x = 0.013835514221573808;
    msg.y = 0.310660653874436;
    msg.z = 0.5976826682055989;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.5819785150619078);
    msg.setSource(18859U);
    msg.setSourceEntity(8U);
    msg.setDestination(53515U);
    msg.setDestinationEntity(41U);
    msg.target = 33933U;
    msg.lat = 0.19630395706393022;
    msg.lon = 0.018838722674140995;
    msg.z_units = 42U;
    msg.z = 0.6080583482244831;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.7843258069862024);
    msg.setSource(3476U);
    msg.setSourceEntity(216U);
    msg.setDestination(64422U);
    msg.setDestinationEntity(204U);
    msg.target = 22573U;
    msg.lat = 0.8663857421108287;
    msg.lon = 0.8383553667426827;
    msg.z_units = 207U;
    msg.z = 0.07410854159396973;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.3376069213556222);
    msg.setSource(63967U);
    msg.setSourceEntity(202U);
    msg.setDestination(60914U);
    msg.setDestinationEntity(247U);
    msg.target = 52837U;
    msg.lat = 0.9881810587835657;
    msg.lon = 0.746676745115904;
    msg.z_units = 43U;
    msg.z = 0.14483348058376966;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.9168558805682577);
    msg.setSource(11390U);
    msg.setSourceEntity(202U);
    msg.setDestination(39771U);
    msg.setDestinationEntity(133U);
    msg.locale.assign("JBXBJCTVKVSJHKGYRPLALMQYWZNZFWMDBVUVEVNMIFTYYERTQASUPDAFXFVURCABTNQWWGGUCMCMPNWGMOSLINNWOWEXEXCBBEJXPAMEFZRFZSHYLMJBDGPKRLWCKCLOHRNHAHDOXHHMGQWI");
    const signed char tmp_msg_0[] = {102, -94, -4, -123, 51, -39, 1, -25, 91, -103, 42, -77, -9, -75, 9, 88, 12, -77, 80, 105, -4, 24, 49, -89, 119, 95, -115, 54, 40, -98, -14, -67, -4, 108, -69, 11, 102, -1, -18, -111, -47, 126, 32, 116, -97, 72, 92, -88, -85, -12, -127, -88, -69, 48, 95, -7, -95, -106, 76, -25, 5, -85, -30, 64, 98, 60, -77, -44, -111, -23, -72, 38, 82, 55, -89, 99, 108, 48, -6, 42, -62, -81, 96, 15, -3, -52, 77, -53, -112, -11, 6, -25, 92, 61, -58, -72, 21, -103, -82, -86, -9, 39, 117, -106, -73, -30, 12, 79, 7, -113, 95, 57, 44, -35, -42, 107, -24, 99, 32, 65, 15, -89, -41, -61, -86, -66, 12, -97, 70, 42, 66, -18, 19, 63, -15, 108, -117, -106, 113, -38, -102, -80, -104, -126, -122, 80, 9, 46, -107, 93, -27, -86, -59, -4, -57, -6, -39, -90, 66, -50, -66, 66, 105, 107, 38, 120, -36, 27, -12, -10, 46, 43, 52, 69, 67, 120, 6, -2, -38, -5, 29, 66, 28, 110, 98, -80, 92, 30, 31, -15, -6, -88, 45, 18, -13, 22, -12, 29, -5, 124, -76, -109, -22, 22, 95, -55, 64, -76, 7};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.8188552061970512);
    msg.setSource(16314U);
    msg.setSourceEntity(166U);
    msg.setDestination(57236U);
    msg.setDestinationEntity(74U);
    msg.locale.assign("CITYOXWVSKQGCZHXYNCEYRMGINFNIAQQASBIDKRDMARRTOMPTOANPVBTRUVLWSSVQLQKBZEWJGQZPODQNCXWPDOPPKUSJXNTZPWFHXWZJRFEMDCBUWJHXLAHIAKILZGHEFUTMAELZYTBLIFSLDONJEEYUCUZMFLTVGOBPYYBS");
    const signed char tmp_msg_0[] = {40, 75, 106, -111, 39, -34, 0, 29, -63, -118, -111, 104, -51, 20, 28, -73, 96, -2, -91, -77, 103, -11, 14, -62, 121, -71, -9, -69, 100, 78, -6, -39, -12, 66, 85, -96, -106, 57, -73, 69, 48, 124, 15, 64, 6, -109, -1, -71, -37, -69, 20, -90, 121, -13, 33, 100, -102, -91, 113, -115, -6, 65, -125, -40, -84, -37, -20, 98, -120, -112, 8, 37, -83, 89, 105, -16, -84, -88, 73, -90, -77, 105, -51, -56, 64, -79, -39, -4, -20, -85, -79, 82, -52, 36, 58, 84, 112, -51, -15, -77, 68, -2, 36, 35, 31, 110, -7, -105, -45, 102, -115, 99, 67, -8, -23, -66, -124, 16, 117, -122, -125, 15, -109, -85, -58, -42, 95, 98, 106, 107, 112, -83, 105, -106, -63, 92, 83, -38, -96, -31, 57, -47, 67, 124, -128, 7, -121, -64, 48, 80, -83, 64, -50};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.751620574434468);
    msg.setSource(32671U);
    msg.setSourceEntity(128U);
    msg.setDestination(15372U);
    msg.setDestinationEntity(209U);
    msg.locale.assign("HDBLVEHXNAPRTXSZDFFDKJFTBSVQUAUXODXYMMBHZNTFLRNUYFXQZPOUYYTVLGVWDOPZSILKHDPQPSMUGGGXAQLGMCKJFTCJKWXQDLHEPKZXMJPWONVWLYTJMDFZMWCAWBUZVSICBIFNELGAKVSUYKAAXOOROCAIZFQUIJIECRLPEEHERSLSCBHTQRBIORGHBPCYWVJWQPJGGWIRMZTHUUQK");
    const signed char tmp_msg_0[] = {-89, 1, 110, 125, 95, -28, -53, -103, -25, -75, 97, -88, -128, -7, -56, -88, 91, 89, 104, -101, 51, -16, 105, -30, 17, -100, 120, -47, 110, 123, 30, -42, 24, 103, -113, -123, 51, -92, -123, 25, -110, 85, -2, 99, 2, -31, -91, -75, 63, 29, -49, -94, 104, -63, 6, -105, -69, -10, -14, 69, 38, 57, -66, 82, 39, -62, 40, 49, -84, 87, -18, -94, 75, -84, -9, -112, 101, 47, -56, -1, -49, 101, 44, -124, -46, 83, 42, -100, 3, 76, 101, -86, 89, -44, -45, -25, -113, -124, 1, 81, 118, -87, -76, 108, -98, -12, 47, -89, 74, 48, 81, -103, -90, -103, 80, -3, 55, -24, 28, 111, -110, 89, -35, -114, 115, -4, -52, -85, -84, -54, 102, -38, 71, 80, -84, -67, 42, 16, -121, -8, -36, -6, -54, 0, -57, -111, 126, -58, 13, -92, 97, 15, -80, 52, 52, 51, -40, 115, 73, -35, 122, 53, 37, -88, 15, -66, 91, -99, 47};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.9978168119846111);
    msg.setSource(21984U);
    msg.setSourceEntity(54U);
    msg.setDestination(47678U);
    msg.setDestinationEntity(170U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.07715469682338583);
    msg.setSource(48275U);
    msg.setSourceEntity(253U);
    msg.setDestination(15292U);
    msg.setDestinationEntity(22U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.027259863482089974);
    msg.setSource(21365U);
    msg.setSourceEntity(106U);
    msg.setDestination(46598U);
    msg.setDestinationEntity(64U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.6679407525511006);
    msg.setSource(57816U);
    msg.setSourceEntity(1U);
    msg.setDestination(16731U);
    msg.setDestinationEntity(111U);
    msg.camid = 33U;
    msg.x = 41800U;
    msg.y = 29686U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.783339390539207);
    msg.setSource(52624U);
    msg.setSourceEntity(117U);
    msg.setDestination(33466U);
    msg.setDestinationEntity(191U);
    msg.camid = 249U;
    msg.x = 12345U;
    msg.y = 12998U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.5527497941197477);
    msg.setSource(22269U);
    msg.setSourceEntity(132U);
    msg.setDestination(22826U);
    msg.setDestinationEntity(10U);
    msg.camid = 45U;
    msg.x = 7144U;
    msg.y = 38918U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.5546210403481319);
    msg.setSource(32029U);
    msg.setSourceEntity(180U);
    msg.setDestination(21092U);
    msg.setDestinationEntity(229U);
    msg.camid = 85U;
    msg.x = 61461U;
    msg.y = 1846U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.16239347366746482);
    msg.setSource(34846U);
    msg.setSourceEntity(177U);
    msg.setDestination(44897U);
    msg.setDestinationEntity(240U);
    msg.camid = 191U;
    msg.x = 48999U;
    msg.y = 36502U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.16781085985403);
    msg.setSource(35116U);
    msg.setSourceEntity(92U);
    msg.setDestination(34982U);
    msg.setDestinationEntity(45U);
    msg.camid = 176U;
    msg.x = 13401U;
    msg.y = 12441U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.3820540087431936);
    msg.setSource(60143U);
    msg.setSourceEntity(202U);
    msg.setDestination(35456U);
    msg.setDestinationEntity(173U);
    msg.tracking = 109U;
    msg.lat = 0.48778303403856715;
    msg.lon = 0.46235980341280547;
    msg.x = 0.005892270519552878;
    msg.y = 0.4718096868177689;
    msg.z = 0.8371226585647005;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.04188952012649427);
    msg.setSource(53095U);
    msg.setSourceEntity(153U);
    msg.setDestination(60760U);
    msg.setDestinationEntity(13U);
    msg.tracking = 150U;
    msg.lat = 0.33608778963073604;
    msg.lon = 0.698736954188412;
    msg.x = 0.10533171281734521;
    msg.y = 0.5292490608896866;
    msg.z = 0.560070600864689;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.7914800629384242);
    msg.setSource(7041U);
    msg.setSourceEntity(32U);
    msg.setDestination(49653U);
    msg.setDestinationEntity(36U);
    msg.tracking = 76U;
    msg.lat = 0.4382037616045543;
    msg.lon = 0.023802443790929217;
    msg.x = 0.6344513214936991;
    msg.y = 0.7597524027773254;
    msg.z = 0.022044029023225775;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.1163189773997162);
    msg.setSource(38720U);
    msg.setSourceEntity(59U);
    msg.setDestination(11362U);
    msg.setDestinationEntity(121U);
    msg.target.assign("HVHKEXODOMCMZJDXUKQTTCFNGAUQIYZGKHQZORXYBDNNLIYEOSSBMIJKQDQRJUWRVWHWEKLLATVYEFYBHFTIAPXUHNDFRAWKFOGUEZYXXILASCOOJXMGJMVNWG");
    msg.lbearing = 0.7144823145385591;
    msg.lelevation = 0.2601072700826056;
    msg.bearing = 0.9305816193239397;
    msg.elevation = 0.7666766110781535;
    msg.phi = 0.09909038625457045;
    msg.theta = 0.5766894836370261;
    msg.psi = 0.8360690251852129;
    msg.accuracy = 0.6858241491527051;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.6264770302099459);
    msg.setSource(54093U);
    msg.setSourceEntity(24U);
    msg.setDestination(7345U);
    msg.setDestinationEntity(202U);
    msg.target.assign("NGTCQIOYROWNVQTJREGJKFMDCDPZWYOKJQHUKBJVXUOHEWGLPABYEEQTBXYRAAOSYMHHGNIEKFQBBXYSDBOSBLZQYHVRKIRMGZWMNCAZOPDQVBAHALWFSTNOLZZWRPASPJFFYJCDEMQSZYNLPIINMWHTCJVEPJTVNGL");
    msg.lbearing = 0.01467600760316301;
    msg.lelevation = 0.8864395458104742;
    msg.bearing = 0.33873286124383395;
    msg.elevation = 0.06635740974325277;
    msg.phi = 0.688163803380001;
    msg.theta = 0.9442253512738594;
    msg.psi = 0.9785499364152721;
    msg.accuracy = 0.0747652705100853;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.5341559327195363);
    msg.setSource(26786U);
    msg.setSourceEntity(1U);
    msg.setDestination(16468U);
    msg.setDestinationEntity(35U);
    msg.target.assign("SXBDQSNRJWHAJCURGJIRYOCXTKINSPEQHTWRLYEDOJPXTQDXRJHBFLMTLUUXUHQGTGZXFKCEYEXLSAVUKYJWPIFKOFTMVYVKETPAIZWSXOYCRSQQCSYNMCBDECQXPZYZZUNOMSHBFRTJLRDAEVGUVJUPABJPVPZDQWGVQFYWORNUBGNANIOQAZLLBCZMLIRNUHG");
    msg.lbearing = 0.10182343058512089;
    msg.lelevation = 0.31801472183465007;
    msg.bearing = 0.14410117876498774;
    msg.elevation = 0.41405425309090804;
    msg.phi = 0.4832035469148226;
    msg.theta = 0.1182675371071008;
    msg.psi = 0.6429728580203027;
    msg.accuracy = 0.9805031883150008;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.04487989412643656);
    msg.setSource(59879U);
    msg.setSourceEntity(236U);
    msg.setDestination(43437U);
    msg.setDestinationEntity(146U);
    msg.target.assign("QCXUNBTOWSGOEAGDCXEIYXLVGLRJHMRBFMPIYFHEMBPDJSRSQRIEJLELZTKFVTECNLTVGRYLGBVHXUCXDKAIWYJTDJQUKFVPDGZFHXQHIFVMYGVWXOYSQZDTRWOWHPUWSUMICAANGMVSACDDNHGYJWWDVCOJ");
    msg.x = 0.2920610424560258;
    msg.y = 0.020565612366023056;
    msg.z = 0.05005292984370413;
    msg.n = 0.7319955115498814;
    msg.e = 0.9545767067461014;
    msg.d = 0.19222146404079488;
    msg.phi = 0.5530824822981142;
    msg.theta = 0.43882784050485957;
    msg.psi = 0.8430301646297468;
    msg.accuracy = 0.18864298195115414;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.37707913341390453);
    msg.setSource(49078U);
    msg.setSourceEntity(190U);
    msg.setDestination(24135U);
    msg.setDestinationEntity(232U);
    msg.target.assign("WBOLCDUTVMNFBWEMJTPHKRRIAXKFLFMGFZSBQVZERGKMLWEBZXUCYMTUPBPTCYBOWAEMFLNZVLCPEGQN");
    msg.x = 0.8645236386040624;
    msg.y = 0.17546474094068765;
    msg.z = 0.6687325609900656;
    msg.n = 0.8336425222044908;
    msg.e = 0.4865888075120832;
    msg.d = 0.9137674427726165;
    msg.phi = 0.06751794396282895;
    msg.theta = 0.34153436400424375;
    msg.psi = 0.6735762048670497;
    msg.accuracy = 0.14091473047773972;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.32816572103169783);
    msg.setSource(26501U);
    msg.setSourceEntity(36U);
    msg.setDestination(59162U);
    msg.setDestinationEntity(53U);
    msg.target.assign("FSTBZQIOPRLNLSMLCYSDYXWCMFLXQHNTTBBQNWHJUIUCOJRUIPIGIHWWCLWCAYGXBQBIBBYFKADONNFVBQZQPZYKAJHVZKSVMZOCKGPHVRGEJLDYPITRUT");
    msg.x = 0.660544320693032;
    msg.y = 0.37051213890299495;
    msg.z = 0.03506507230430245;
    msg.n = 0.686714582270259;
    msg.e = 0.20887034061712095;
    msg.d = 0.9082158651233898;
    msg.phi = 0.2028519776245451;
    msg.theta = 0.3598366668048556;
    msg.psi = 0.7235540140022839;
    msg.accuracy = 0.44465692731549056;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.16809359343152297);
    msg.setSource(33995U);
    msg.setSourceEntity(116U);
    msg.setDestination(30470U);
    msg.setDestinationEntity(33U);
    msg.target.assign("JRYSVJPSBZQDQRQFTCNNNYVXXTHCRBUISOHBBMPVRGWXTXQAVZDMXESDTVXAISCHWELPIWTTAWRDORKHNVNLYUEJOBHFCWSWKIKSDMOZFWUTCODEDOARLUXPYHONPXJMKLHVFQUARIJ");
    msg.lat = 0.8918916176755068;
    msg.lon = 0.026694920133553013;
    msg.z_units = 113U;
    msg.z = 0.5253496550803385;
    msg.accuracy = 0.03704387585163238;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.6399276221040292);
    msg.setSource(53680U);
    msg.setSourceEntity(222U);
    msg.setDestination(42105U);
    msg.setDestinationEntity(160U);
    msg.target.assign("LHDHDYFSVCIGEQSZDAEKRJTODQDRUCNNZTVUHKMTJJPWCCJBALQLYCZXHGLWNIRFEEWIVCVOB");
    msg.lat = 0.61606912690795;
    msg.lon = 0.6325753473904019;
    msg.z_units = 15U;
    msg.z = 0.5330078315195973;
    msg.accuracy = 0.5213515854111515;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.4950510605306576);
    msg.setSource(27580U);
    msg.setSourceEntity(209U);
    msg.setDestination(51506U);
    msg.setDestinationEntity(6U);
    msg.target.assign("ZEESTOKHQDIUSCIQAYXFLKUJHRGYPHGSNQIOIONNAWYKBTGWDZLHCCLSJSRTFB");
    msg.lat = 0.29945117004061905;
    msg.lon = 0.6098902775499846;
    msg.z_units = 159U;
    msg.z = 0.3808185621107022;
    msg.accuracy = 0.3024493956549613;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.00869385168844361);
    msg.setSource(52002U);
    msg.setSourceEntity(73U);
    msg.setDestination(17390U);
    msg.setDestinationEntity(247U);
    msg.name.assign("UPEXBSYMRKNSLWVRTIGHNFYHIPGFZYGSODJUIVJUOVUGYOMBTDFIPWWVFSMZ");
    msg.lat = 0.5940943042984173;
    msg.lon = 0.04850088916954953;
    msg.z = 0.4229140488796338;
    msg.z_units = 120U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.4146403299859177);
    msg.setSource(27016U);
    msg.setSourceEntity(86U);
    msg.setDestination(34316U);
    msg.setDestinationEntity(91U);
    msg.name.assign("QPBTZNNGQDPDDFGCSPOZNCLHIAIYAJKOLKKVTBOMQRFBJPEDXQPJUMVHIGXRXSYYCTRXUEWHSUVIOATDWOVBKIFERNJNRJEGUKASAJATHHHLWWBUDBGUGBBGJIVPMI");
    msg.lat = 0.7020281276075607;
    msg.lon = 0.2453017613603199;
    msg.z = 0.926847621971736;
    msg.z_units = 149U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.21162092370691377);
    msg.setSource(33335U);
    msg.setSourceEntity(25U);
    msg.setDestination(16310U);
    msg.setDestinationEntity(237U);
    msg.name.assign("JNOXOLOQIZTYFCSEGMBCCYRZNJUTRNHVFLQTKAMVJAZFVHXYVGDFUHZYMWSJBAPUXTWLNFJXAEQTERAVTCYJQDWBKCHFXZPFWLDSMRXDCHCDGRDQLKRZVOLXGZPMIQMGHFXIIE");
    msg.lat = 0.06438332116539858;
    msg.lon = 0.5858058915975134;
    msg.z = 0.59910603393933;
    msg.z_units = 24U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.04850626945331471);
    msg.setSource(54031U);
    msg.setSourceEntity(80U);
    msg.setDestination(22288U);
    msg.setDestinationEntity(179U);
    msg.op = 40U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("IHDOVKBRMSVWNNPZPQYPIIDQYOXRVXTAALOWWMRLMVXKDARUPLFCRVZTXONEWIJMNUSKQVQBHOMENAGBU");
    tmp_msg_0.lat = 0.7503206698736681;
    tmp_msg_0.lon = 0.8610396715543948;
    tmp_msg_0.z = 0.9272792190403201;
    tmp_msg_0.z_units = 107U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.35695936627275804);
    msg.setSource(44616U);
    msg.setSourceEntity(151U);
    msg.setDestination(44861U);
    msg.setDestinationEntity(16U);
    msg.op = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.7284739587416349);
    msg.setSource(13846U);
    msg.setSourceEntity(45U);
    msg.setDestination(34828U);
    msg.setDestinationEntity(11U);
    msg.op = 187U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("RTIETSYQMZLBWPALHPOWWKPUVFKAMAWQVMZOLQESIWYNZEIGWVWSCYMORJMBRSRVXVFUCULZVOTXIQPZNGTFLDHMYGECKFBDPAPTSUUCERAAKCRUFXKXBXHJNBQFBKNPKNQOHNRYCYMIXYPIYCTZWXRVKDGJUAHVQBIOHLLINEHNKBNNESMOUUGDISEJVSJVDSWCFPGXKJAXJZLJGZCGOQBTCYZUFSZJDHPGFQATLOHXT");
    tmp_msg_0.lat = 0.30568971988513327;
    tmp_msg_0.lon = 0.47604158956081966;
    tmp_msg_0.z = 0.04643648628944197;
    tmp_msg_0.z_units = 124U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.04169959534550782);
    msg.setSource(28084U);
    msg.setSourceEntity(122U);
    msg.setDestination(27296U);
    msg.setDestinationEntity(91U);
    msg.value = 0.1490424982165337;
    msg.type = 128U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.15023737712368546);
    msg.setSource(17404U);
    msg.setSourceEntity(254U);
    msg.setDestination(11185U);
    msg.setDestinationEntity(236U);
    msg.value = 0.22373084170618562;
    msg.type = 160U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.11807153911406087);
    msg.setSource(2842U);
    msg.setSourceEntity(97U);
    msg.setDestination(62245U);
    msg.setDestinationEntity(37U);
    msg.value = 0.9135731293656812;
    msg.type = 177U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.9004115756731621);
    msg.setSource(41408U);
    msg.setSourceEntity(174U);
    msg.setDestination(29355U);
    msg.setDestinationEntity(219U);
    msg.value = 0.06457649482961103;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.6949274529949563);
    msg.setSource(34437U);
    msg.setSourceEntity(192U);
    msg.setDestination(40424U);
    msg.setDestinationEntity(9U);
    msg.value = 0.5117663245987482;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.8018044706376358);
    msg.setSource(43954U);
    msg.setSourceEntity(71U);
    msg.setDestination(49367U);
    msg.setDestinationEntity(31U);
    msg.value = 0.6524462838015138;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.5106495435008602);
    msg.setSource(55176U);
    msg.setSourceEntity(191U);
    msg.setDestination(39788U);
    msg.setDestinationEntity(215U);
    msg.timestamp_last_service = 0.787087559540705;
    msg.time_next_service = 0.7631971833885427;
    msg.time_motor_next_service = 0.03335784548960785;
    msg.time_idle_ground = 0.6644892442445514;
    msg.time_idle_air = 0.528803729108307;
    msg.time_idle_water = 0.4610872687790105;
    msg.time_idle_underwater = 0.8642122662448651;
    msg.time_idle_unknown = 0.3504784064621459;
    msg.time_motor_ground = 0.24930124683814636;
    msg.time_motor_air = 0.6239404665636159;
    msg.time_motor_water = 0.7157887097463396;
    msg.time_motor_underwater = 0.7302324772809772;
    msg.time_motor_unknown = 0.9512086159174469;
    msg.rpm_min = 18798;
    msg.rpm_max = 15493;
    msg.depth_max = 0.6632896703776113;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.9384224277550369);
    msg.setSource(554U);
    msg.setSourceEntity(70U);
    msg.setDestination(32828U);
    msg.setDestinationEntity(125U);
    msg.timestamp_last_service = 0.5721217661745203;
    msg.time_next_service = 0.3887650332237397;
    msg.time_motor_next_service = 0.9856732505009015;
    msg.time_idle_ground = 0.9820720778579438;
    msg.time_idle_air = 0.00193334381410748;
    msg.time_idle_water = 0.08814183650946805;
    msg.time_idle_underwater = 0.05739943508473866;
    msg.time_idle_unknown = 0.8793852370435405;
    msg.time_motor_ground = 0.7645482690833714;
    msg.time_motor_air = 0.030697241542637754;
    msg.time_motor_water = 0.1281471971747531;
    msg.time_motor_underwater = 0.6535543880095979;
    msg.time_motor_unknown = 0.10181162142466849;
    msg.rpm_min = -27171;
    msg.rpm_max = 16533;
    msg.depth_max = 0.5523644803289219;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.740469746050084);
    msg.setSource(8833U);
    msg.setSourceEntity(26U);
    msg.setDestination(49967U);
    msg.setDestinationEntity(1U);
    msg.timestamp_last_service = 0.2175979041368441;
    msg.time_next_service = 0.815482522113842;
    msg.time_motor_next_service = 0.7090070205834373;
    msg.time_idle_ground = 0.5992121571439967;
    msg.time_idle_air = 0.9417820073959406;
    msg.time_idle_water = 0.14618239922990328;
    msg.time_idle_underwater = 0.6322219422947672;
    msg.time_idle_unknown = 0.8312083713342873;
    msg.time_motor_ground = 0.7872151883378123;
    msg.time_motor_air = 0.7158106073173844;
    msg.time_motor_water = 0.8721123537916091;
    msg.time_motor_underwater = 0.7401452884800765;
    msg.time_motor_unknown = 0.6933103342020234;
    msg.rpm_min = -4077;
    msg.rpm_max = 27991;
    msg.depth_max = 0.3866717390050335;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.6486113749794284);
    msg.setSource(54067U);
    msg.setSourceEntity(192U);
    msg.setDestination(53813U);
    msg.setDestinationEntity(35U);
    msg.severity = 40U;
    msg.text.assign("POYWKCUTXAEWJFQLSRYIZBQKTRFRIFCFWQIMCGRXZDDIVKNXGRPNWEYEHPSUOFMNKHXXSLVHKZEBNANLUEHPUYWOPCMAGJNWAHEQDFCVFTFUUDZELMZKKFKNSDCRIJAL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.09896251493847752);
    msg.setSource(2613U);
    msg.setSourceEntity(183U);
    msg.setDestination(42383U);
    msg.setDestinationEntity(100U);
    msg.severity = 91U;
    msg.text.assign("CRGQCENUZAHDYOEQGVELPLPVXCOGKMODLSGKOZLBODHDOFFZULPPRJOWIUA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.23570042319709117);
    msg.setSource(33193U);
    msg.setSourceEntity(33U);
    msg.setDestination(38967U);
    msg.setDestinationEntity(113U);
    msg.severity = 79U;
    msg.text.assign("PDOOVODQHENVXHTMLJGKKCKTQSMBOITSEIBLRWGKXUFTPPPSPRHXAFNCEHBYHDUJTEYKKDIDWTAGZSMTLNCVFFTNSZWKKXQDLMOZILCZPRJWTSGAAUVXITGWZUVMDGPJUOQQXHPSQXFAZWRBIJGNOIYEJOHWYAVRCGJELCMYLARJNCFCNFEOWYQVZNGQVMXSMXBBHOYJNHRLEPLYBIIWXARQCNDZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.74980300730264);
    msg.setSource(27631U);
    msg.setSourceEntity(10U);
    msg.setDestination(57576U);
    msg.setDestinationEntity(25U);
    msg.channel = 79;
    msg.value = -151647363;
    msg.gain = 9U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.5007268449591614);
    msg.setSource(24296U);
    msg.setSourceEntity(202U);
    msg.setDestination(54060U);
    msg.setDestinationEntity(85U);
    msg.channel = 101;
    msg.value = -2030858680;
    msg.gain = 205U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.9744335249950151);
    msg.setSource(40972U);
    msg.setSourceEntity(75U);
    msg.setDestination(47861U);
    msg.setDestinationEntity(29U);
    msg.channel = -44;
    msg.value = -1859932642;
    msg.gain = 228U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.6948045950595577);
    msg.setSource(31062U);
    msg.setSourceEntity(70U);
    msg.setDestination(3722U);
    msg.setDestinationEntity(105U);
    msg.ch01 = 0.9302841722045906;
    msg.ch02 = 0.13570836985488466;
    msg.ch03 = 0.7598471513098982;
    msg.ch04 = 0.6229127075143649;
    msg.ch05 = 0.751860945264949;
    msg.ch06 = 0.6524817477470842;
    msg.ch07 = 0.1259559839387584;
    msg.ch08 = 0.5782397795815024;
    msg.ch09 = 0.37261117099463636;
    msg.ch10 = 0.43277476788279334;
    msg.ch11 = 0.48965937495104883;
    msg.ch12 = 0.8383022909664622;
    msg.ch13 = 0.4499550466160276;
    msg.ch14 = 0.9892027433453364;
    msg.ch15 = 0.8674081951168723;
    msg.ch16 = 0.31884632927958845;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.7925707542416675);
    msg.setSource(27566U);
    msg.setSourceEntity(117U);
    msg.setDestination(9691U);
    msg.setDestinationEntity(127U);
    msg.ch01 = 0.07609964623519982;
    msg.ch02 = 0.05704379300528328;
    msg.ch03 = 0.06400931925127717;
    msg.ch04 = 0.4231047483181244;
    msg.ch05 = 0.34346293935878536;
    msg.ch06 = 0.4792416795894513;
    msg.ch07 = 0.9862277269343774;
    msg.ch08 = 0.3059175288741075;
    msg.ch09 = 0.07059552013535442;
    msg.ch10 = 0.7161835360512226;
    msg.ch11 = 0.12442846832101273;
    msg.ch12 = 0.029650040769331865;
    msg.ch13 = 0.9973415601039455;
    msg.ch14 = 0.8753170654872979;
    msg.ch15 = 0.8146274017118705;
    msg.ch16 = 0.5943228466284223;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.5138565411231456);
    msg.setSource(13720U);
    msg.setSourceEntity(207U);
    msg.setDestination(32787U);
    msg.setDestinationEntity(239U);
    msg.ch01 = 0.6666217951433167;
    msg.ch02 = 0.17534077012030702;
    msg.ch03 = 0.5784494466440158;
    msg.ch04 = 0.5388096908423136;
    msg.ch05 = 0.7946336443552179;
    msg.ch06 = 0.643070064330808;
    msg.ch07 = 0.2474090807025594;
    msg.ch08 = 0.8720237524682488;
    msg.ch09 = 0.7173129664363757;
    msg.ch10 = 0.6777450821648008;
    msg.ch11 = 0.9584930560951435;
    msg.ch12 = 0.7666608211071623;
    msg.ch13 = 0.6724849388857456;
    msg.ch14 = 0.10439746648838699;
    msg.ch15 = 0.5975216093150373;
    msg.ch16 = 0.8549647741029452;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.2058649562001278);
    msg.setSource(13150U);
    msg.setSourceEntity(23U);
    msg.setDestination(31715U);
    msg.setDestinationEntity(122U);
    msg.op = 147U;
    msg.lat = 0.4374972403982802;
    msg.lon = 0.8668689864897109;
    msg.height = 0.11041816207549071;
    msg.depth = 0.8433969373619508;
    msg.alt = 0.23062357641713216;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.529222610437924);
    msg.setSource(14019U);
    msg.setSourceEntity(122U);
    msg.setDestination(21880U);
    msg.setDestinationEntity(126U);
    msg.op = 229U;
    msg.lat = 0.5920223160778452;
    msg.lon = 0.4207247533214835;
    msg.height = 0.7210930891576878;
    msg.depth = 0.5275593825130163;
    msg.alt = 0.15899647816410267;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.2188594471224039);
    msg.setSource(41355U);
    msg.setSourceEntity(29U);
    msg.setDestination(48630U);
    msg.setDestinationEntity(25U);
    msg.op = 213U;
    msg.lat = 0.06935203278111512;
    msg.lon = 0.020150855225748998;
    msg.height = 0.6439479633527908;
    msg.depth = 0.9072022863584955;
    msg.alt = 0.5331018882001298;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.20794463455198686);
    msg.setSource(37988U);
    msg.setSourceEntity(172U);
    msg.setDestination(60835U);
    msg.setDestinationEntity(143U);
    msg.name.assign("ELQDNTIWLDDLGIJFKNJYYTPVYCKELIUPAUYSNDXEVXQOMKYOHMSLXKYBLVOHUZHYXGDZAIMXPXQDJIMQFKIHCHTUBXGWKRKRQNRUCGVEHGVVWUWPRIBOZMNZQNTHYGLCJAENACMDZEPCAJSGKVYTBJSGHUOGILKBAZAPMQWBSRHCRPJBLWCZPF");
    msg.value = 222U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.01088946920969669);
    msg.setSource(23408U);
    msg.setSourceEntity(209U);
    msg.setDestination(8691U);
    msg.setDestinationEntity(235U);
    msg.name.assign("MRFDQPCFIXOR");
    msg.value = 102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.1129804474913505);
    msg.setSource(55922U);
    msg.setSourceEntity(151U);
    msg.setDestination(42118U);
    msg.setDestinationEntity(163U);
    msg.name.assign("ECXHHPWVMTUZSQKCDNOBEVQOBYETKAAYHPAAEMYRFQZKJLYDBMOEIPXDRKLWZFSSGVTQBDKHOPDWJVWRUTRPMXNZUFRBNXFUMHSECWSIMXFGMTLUJCLJJCELRKVHUTPUGAMODZGGBIOPQNTNKNAIVYHYQNAUVMZOVRFIIJSTMWHXOGPPTZXZDCBNYEYKZSOA");
    msg.value = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.2065286789879508);
    msg.setSource(61427U);
    msg.setSourceEntity(180U);
    msg.setDestination(23700U);
    msg.setDestinationEntity(106U);
    msg.name.assign("AEHFQVENEXVLEBODUZUKUGBZQADNESSJJRHANWICGHAKRIUOIGNGSQBKWPVJODGZOPWZRHTKCZMFLUDAMTFAQIECOFXUCNLBHBXDTKJYNYYCCXGGZQAR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.4170992065856367);
    msg.setSource(17484U);
    msg.setSourceEntity(124U);
    msg.setDestination(19069U);
    msg.setDestinationEntity(60U);
    msg.name.assign("CKKSETRMVJPBHZJYHZMLHZJNZZWHTKOPUASUVZCVXDWIISRGYXZTFXR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.07354150401800186);
    msg.setSource(58391U);
    msg.setSourceEntity(150U);
    msg.setDestination(7807U);
    msg.setDestinationEntity(82U);
    msg.name.assign("PWEUQKFCHMISZRNKLOOQEVAVWXUKPQAFDCHUOTBEDNBMFMFJVMXITUQGNAKIXRUYOIBNHDVUJYUGYLRJVZLXKOZNGUQVMSTVAQDOZJMVQIITSHPSKDMBZJTHTDEXURJPLKCRYZZXNEWJWXCYWPTEGAGGKPRZWXCWKTMBLWXOFOAPZNHOESPEVAQRIJPFJBIYCRVHYSAWNBLHFDFNCDFICOWCPLLLFMQGINJABZBBHD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.6976084633348143);
    msg.setSource(44701U);
    msg.setSourceEntity(151U);
    msg.setDestination(43287U);
    msg.setDestinationEntity(103U);
    msg.name.assign("PKTUAJHWSFDAYRUWDHMBFUZEJZZOXRPJSBPBFHQJKIXQXPZELFASKJ");
    msg.value = 228U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.22529813130171306);
    msg.setSource(11837U);
    msg.setSourceEntity(136U);
    msg.setDestination(28051U);
    msg.setDestinationEntity(99U);
    msg.name.assign("SPETGSVPLJRLYPBBOTYPEXZLVCGWNWQUPVUIVEXWGHOOFYCICVZSGYTRHBTFIYDKJMXZXMPMKGWDNQNNUVGBCFYYQTTDBFDOIKIEPCSMXLAHBVISSHDQVJZHRNZNAOQCAUPFTJRRRCCLQLEMDHZDBZAEJQJUYTNKWPMUMQL");
    msg.value = 250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.884836413540735);
    msg.setSource(6045U);
    msg.setSourceEntity(90U);
    msg.setDestination(38145U);
    msg.setDestinationEntity(217U);
    msg.name.assign("OFGCTMMSJOFTCNSCNVRPUPAQRJEVQYBXRSEVF");
    msg.value = 167U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.22260976427162749);
    msg.setSource(23225U);
    msg.setSourceEntity(142U);
    msg.setDestination(24842U);
    msg.setDestinationEntity(27U);
    msg.value = 0.399265847937317;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.36519087195839384);
    msg.setSource(62889U);
    msg.setSourceEntity(99U);
    msg.setDestination(57707U);
    msg.setDestinationEntity(43U);
    msg.value = 0.3730109642950926;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.1363318062933615);
    msg.setSource(55503U);
    msg.setSourceEntity(231U);
    msg.setDestination(49912U);
    msg.setDestinationEntity(214U);
    msg.value = 0.7130294062433924;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.17588984002351782);
    msg.setSource(59344U);
    msg.setSourceEntity(14U);
    msg.setDestination(12618U);
    msg.setDestinationEntity(236U);
    msg.value = 0.36154837430141173;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.964279089347978);
    msg.setSource(14943U);
    msg.setSourceEntity(171U);
    msg.setDestination(12861U);
    msg.setDestinationEntity(80U);
    msg.value = 0.8682155442946079;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8670211192436654);
    msg.setSource(38164U);
    msg.setSourceEntity(38U);
    msg.setDestination(24561U);
    msg.setDestinationEntity(157U);
    msg.value = 0.9105955808712882;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.9364075222289575);
    msg.setSource(40472U);
    msg.setSourceEntity(29U);
    msg.setDestination(61092U);
    msg.setDestinationEntity(176U);
    msg.value = 0.2867382692276439;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.6531258706550549);
    msg.setSource(53235U);
    msg.setSourceEntity(72U);
    msg.setDestination(43094U);
    msg.setDestinationEntity(179U);
    msg.value = 0.7950650328334767;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.6064033656181178);
    msg.setSource(52066U);
    msg.setSourceEntity(155U);
    msg.setDestination(61058U);
    msg.setDestinationEntity(53U);
    msg.value = 0.03237055014841539;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.004980532274148852);
    msg.setSource(23640U);
    msg.setSourceEntity(149U);
    msg.setDestination(13971U);
    msg.setDestinationEntity(58U);
    msg.value = 0.4101908778171184;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.30257017326200386);
    msg.setSource(59755U);
    msg.setSourceEntity(244U);
    msg.setDestination(18018U);
    msg.setDestinationEntity(180U);
    msg.value = 0.9226459048003484;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.28769893746738495);
    msg.setSource(51672U);
    msg.setSourceEntity(117U);
    msg.setDestination(12532U);
    msg.setDestinationEntity(158U);
    msg.value = 0.5473667096549428;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.07531476155407135);
    msg.setSource(297U);
    msg.setSourceEntity(47U);
    msg.setDestination(10731U);
    msg.setDestinationEntity(51U);
    msg.value = 0.6415780447530072;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.3126016273751191);
    msg.setSource(24031U);
    msg.setSourceEntity(161U);
    msg.setDestination(21239U);
    msg.setDestinationEntity(114U);
    msg.value = 0.14031981612978217;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.6178061625927403);
    msg.setSource(60523U);
    msg.setSourceEntity(52U);
    msg.setDestination(64680U);
    msg.setDestinationEntity(234U);
    msg.value = 0.9587374405912714;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerSettings msg;
    msg.setTimeStamp(0.9410753462695698);
    msg.setSource(54382U);
    msg.setSourceEntity(131U);
    msg.setDestination(49207U);
    msg.setDestinationEntity(74U);
    msg.l2 = 84;
    msg.l3 = -106;
    msg.iridium = 28;
    msg.modem = -31;
    msg.pumps = -39;
    msg.vhf = 54;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerSettings msg;
    msg.setTimeStamp(0.880194735718899);
    msg.setSource(21483U);
    msg.setSourceEntity(20U);
    msg.setDestination(40387U);
    msg.setDestinationEntity(98U);
    msg.l2 = 113;
    msg.l3 = -26;
    msg.iridium = -26;
    msg.modem = -112;
    msg.pumps = 33;
    msg.vhf = 123;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerSettings msg;
    msg.setTimeStamp(0.212796546279866);
    msg.setSource(1216U);
    msg.setSourceEntity(134U);
    msg.setDestination(49616U);
    msg.setDestinationEntity(214U);
    msg.l2 = -92;
    msg.l3 = 51;
    msg.iridium = 99;
    msg.modem = -127;
    msg.pumps = 52;
    msg.vhf = 107;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.0931649186087724);
    msg.setSource(60752U);
    msg.setSourceEntity(72U);
    msg.setDestination(4050U);
    msg.setDestinationEntity(139U);
    msg.angle = 0.6843384992985299;
    msg.speed = 0.16016771107443983;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.6026089009849647);
    msg.setSource(19756U);
    msg.setSourceEntity(0U);
    msg.setDestination(41216U);
    msg.setDestinationEntity(90U);
    msg.angle = 0.13446786390648313;
    msg.speed = 0.05904831210253225;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.963678909521933);
    msg.setSource(12593U);
    msg.setSourceEntity(151U);
    msg.setDestination(22527U);
    msg.setDestinationEntity(196U);
    msg.angle = 0.25355141081427657;
    msg.speed = 0.596579430618533;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.9978657361646657);
    msg.setSource(62927U);
    msg.setSourceEntity(96U);
    msg.setDestination(55951U);
    msg.setDestinationEntity(54U);
    msg.dir = 0.19118059860878178;
    msg.speed = 0.6788901779113076;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.8586239295793899);
    msg.setSource(2765U);
    msg.setSourceEntity(189U);
    msg.setDestination(43206U);
    msg.setDestinationEntity(8U);
    msg.dir = 0.6019955585587426;
    msg.speed = 0.21835059974591142;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.07932219335192048);
    msg.setSource(55279U);
    msg.setSourceEntity(143U);
    msg.setDestination(52235U);
    msg.setDestinationEntity(58U);
    msg.dir = 0.6124136413590977;
    msg.speed = 0.03994957124445764;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.5760418784062968);
    msg.setSource(29076U);
    msg.setSourceEntity(213U);
    msg.setDestination(48394U);
    msg.setDestinationEntity(62U);
    msg.x = 0.93409105589222;
    msg.y = 0.7378070091439196;
    msg.z1 = 0.2877289427876478;
    msg.z2 = 0.9342885060539783;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.16397255128408317);
    msg.setSource(16844U);
    msg.setSourceEntity(11U);
    msg.setDestination(20139U);
    msg.setDestinationEntity(234U);
    msg.x = 0.04036887455980409;
    msg.y = 0.9421196402732628;
    msg.z1 = 0.2319353156615359;
    msg.z2 = 0.6740942611284004;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.28617323994054844);
    msg.setSource(13426U);
    msg.setSourceEntity(106U);
    msg.setDestination(62839U);
    msg.setDestinationEntity(123U);
    msg.x = 0.5644604352254997;
    msg.y = 0.7827263458444933;
    msg.z1 = 0.7095657974422387;
    msg.z2 = 0.4695957851689633;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.464011088771509);
    msg.setSource(30299U);
    msg.setSourceEntity(236U);
    msg.setDestination(989U);
    msg.setDestinationEntity(1U);
    msg.mmsi.assign("WANKDCXDZBLMEIDILVHURCBGVIHLERSWCGIHOSLFSDFIMOETLJCYGNSVUFPTADBUZEMKEGRARMNVYWZYPPPIBIUDWPYARRQCELXHTLDSFJQWVBHRXPCRBHNIGNUFASBMQQ");
    msg.lat = 0.8801155319567269;
    msg.lon = 0.1416403492589764;
    msg.x = 0.001756692310436403;
    msg.y = 0.9456456318345869;
    msg.speed = 0.5842252298267269;
    msg.course = 0.06946078067979111;
    msg.dist = 0.31846383493431873;
    msg.length = 0.863504702574836;
    msg.width = 0.44467352764598345;
    msg.o_vect = 0.48642301436203716;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.6183702091317584);
    msg.setSource(8503U);
    msg.setSourceEntity(8U);
    msg.setDestination(55063U);
    msg.setDestinationEntity(131U);
    msg.mmsi.assign("WEYJJKUELFLZO");
    msg.lat = 0.7002341138722081;
    msg.lon = 0.9248330264211485;
    msg.x = 0.6602878000663305;
    msg.y = 0.8988865735591868;
    msg.speed = 0.6204211209161961;
    msg.course = 0.7085457745450745;
    msg.dist = 0.8164560386178247;
    msg.length = 0.059051449164215564;
    msg.width = 0.30838574476381553;
    msg.o_vect = 0.1651691039899713;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.7409376070345942);
    msg.setSource(22097U);
    msg.setSourceEntity(70U);
    msg.setDestination(1053U);
    msg.setDestinationEntity(51U);
    msg.mmsi.assign("LOBDKRMDJGTMJBHTTUYPHQHYLPZWAOYVNICJNHASZVQRSDEOVYMHQPJBPVDNCHAVXKKFYNSWSYHVYXZQEJBDAARWPFQCPNKELCIGSTPIOM");
    msg.lat = 0.6756301308450344;
    msg.lon = 0.09879931726313829;
    msg.x = 0.910185915753157;
    msg.y = 0.6212033611113775;
    msg.speed = 0.7687280088732465;
    msg.course = 0.8681845975924627;
    msg.dist = 0.9327344749168825;
    msg.length = 0.5983335815358776;
    msg.width = 0.029086324269534503;
    msg.o_vect = 0.06532757966099323;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.6797383907787663);
    msg.setSource(48056U);
    msg.setSourceEntity(11U);
    msg.setDestination(48996U);
    msg.setDestinationEntity(85U);
    msg.depth_at_loc.assign("NJUBQKDDVJBSFKGNBGIQTVEWYPCUGQCWARMXZQNIRWKNZQOXLEVSFPCHLTDSHVVVMIPZGTESNZXSDRPIMNUPP");
    msg.danger.assign("ARNRXMRGSFVECACNEKCBSXOPNAHXJMKOEVB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.771823444177792);
    msg.setSource(6508U);
    msg.setSourceEntity(243U);
    msg.setDestination(13868U);
    msg.setDestinationEntity(210U);
    msg.depth_at_loc.assign("CETLYTBHJLBAFRSXGHQRAKEDCLIDGWLUKHZHEUBARKOVQHNJVSMRKEGAADVSFCMCJBAGYLLNRYP");
    msg.danger.assign("TWACGEKMYYGQZBDQPVTQUHROOMCMYEWCJZQGKWVFELEYJUUZMVBMOAJDMQTXHLPCDZBFVMIRISURGFLBITTRFYSJNKGLDBKOHUPIFMEXDURKZOPBEWWNLESIISERT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.44291004396882583);
    msg.setSource(35714U);
    msg.setSourceEntity(252U);
    msg.setDestination(41289U);
    msg.setDestinationEntity(132U);
    msg.depth_at_loc.assign("KVSJEUUSUG");
    msg.danger.assign("GNELZORQUGSULHMZPRMKJJHBUQZNOJTUKHHYCYTNLDQCSAXIHXXVJNEBGIXCXUFJCFHMEFTZPQIWOGJWTDIGFHFVJEVBLYOSSSZWSMPMEAXYUJWUKINNBCKMWFIWFGORASCMVSNLXZEUIBJMOACDPQYGLUSQZXWHKKFRDDLEDWYMYVGYTHAKPABIZKRUABDLIVOJXLXRDRINVVDSWTPQGKTBVWVOECDRBTPCKOCNGEFQRZYNTBOATAQYA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.6822832099390419);
    msg.setSource(57922U);
    msg.setSourceEntity(126U);
    msg.setDestination(30430U);
    msg.setDestinationEntity(112U);
    msg.value = 0.3188414417259725;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.2166044736875563);
    msg.setSource(23223U);
    msg.setSourceEntity(97U);
    msg.setDestination(56307U);
    msg.setDestinationEntity(190U);
    msg.value = 0.15033912510532943;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.35484232471670163);
    msg.setSource(8812U);
    msg.setSourceEntity(113U);
    msg.setDestination(15149U);
    msg.setDestinationEntity(164U);
    msg.value = 0.386436991265106;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.7398808595366696);
    msg.setSource(4698U);
    msg.setSourceEntity(251U);
    msg.setDestination(41247U);
    msg.setDestinationEntity(191U);
    msg.beam1 = 0.8191954735044938;
    msg.beam2 = 0.6941743606930026;
    msg.beam3 = 0.958641137679543;
    msg.beam4 = 0.21012082220392836;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.09166065765786346);
    msg.setSource(55395U);
    msg.setSourceEntity(78U);
    msg.setDestination(35787U);
    msg.setDestinationEntity(171U);
    msg.beam1 = 0.0019176969464226312;
    msg.beam2 = 0.05243897184774904;
    msg.beam3 = 0.6010986014980649;
    msg.beam4 = 0.696859151462343;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.18275537372218553);
    msg.setSource(62326U);
    msg.setSourceEntity(129U);
    msg.setDestination(44121U);
    msg.setDestinationEntity(70U);
    msg.beam1 = 0.9779691770878206;
    msg.beam2 = 0.9230357715402141;
    msg.beam3 = 0.11548916883984583;
    msg.beam4 = 0.37021150632477295;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5014813258397927);
    msg.setSource(6488U);
    msg.setSourceEntity(185U);
    msg.setDestination(37337U);
    msg.setDestinationEntity(132U);
    msg.beam1 = 234U;
    msg.beam2 = 185U;
    msg.beam3 = 168U;
    msg.beam4 = 163U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5737343651545888);
    msg.setSource(5377U);
    msg.setSourceEntity(191U);
    msg.setDestination(25487U);
    msg.setDestinationEntity(20U);
    msg.beam1 = 99U;
    msg.beam2 = 39U;
    msg.beam3 = 197U;
    msg.beam4 = 224U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5078337249088696);
    msg.setSource(39717U);
    msg.setSourceEntity(19U);
    msg.setDestination(31997U);
    msg.setDestinationEntity(115U);
    msg.beam1 = 205U;
    msg.beam2 = 164U;
    msg.beam3 = 23U;
    msg.beam4 = 143U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.7982399009912636);
    msg.setSource(24063U);
    msg.setSourceEntity(100U);
    msg.setDestination(20073U);
    msg.setDestinationEntity(69U);
    msg.pos = 0.6190468769706742;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.5076367906962109;
    tmp_msg_0.amp = 0.9097051835301968;
    tmp_msg_0.cor = 136U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.4641127936066065);
    msg.setSource(34364U);
    msg.setSourceEntity(17U);
    msg.setDestination(10493U);
    msg.setDestinationEntity(24U);
    msg.pos = 0.018587453435836787;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.036454036989243654);
    msg.setSource(43528U);
    msg.setSourceEntity(45U);
    msg.setDestination(52098U);
    msg.setDestinationEntity(215U);
    msg.pos = 0.18774990684438053;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.18398412223313876);
    msg.setSource(2854U);
    msg.setSourceEntity(78U);
    msg.setDestination(13489U);
    msg.setDestinationEntity(39U);
    msg.beams = 96U;
    msg.cells = 31U;
    msg.coord_sys = 205U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.2507170453423776);
    msg.setSource(18722U);
    msg.setSourceEntity(151U);
    msg.setDestination(57041U);
    msg.setDestinationEntity(204U);
    msg.beams = 43U;
    msg.cells = 212U;
    msg.coord_sys = 217U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.8310376417954328);
    msg.setSource(20129U);
    msg.setSourceEntity(80U);
    msg.setDestination(5651U);
    msg.setDestinationEntity(231U);
    msg.beams = 28U;
    msg.cells = 122U;
    msg.coord_sys = 35U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.3720239728068677;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.042203023250971805;
    tmp_tmp_msg_0_0.amp = 0.1564052731030272;
    tmp_tmp_msg_0_0.cor = 250U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.25336223618505727);
    msg.setSource(61999U);
    msg.setSourceEntity(123U);
    msg.setDestination(40900U);
    msg.setDestinationEntity(27U);
    msg.vel = 0.10831981564226523;
    msg.amp = 0.4464495844785553;
    msg.cor = 85U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.1266981674776877);
    msg.setSource(47424U);
    msg.setSourceEntity(253U);
    msg.setDestination(15445U);
    msg.setDestinationEntity(236U);
    msg.vel = 0.5872423233042718;
    msg.amp = 0.28975089632064377;
    msg.cor = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.8557803924801294);
    msg.setSource(18285U);
    msg.setSourceEntity(82U);
    msg.setDestination(45413U);
    msg.setDestinationEntity(226U);
    msg.vel = 0.9331764992866027;
    msg.amp = 0.19761708012399304;
    msg.cor = 122U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.1614227269384667);
    msg.setSource(20410U);
    msg.setSourceEntity(123U);
    msg.setDestination(20732U);
    msg.setDestinationEntity(123U);
    msg.serial_no = 877640838U;
    msg.unix_timestamp = 1815304662U;
    msg.millis = 53504U;
    msg.trans_protocol = 63U;
    msg.trans_id = 323095853U;
    msg.trans_data = 64310U;
    msg.snr = 84U;
    msg.trans_freq = 58U;
    msg.recv_mem_addr = 52040U;
    msg.lat = 0.4814759562462062;
    msg.lon = 0.556086364595371;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.4367394671577325);
    msg.setSource(45552U);
    msg.setSourceEntity(105U);
    msg.setDestination(3754U);
    msg.setDestinationEntity(10U);
    msg.serial_no = 3184968528U;
    msg.unix_timestamp = 1296098249U;
    msg.millis = 3802U;
    msg.trans_protocol = 22U;
    msg.trans_id = 237688161U;
    msg.trans_data = 47317U;
    msg.snr = 172U;
    msg.trans_freq = 136U;
    msg.recv_mem_addr = 28626U;
    msg.lat = 0.30830007204093823;
    msg.lon = 0.3795691306121023;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.6981075990609557);
    msg.setSource(12099U);
    msg.setSourceEntity(81U);
    msg.setDestination(26274U);
    msg.setDestinationEntity(122U);
    msg.serial_no = 1776092023U;
    msg.unix_timestamp = 2650047336U;
    msg.millis = 36664U;
    msg.trans_protocol = 79U;
    msg.trans_id = 2650851258U;
    msg.trans_data = 36145U;
    msg.snr = 80U;
    msg.trans_freq = 213U;
    msg.recv_mem_addr = 43907U;
    msg.lat = 0.2151795582040983;
    msg.lon = 0.026883556350403737;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.23424489686955097);
    msg.setSource(44315U);
    msg.setSourceEntity(102U);
    msg.setDestination(31005U);
    msg.setDestinationEntity(188U);
    msg.serial_no = 3042978169U;
    msg.unix_timestamp = 3325793934U;
    msg.temperature = 0.37858619450529274;
    msg.avg_noise_level = 150U;
    msg.peak_noise_level = 130U;
    msg.recv_listen_freq = 177U;
    msg.recv_mem_addr = 10391U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.8426929169508891);
    msg.setSource(22625U);
    msg.setSourceEntity(0U);
    msg.setDestination(14857U);
    msg.setDestinationEntity(141U);
    msg.serial_no = 816378659U;
    msg.unix_timestamp = 1035392219U;
    msg.temperature = 0.398898116618993;
    msg.avg_noise_level = 232U;
    msg.peak_noise_level = 144U;
    msg.recv_listen_freq = 95U;
    msg.recv_mem_addr = 10754U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.9484506888474655);
    msg.setSource(36726U);
    msg.setSourceEntity(162U);
    msg.setDestination(12007U);
    msg.setDestinationEntity(51U);
    msg.serial_no = 913217523U;
    msg.unix_timestamp = 2031443061U;
    msg.temperature = 0.15684809901708952;
    msg.avg_noise_level = 0U;
    msg.peak_noise_level = 149U;
    msg.recv_listen_freq = 63U;
    msg.recv_mem_addr = 29304U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.8488451502098024);
    msg.setSource(55499U);
    msg.setSourceEntity(126U);
    msg.setDestination(42075U);
    msg.setDestinationEntity(64U);
    msg.frequency = 136055788U;
    msg.info.assign("VLFUBSNBLNVRID");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.6357067822947028);
    msg.setSource(63903U);
    msg.setSourceEntity(48U);
    msg.setDestination(17720U);
    msg.setDestinationEntity(97U);
    msg.frequency = 2015841460U;
    msg.info.assign("HKKEFQNTANUYIDSXXJAVPSFQBCGXHRWGAOVLCIJGNCHSRXUTDBOQISJIZJZEWYCGY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.7172209769703156);
    msg.setSource(9763U);
    msg.setSourceEntity(94U);
    msg.setDestination(24674U);
    msg.setDestinationEntity(237U);
    msg.frequency = 1347320234U;
    msg.info.assign("JWJXCVSCWVNZUHAOTWOYNHPHVQRUFFNIKQIPSCODMYQRWUGUHFQCMXGDOBNTJKJQWODHBUOEBKIKLOKNRQYSXQGIIFAPLWSOKYTVCELFQGICJAMWUPFVYRDFVKZZEHGHUESXXMAPXYZMRIJVTTJTNXXBCWVYOZSIHNAKHYSWTMLSRBZNLFIGSXPUUPANFLOFJPZMRBVEJAPGMDZXLYEMLRGZCCKGAHDLAQEEBABYQKCJBETTIZLP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.7258547797903935);
    msg.setSource(46281U);
    msg.setSourceEntity(216U);
    msg.setDestination(27626U);
    msg.setDestinationEntity(103U);
    msg.restriction = 79U;
    msg.reason.assign("PHLLEOHCNYIDZPFAXPZDZCPPJUEQYSMCHRWDMYFZXELSIMNQCMFVDVOVFIGBFKBXSGJKTSIVSKAEPVAZHYKQZUYAELRGUQBEEUXMWUGXAWMGLJIRMYCHRRWCJTIRTFWQHDYKGZSHVMBKIJWAOKVBRPKMHVTBZOXTAOXPBBSRCUHVQJWGVRFPTOBUYNYBLUJWLONQPEIZNAJMLGNEDIQKWNTSRFYIQCXDNALQADTNDOXXGNCOTKTSULGF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.6103455534778036);
    msg.setSource(12541U);
    msg.setSourceEntity(7U);
    msg.setDestination(13811U);
    msg.setDestinationEntity(199U);
    msg.restriction = 224U;
    msg.reason.assign("YROSWJJBFUXBNQKIOQHBMZYABMEQEXELMTIVVRRDXEZIUPDAAXAKFLYIJESIHSVSEYRZWQGACBNJCZUDYSHXAFLKABWJWFAXFJJHLCPZVPTVTCMUMIFVRCGON");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.5093877105927468);
    msg.setSource(32697U);
    msg.setSourceEntity(50U);
    msg.setDestination(19880U);
    msg.setDestinationEntity(160U);
    msg.restriction = 186U;
    msg.reason.assign("MRRYQASGRMTPQPSXTJTREXOLWGMOQZZVQIATEXWFDCLJOIHSFWSPLADCAKCYUFFPTVGEVBDHTJSRNOIUEUJWKEOFEUSNGZYKUZMZDAWCNSAYILNBBHJVIXWYNKQEGGGZSNLUJMKGXJKOZKXYBLNMTYUQDGFKNPDBTXCISTQEZREPJPDSRDYVYZPIZMOJRICWEBWVMOHXAGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.009309269473724346);
    msg.setSource(34010U);
    msg.setSourceEntity(131U);
    msg.setDestination(20549U);
    msg.setDestinationEntity(21U);
    msg.adcp = 98;
    msg.adcp_dur = 180074403U;
    msg.adcp_fr = 268093820U;
    msg.ctd = 4;
    msg.ctd_dur = 2505624583U;
    msg.ctd_fr = 3338650640U;
    msg.opt = -10;
    msg.opt_dur = 3823011144U;
    msg.opt_fr = 3595953905U;
    msg.tbl = 76;
    msg.tbl_dur = 1665725055U;
    msg.tbl_fr = 4116890641U;
    msg.eco = -71;
    msg.eco_dur = 1050869278U;
    msg.eco_fr = 2775283914U;
    msg.par = 47;
    msg.par_dur = 1239917900U;
    msg.par_fr = 841243705U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.9067190655906724);
    msg.setSource(62818U);
    msg.setSourceEntity(231U);
    msg.setDestination(32896U);
    msg.setDestinationEntity(102U);
    msg.adcp = 116;
    msg.adcp_dur = 935923322U;
    msg.adcp_fr = 4143388620U;
    msg.ctd = -98;
    msg.ctd_dur = 2671767915U;
    msg.ctd_fr = 3172097069U;
    msg.opt = -13;
    msg.opt_dur = 837402045U;
    msg.opt_fr = 4260728517U;
    msg.tbl = 46;
    msg.tbl_dur = 2844771657U;
    msg.tbl_fr = 632411948U;
    msg.eco = 1;
    msg.eco_dur = 2372787039U;
    msg.eco_fr = 3303051346U;
    msg.par = -61;
    msg.par_dur = 209015508U;
    msg.par_fr = 660703667U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.41217488503919053);
    msg.setSource(32229U);
    msg.setSourceEntity(19U);
    msg.setDestination(64350U);
    msg.setDestinationEntity(240U);
    msg.adcp = 79;
    msg.adcp_dur = 769853399U;
    msg.adcp_fr = 246783171U;
    msg.ctd = -39;
    msg.ctd_dur = 1950206597U;
    msg.ctd_fr = 641121237U;
    msg.opt = -41;
    msg.opt_dur = 1862862623U;
    msg.opt_fr = 4121876845U;
    msg.tbl = -22;
    msg.tbl_dur = 3265124380U;
    msg.tbl_fr = 6893922U;
    msg.eco = 77;
    msg.eco_dur = 2418093926U;
    msg.eco_fr = 3967443221U;
    msg.par = 120;
    msg.par_dur = 4232468971U;
    msg.par_fr = 3120397827U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.5602289834882902);
    msg.setSource(14075U);
    msg.setSourceEntity(116U);
    msg.setDestination(16995U);
    msg.setDestinationEntity(141U);
    msg.adcp = -69;
    msg.adcp_dur = 3547106137U;
    msg.adcp_fr = 3608967615U;
    msg.ctd = 58;
    msg.ctd_dur = 3323398869U;
    msg.ctd_fr = 3684014757U;
    msg.opt = 70;
    msg.opt_dur = 1679140122U;
    msg.opt_fr = 1443472759U;
    msg.tbl = 105;
    msg.tbl_dur = 1340228237U;
    msg.tbl_fr = 2192525562U;
    msg.eco = -114;
    msg.eco_dur = 1209318208U;
    msg.eco_fr = 2489712428U;
    msg.par = -128;
    msg.par_dur = 1259219821U;
    msg.par_fr = 467077875U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.6955547184871703);
    msg.setSource(37878U);
    msg.setSourceEntity(210U);
    msg.setDestination(18592U);
    msg.setDestinationEntity(23U);
    msg.adcp = 93;
    msg.adcp_dur = 2803810753U;
    msg.adcp_fr = 4138178081U;
    msg.ctd = 105;
    msg.ctd_dur = 2249304671U;
    msg.ctd_fr = 3350727326U;
    msg.opt = -116;
    msg.opt_dur = 2586796222U;
    msg.opt_fr = 1140408934U;
    msg.tbl = -47;
    msg.tbl_dur = 2103293767U;
    msg.tbl_fr = 749854104U;
    msg.eco = -48;
    msg.eco_dur = 1980771862U;
    msg.eco_fr = 4204989911U;
    msg.par = 70;
    msg.par_dur = 839513005U;
    msg.par_fr = 235288096U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.2266249592320856);
    msg.setSource(45489U);
    msg.setSourceEntity(244U);
    msg.setDestination(2326U);
    msg.setDestinationEntity(219U);
    msg.adcp = 63;
    msg.adcp_dur = 2175583345U;
    msg.adcp_fr = 2236505918U;
    msg.ctd = -101;
    msg.ctd_dur = 3248725410U;
    msg.ctd_fr = 659387542U;
    msg.opt = -100;
    msg.opt_dur = 2288881067U;
    msg.opt_fr = 383845495U;
    msg.tbl = 44;
    msg.tbl_dur = 2018426261U;
    msg.tbl_fr = 1481444461U;
    msg.eco = 125;
    msg.eco_dur = 215560184U;
    msg.eco_fr = 3199875796U;
    msg.par = 73;
    msg.par_dur = 796197043U;
    msg.par_fr = 1706992485U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.2559309617173805);
    msg.setSource(27973U);
    msg.setSourceEntity(114U);
    msg.setDestination(48275U);
    msg.setDestinationEntity(227U);
    msg.value = 0.5433998123000312;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.6499881043174068);
    msg.setSource(29888U);
    msg.setSourceEntity(103U);
    msg.setDestination(32497U);
    msg.setDestinationEntity(53U);
    msg.value = 0.9350854203915192;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.28505316471322917);
    msg.setSource(16301U);
    msg.setSourceEntity(139U);
    msg.setDestination(57766U);
    msg.setDestinationEntity(212U);
    msg.value = 0.9820645352140447;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.4027393422928752);
    msg.setSource(12369U);
    msg.setSourceEntity(173U);
    msg.setDestination(18949U);
    msg.setDestinationEntity(64U);
    msg.lat = 0.4209053677844812;
    msg.lon = 0.43928731168402035;
    msg.depth.assign("LXZBLKWGZUTERXFINJJPCXDGMEUBVSOYHWKDQULDHJNEBFCQAAQDMCDVHVTIUGZPWXNIKMOFYVCFRCPPCTMMTPXYZYXUBVHGGPSQRYEWHYFMJEUDWNLIMFZHD");
    msg.vel.assign("FBVEKWFGQPMEILKXNFGBPIQSDWXLPOKBZXRZOJJIKJMKGAXSPUPTXDHSPSRVHZXNYUUXAJFCUGKHGVZMDDHNNTAVOYUQCHYRTIUJILLHCVTUGAUMXFVGELKNTSZNWDWBWSAZRZODJIHITAKODOTEYKESBGIUGEJAMWULVMFFYPBNSVALLYMRAWQZHQODOSNPSQWEPNREDRWZCRVMLJQCYJBTGLTQFBCFJPCDHCEBMCTXWVYEIOYIMXOQ");
    msg.dir.assign("FBXTFKQWQQKJCZLOOABJWIXHYVBOVMGYYHJCKPOUZSCQGWOZHVDZDTEUPLHWICZBNFYNHSNPMAXZVVMIYMFXRSBAYWTRIBMRFTGPAJVEDKVXMIJEJARJLBBEICUZXFUTIVKMZQRMSAJHKHQBFJTHNEQVKUOHFGEUIZGUCGVXDYATWLWKSTKPIMFGYDHEPRNQS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.5427838830574839);
    msg.setSource(38292U);
    msg.setSourceEntity(218U);
    msg.setDestination(60453U);
    msg.setDestinationEntity(134U);
    msg.lat = 0.026311394775425545;
    msg.lon = 0.24548555015122153;
    msg.depth.assign("LFPYMSCCOAXWQYVWUYGVNITRYRDZNAWITXQQLZTHBNQMBSATDEJAKECRVPSVQOF");
    msg.vel.assign("RCTKGAZRKOLHXXYLPPCFXLCTHFGJCTBIVLX");
    msg.dir.assign("LWEXIUBRNDPWLYGKITPFESSQNAEAZRZUFHZLPBRXRHNTDKXOAIJLMUSWXEQCCKCIHVXJMUBOZWQFPZEPCLASJYMMLLZAWOUDNGMTNYYKDQCECRVTFSLBDTVYMWOSUNOQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.4837924300712445);
    msg.setSource(52283U);
    msg.setSourceEntity(174U);
    msg.setDestination(7366U);
    msg.setDestinationEntity(179U);
    msg.lat = 0.8765354856050986;
    msg.lon = 0.4667747034815253;
    msg.depth.assign("SROUGOXONJEFCTOPRLWGNBKUVHCMKZQLTTUPMSALTMVVADEUJMN");
    msg.vel.assign("BZXLZBJSFVHDMUJSWFZXHYSFYMJJUFOPNRPROUPZJRZBBLNTHBNCQEPICGDVHLCOIILKMPFBATSDNRESEHRVINV");
    msg.dir.assign("NUAMTGOBSVKDVSRWHTSGYQXQFFUFEYZJOTFZMWYKQUMHQPSCUGDNOJANOFYJBEOJDDHTBLZHXABGXHFDSELEKUYX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.4495746291136876);
    msg.setSource(47799U);
    msg.setSourceEntity(52U);
    msg.setDestination(27878U);
    msg.setDestinationEntity(138U);
    msg.source.assign("ZWEBAXXFWEDEETVVLAAHLXIYKYTJ");
    msg.lat = 0.2549261536726126;
    msg.lon = 0.5491522943163837;
    msg.sog = 0.33353767369997667;
    msg.uc = 0.3998561619599733;
    msg.depth = 0.8768640856582494;
    msg.value = 0.38133218874183994;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.32289987111985907);
    msg.setSource(36368U);
    msg.setSourceEntity(251U);
    msg.setDestination(52269U);
    msg.setDestinationEntity(74U);
    msg.source.assign("PSCALCOQIEBIRLEGHPSAQXTOIJHGKKEUKMPKXJREVAWJUDDIBOTMCYBYPGXOXTXMDAWOAZDBDCQNIHUNIHPVFULBRTFHRMRUFOBWSGSHDDZENOWZXTPLILAOGNZKEUCYYQZTWTLHRVJZDVCTTKVQWGJJFNGNMUKJKJLFTNLWABFBRX");
    msg.lat = 0.6027206570981315;
    msg.lon = 0.43737706930912457;
    msg.sog = 0.6937430474988194;
    msg.uc = 0.42847881729946424;
    msg.depth = 0.24144787498615095;
    msg.value = 0.630091561176767;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.530714361220204);
    msg.setSource(37054U);
    msg.setSourceEntity(242U);
    msg.setDestination(36629U);
    msg.setDestinationEntity(215U);
    msg.source.assign("EDSLAZQICBPSAUXEYHWTXKVPHOOUGLACMSOSAYJUHNGPACFGNYQZCFKIJTKZNSYGBVAGVYRXJKJCJLVXDOQJIECOYEQLAQYXOIVVUOKDCHFPHBCONFAFLIPJRUKWITHNZYDFULPRQYHMASQEMBWSRMXMRWFNLXYSKPQDTMTALWBPIKNJWENIVFZNHVQDOPTWL");
    msg.lat = 0.7286119902495216;
    msg.lon = 0.4293596467069455;
    msg.sog = 0.09928439615371931;
    msg.uc = 0.6225510300044386;
    msg.depth = 0.4257561764435791;
    msg.value = 0.8371306607109019;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.2932001934261397);
    msg.setSource(44646U);
    msg.setSourceEntity(232U);
    msg.setDestination(26202U);
    msg.setDestinationEntity(20U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.0050694276233355096;
    tmp_msg_0.x = 0.6837727757264284;
    tmp_msg_0.y = 0.5135885896288643;
    tmp_msg_0.z = 0.5873532209526607;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.3172398433088647;
    tmp_msg_1.x = 0.2964068334037342;
    tmp_msg_1.y = 0.788968173536849;
    tmp_msg_1.z = 0.9617615581550454;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.40632764400837196;
    tmp_msg_2.value = 0.6550596022141763;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.8083429851959146);
    msg.setSource(64086U);
    msg.setSourceEntity(40U);
    msg.setDestination(26632U);
    msg.setDestinationEntity(40U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.2060629475950988;
    tmp_msg_0.x = 0.2796954811007507;
    tmp_msg_0.y = 0.009118450649631238;
    tmp_msg_0.z = 0.6024151605608512;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.7972370010826237;
    tmp_msg_1.x = 0.6886115592104041;
    tmp_msg_1.y = 0.3388646775502637;
    tmp_msg_1.z = 0.044660708146133876;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.3407364487749175;
    tmp_msg_2.value = 0.4486612775273642;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.3678786782982484);
    msg.setSource(45571U);
    msg.setSourceEntity(82U);
    msg.setDestination(48203U);
    msg.setDestinationEntity(154U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.24929897112362054;
    tmp_msg_0.x = 0.6874845341256526;
    tmp_msg_0.y = 0.6694055806741912;
    tmp_msg_0.z = 0.8321885839508654;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.270532124973794;
    tmp_msg_1.x = 0.5832671493242021;
    tmp_msg_1.y = 0.7571759259850269;
    tmp_msg_1.z = 0.8622958332821619;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.4022897101520597;
    tmp_msg_2.value = 0.4106833176696739;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.3441858585477664);
    msg.setSource(8649U);
    msg.setSourceEntity(232U);
    msg.setDestination(27826U);
    msg.setDestinationEntity(234U);
    msg.gdop = 0.29713462920850797;
    msg.pdop = 0.6452787936673129;
    msg.tdop = 0.25453659484551117;
    msg.vdop = 0.42266700804107016;
    msg.hdop = 0.3099052186235697;
    msg.ndop = 0.02815143601365888;
    msg.edop = 0.7731989616361951;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.09614920159251517);
    msg.setSource(23536U);
    msg.setSourceEntity(209U);
    msg.setDestination(54870U);
    msg.setDestinationEntity(253U);
    msg.gdop = 0.028896395616847537;
    msg.pdop = 0.6689133265776467;
    msg.tdop = 0.9717787893050501;
    msg.vdop = 0.05715039397960564;
    msg.hdop = 0.18801010631017512;
    msg.ndop = 0.8375857925621866;
    msg.edop = 0.061580341702500485;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.8257889562458571);
    msg.setSource(63113U);
    msg.setSourceEntity(119U);
    msg.setDestination(51534U);
    msg.setDestinationEntity(240U);
    msg.gdop = 0.3101124452745472;
    msg.pdop = 0.23692487901699244;
    msg.tdop = 0.640067833689553;
    msg.vdop = 0.01802770655944408;
    msg.hdop = 0.5161743286776243;
    msg.ndop = 0.20315681415270714;
    msg.edop = 0.20733205181287506;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.8398167722895912);
    msg.setSource(16808U);
    msg.setSourceEntity(209U);
    msg.setDestination(16328U);
    msg.setDestinationEntity(81U);
    msg.meanx = 0.21870170105374076;
    msg.meany = 0.3573654502872389;
    msg.meanz = 0.8804278176491814;
    msg.dur = 2751073977U;
    msg.meanacc = 0.3965499806728209;
    msg.obs = 1950105088U;
    msg.valid = 161U;
    msg.active = 85U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.4561014214886536);
    msg.setSource(22069U);
    msg.setSourceEntity(7U);
    msg.setDestination(44160U);
    msg.setDestinationEntity(188U);
    msg.meanx = 0.3549659730303957;
    msg.meany = 0.7557170696786605;
    msg.meanz = 0.6581492938014747;
    msg.dur = 2467654314U;
    msg.meanacc = 0.029948835949310526;
    msg.obs = 3088490689U;
    msg.valid = 150U;
    msg.active = 246U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.20755829858270114);
    msg.setSource(46574U);
    msg.setSourceEntity(194U);
    msg.setDestination(17934U);
    msg.setDestinationEntity(225U);
    msg.meanx = 0.35835066399329485;
    msg.meany = 0.003405107132227192;
    msg.meanz = 0.16138584051377391;
    msg.dur = 587401460U;
    msg.meanacc = 0.21652844743425326;
    msg.obs = 1010978025U;
    msg.valid = 38U;
    msg.active = 57U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.07883408352657972);
    msg.setSource(41235U);
    msg.setSourceEntity(123U);
    msg.setDestination(41344U);
    msg.setDestinationEntity(173U);
    msg.gpsfixtype = 183U;
    msg.flags = 120U;
    msg.diffcorr = 159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.3016023699024485);
    msg.setSource(24680U);
    msg.setSourceEntity(96U);
    msg.setDestination(54528U);
    msg.setDestinationEntity(216U);
    msg.gpsfixtype = 204U;
    msg.flags = 78U;
    msg.diffcorr = 190U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.734632501543532);
    msg.setSource(13639U);
    msg.setSourceEntity(105U);
    msg.setDestination(37407U);
    msg.setDestinationEntity(75U);
    msg.gpsfixtype = 17U;
    msg.flags = 20U;
    msg.diffcorr = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.7220143100268065);
    msg.setSource(32256U);
    msg.setSourceEntity(49U);
    msg.setDestination(22796U);
    msg.setDestinationEntity(241U);
    msg.gnssid = 240U;
    msg.svid = 203U;
    msg.sigid = 52U;
    msg.freqid = 121U;
    msg.prres = 0.5147589695751122;
    msg.cno = 98U;
    msg.qualityind = 208U;
    msg.corrsource = 121U;
    msg.ionomodel = 234U;
    msg.health = 90U;
    msg.sigflags = 141U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.9097766205718432);
    msg.setSource(48719U);
    msg.setSourceEntity(246U);
    msg.setDestination(13489U);
    msg.setDestinationEntity(33U);
    msg.gnssid = 188U;
    msg.svid = 112U;
    msg.sigid = 153U;
    msg.freqid = 203U;
    msg.prres = 0.13345385452516456;
    msg.cno = 172U;
    msg.qualityind = 179U;
    msg.corrsource = 7U;
    msg.ionomodel = 186U;
    msg.health = 29U;
    msg.sigflags = 134U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.9488934322071998);
    msg.setSource(3340U);
    msg.setSourceEntity(120U);
    msg.setDestination(12076U);
    msg.setDestinationEntity(180U);
    msg.gnssid = 22U;
    msg.svid = 207U;
    msg.sigid = 153U;
    msg.freqid = 179U;
    msg.prres = 0.8302325371276711;
    msg.cno = 171U;
    msg.qualityind = 86U;
    msg.corrsource = 111U;
    msg.ionomodel = 65U;
    msg.health = 254U;
    msg.sigflags = 24U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.21529719421476246);
    msg.setSource(7857U);
    msg.setSourceEntity(45U);
    msg.setDestination(19124U);
    msg.setDestinationEntity(45U);
    msg.numsigs = 75U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.71988423106924);
    msg.setSource(20390U);
    msg.setSourceEntity(161U);
    msg.setDestination(31419U);
    msg.setDestinationEntity(45U);
    msg.numsigs = 216U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 173U;
    tmp_msg_0.svid = 195U;
    tmp_msg_0.sigid = 50U;
    tmp_msg_0.freqid = 55U;
    tmp_msg_0.prres = 0.2222418148190114;
    tmp_msg_0.cno = 197U;
    tmp_msg_0.qualityind = 214U;
    tmp_msg_0.corrsource = 71U;
    tmp_msg_0.ionomodel = 187U;
    tmp_msg_0.health = 72U;
    tmp_msg_0.sigflags = 103U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.08975166956660219);
    msg.setSource(46731U);
    msg.setSourceEntity(210U);
    msg.setDestination(1753U);
    msg.setDestinationEntity(139U);
    msg.numsigs = 29U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 30U;
    tmp_msg_0.svid = 215U;
    tmp_msg_0.sigid = 14U;
    tmp_msg_0.freqid = 36U;
    tmp_msg_0.prres = 0.48568660394311514;
    tmp_msg_0.cno = 121U;
    tmp_msg_0.qualityind = 84U;
    tmp_msg_0.corrsource = 157U;
    tmp_msg_0.ionomodel = 221U;
    tmp_msg_0.health = 32U;
    tmp_msg_0.sigflags = 201U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.28520097789211163);
    msg.setSource(53829U);
    msg.setSourceEntity(177U);
    msg.setDestination(48736U);
    msg.setDestinationEntity(3U);
    msg.gnssid = 50U;
    msg.svid = 8U;
    msg.elev = 0.22728756470229117;
    msg.azim = 0.66543455709168;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.867707795061597);
    msg.setSource(22812U);
    msg.setSourceEntity(169U);
    msg.setDestination(36572U);
    msg.setDestinationEntity(188U);
    msg.gnssid = 67U;
    msg.svid = 199U;
    msg.elev = 0.11425470684212513;
    msg.azim = 0.11092456746035806;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.5450843116144423);
    msg.setSource(9038U);
    msg.setSourceEntity(29U);
    msg.setDestination(16411U);
    msg.setDestinationEntity(33U);
    msg.gnssid = 216U;
    msg.svid = 105U;
    msg.elev = 0.9479192129990345;
    msg.azim = 0.5630029220180802;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.8191758130282645);
    msg.setSource(7889U);
    msg.setSourceEntity(134U);
    msg.setDestination(26101U);
    msg.setDestinationEntity(169U);
    msg.numsvs = 239U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 212U;
    tmp_msg_0.svid = 48U;
    tmp_msg_0.elev = 0.3356841869849684;
    tmp_msg_0.azim = 0.48087289274407363;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.9523871099420159);
    msg.setSource(9037U);
    msg.setSourceEntity(70U);
    msg.setDestination(61074U);
    msg.setDestinationEntity(73U);
    msg.numsvs = 114U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 168U;
    tmp_msg_0.svid = 63U;
    tmp_msg_0.elev = 0.42929792706278225;
    tmp_msg_0.azim = 0.08384428615147266;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.15561124315705555);
    msg.setSource(39598U);
    msg.setSourceEntity(52U);
    msg.setDestination(63159U);
    msg.setDestinationEntity(134U);
    msg.numsvs = 131U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 84U;
    tmp_msg_0.svid = 168U;
    tmp_msg_0.elev = 0.5703866424080677;
    tmp_msg_0.azim = 0.7395161476766577;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.7048757682582365);
    msg.setSource(46459U);
    msg.setSourceEntity(141U);
    msg.setDestination(12931U);
    msg.setDestinationEntity(81U);
    msg.refstationid = 22694U;
    msg.itow = 3763793913U;
    msg.relposn = 0.17943551085500475;
    msg.relpose = 0.05243132674532436;
    msg.relposd = 0.37363000244533695;
    msg.relposlength = 0.34778677737581287;
    msg.relposheading = 0.6704318135041479;
    msg.accn = 0.37980170805963587;
    msg.acce = 0.16253904647544215;
    msg.accd = 0.5274287362686972;
    msg.acclength = 0.168780808009658;
    msg.accheading = 0.1930741074738882;
    msg.gnssfixok = 62U;
    msg.diffsoln = 58U;
    msg.relposvalid = 144U;
    msg.ismoving = 170U;
    msg.refposmiss = 77U;
    msg.refobsmiss = 141U;
    msg.relposheadingvalid = 72U;
    msg.carrsoln = 13U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.3486433623248002);
    msg.setSource(23451U);
    msg.setSourceEntity(246U);
    msg.setDestination(30945U);
    msg.setDestinationEntity(34U);
    msg.refstationid = 23335U;
    msg.itow = 2202152240U;
    msg.relposn = 0.5690204825590014;
    msg.relpose = 0.13296736181736435;
    msg.relposd = 0.12834330913678793;
    msg.relposlength = 0.9415880434878949;
    msg.relposheading = 0.2494649095453465;
    msg.accn = 0.41310858231524505;
    msg.acce = 0.6713041699144398;
    msg.accd = 0.7887110480785384;
    msg.acclength = 0.25153650065274746;
    msg.accheading = 0.5551536619232138;
    msg.gnssfixok = 22U;
    msg.diffsoln = 42U;
    msg.relposvalid = 249U;
    msg.ismoving = 86U;
    msg.refposmiss = 113U;
    msg.refobsmiss = 170U;
    msg.relposheadingvalid = 92U;
    msg.carrsoln = 56U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.10624374925600066);
    msg.setSource(30851U);
    msg.setSourceEntity(138U);
    msg.setDestination(32884U);
    msg.setDestinationEntity(114U);
    msg.refstationid = 53016U;
    msg.itow = 635882356U;
    msg.relposn = 0.4675409637730805;
    msg.relpose = 0.3111682295422977;
    msg.relposd = 0.23117305324931037;
    msg.relposlength = 0.6954788579626293;
    msg.relposheading = 0.005900061484569452;
    msg.accn = 0.6889393335741907;
    msg.acce = 0.921255857331193;
    msg.accd = 0.3183941541323777;
    msg.acclength = 0.8152976262006966;
    msg.accheading = 0.2835199129595649;
    msg.gnssfixok = 160U;
    msg.diffsoln = 96U;
    msg.relposvalid = 27U;
    msg.ismoving = 63U;
    msg.refposmiss = 198U;
    msg.refobsmiss = 178U;
    msg.relposheadingvalid = 205U;
    msg.carrsoln = 72U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  return test.getReturnValue();
}
